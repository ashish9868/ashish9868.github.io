{"version":3,"sources":["slices/RankSlice.js","slices/BranchSlice.js","slices/LocationSlice.js","slices/NmsDeviceSlice.js","slices/DeviceSlice.js","components/PhotoThumb.js","utils/httpClient.js","services/UploadService.js","components/EntityForm.js","utils/storeHelper.js","slices/globalSlice.js","slices/currentUserSlice.js","services/UserService.js","components/LoginForm.js","utils/routerHelper.js","constants/global.js","components/Dialog.js","components/DataGridComponent.js","modules/branches/views/BranchListView.js","modules/locations/views/LocationListView.js","modules/ranks/views/RankListView.js","services/RegistrationService.js","modules/registrations/views/RegistrationListView.js","services/CommonService.js","modules/users/UserListView.js","modules/dashboard/views/DashboardView.js","components/GlobalToast.js","modules/nms-devices/views/NmsDevicesListView.js","components/filters/LocationFilter.js","modules/device-directory/views/DevicesListView.js","modules/users/AdminListView.js","utils/commonHelper.js","modules/users/OnlineUsersView.js","modules/backups/BackupsListView.js","components/filters/DateFilter.js","modules/reports/ReportListView.js","services/SettingService.js","modules/settings/SettingsListView.js","modules/contact_us/ContactUsView.js","layouts/index.js","index.js","utils/localStorageHelper.js","slices/RegistrationSlice.js","slices/UserSlice.js","store/store.js"],"names":["createSlice","name","initialState","listData","results","currentPage","totalResults","totalPages","rank","reducers","setRanks","state","payload","RankReducer","reducer","RankActions","actions","branch","setBranches","BranchReducer","BranchActions","_location","setLocations","LocationReducer","LocationActions","nms","setNmsDevices","NmsDeviceReducer","NmsDeviceActions","setDevices","DeviceReducer","DeviceActions","PhotoThumb","url","width","height","border","borderColor","onClick","style","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","cursor","className","httpClient","axios","create","baseURL","headers","interceptors","request","use","config","user","LocalStorageHelper","get","accessToken","response","data","success","error","errorResponse","status","errors","globalError","showGlobalModalNotification","message","hideTs","title","Promise","resolve","code","store","dispatch","CurrentUserActions","setUserState","reject","uploadFile","file","FormData","append","post","res","getUploadedFiles","deleteFile","id","delete","UploadService","CustomDateInput","forwardRef","ref","originalValue","disabled","text","icon","FieldWrap","field","touched","children","formErrors","shouldShowError","type","cols","hideLabel","htmlFor","label","EntityForm","action","method","initialValues","validationSchema","fields","onSubmit","values","props","editMode","entitySingle","submitTitle","hideSubmit","length","md","enableReinitialize","formConfig","modifiedValues","Object","keys","forEach","key","undefined","setFieldValue","Date","now","map","options","object","Array","isArray","push","value","objectAsArray","as","placeholder","onChange","e","nativeEvent","target","option","setCheckBoxGroupFieldValue","existingValues","Set","checked","add","parseInt","from","backgroundColor","overflow","includes","theme","showIcon","date","format","customInput","files","accept","opacity","position","left","top","default","document","getElementById","click","autoComplete","window","scrollTo","GlobalActions","setGlobalMessage","dismissGlobalError","globalMessage","settings","snmpDeviceStatus","setWebsiteSettings","setSnmpDeviceStatus","GlobalReducer","userKEY","currentUser","location","setCurrentUser","CurrentUserReducer","loginUser","username","password","getCurrentUser","logOutUser","getAllUsers","params","rejectUser","approveUser","blockUser","patch","unblockUser","UserService","loginSchema","yup","shape","required","LoginForm","triggerLogin","history","_history","useHistory","useState","setFormErrors","paddingTop","href","initialErrors","placholder","pushQueryParams","replace","queryParams","parseQueryParams","finalParams","p","pathname","search","URLSearchParams","toString","defaultVal","v","k","LOCATION_LIST_PAGE","RANK_LIST_PAGE","BRANCH_LIST_PAGE","REGISTRATION_LIST_PAGE","NMS_LIST_PAGE","USER_LIST_PAGE","DEVICE_MAMAGEMENT_ROUTE","ONLINE_USERS_ROUTE","SUPER_USER_LIST_PAGE","BACKUPS_LIST","REPORTS_LIST_PAGE","SETTINGS_PAGE","CONTACT_PAGE","NAV_ITEMS","path","color","USER_STATUSES","USER_ROLES","SUPERADMIN","ADMIN","USER","SETTINGS_CONFIG","Dialog","exists","show","showHeader","acceptText","cancelText","canDismiss","size","bodyPadding","zIndex","cancelDisabled","successDisabled","onSuccess","onCancel","onDismiss","tabIndex","display","LoadingOverlay","propTypes","MODE_EDIT","DataGridComponent","modalSize","keyField","entityPlural","columns","hideIdOnEdit","limit","remote","sort","filter","pagination","defaultSorted","dataField","order","showTotal","beforeSave","onTableChange","onDataUpdated","tableData","onDelete","canAdd","canDelete","canEdit","rowActionButtons","globalActionButtons","formOptions","resource","onFormShow","row","mode","actionColumnWidth","filterComponents","rest","record","setCurrentRecord","showFormDialog","setShowFormDialog","selectedIds","setSelectedIds","loading","setLoading","records","setRecords","fetchTableData","useCallback","result","columnsWithActions","useMemo","clms","clm","isDummyField","formatter","cellContent","actionButton","canShow","fieldsDyanmic","recordKey","triggerSetCurrentRecord","isAddEdit","currentRecord","find","r","useEffect","listen","Fragment","resetForm","put","baseProps","paginationFactory","page","sizePerPage","totalSize","sizePerPageList","paginationSize","_data","sortOrder","sortBy","striped","selectRow","bgColor","selectColumnStyle","onSelectAll","isSelected","selections","onSelect","hideSelectColumn","overlay","overlayFactory","spinner","styles","base","background","noDataIndication","BranchListView","description","subTitle","browserTitle","hidden","LocationListView","joinChar","level","setLevel","segments","setSegments","_level","_segments","locationId","join","_handler","split","segment","concat","email","RankListView","rejectRegistration","approveRegistration","RegistrationService","STATUSES","RegistrationListView","require","getLocationList","locations","getBranchesList","getRanksList","createDatabaseBackup","getDashboardSummary","getNmsDevicesStatus","CommonServerice","UserListView","branches","ranks","setRecord","setMode","console","log","CommonService","_fields","l","firstName","branchId","rankId","c","b","middleName","lastName","x","ip","port","DashboardView","NAVIGATION_CARDS","totalUsers","to","totalOnlineUsers","totalSuperUsers","totalNmsDevices","totalDevices","totalPendingRequests","summary","setSummary","card","connect","globalState","deviceStatus","setDeviceStatus","checkInterval","setCheckInterval","interval","s","setInterval","clearInterval","address","isOnline","str","systemName","atob","LocationFilter","setLocationId","getFilterValue","DeviceListView","AdminListView","role","humanFriendlyDateFormat","dateStrIso","defaultFormatStr","parseISO","formatMySql","dateStr","convertToDate","strordate","OnLineUsersView","BackupsListView","bytes","toFixed","DateFilter","showPicker","setShowPicker","setState","defaultStart","subDays","defaultEnd","start","end","isDate","isBefore","startDate","endDate","minDate","subYears","maxDate","item","selection","showSelectionPreview","moveRangeOnFirstSelection","months","ranges","direction","ReportListView","toUpperCase","getWebsiteSettings","saveWebsiteSetting","settingData","SettingService","triggerGetSettings","setSettings","setting","READ_SETTINGS","ContactUsView","_settings","Entry","Navbar","Footer","padding","margin","marginLeft","borderTop","currentUserState","triggerGetCurrentUser","logo","setLogo","setTimeout","eleme","querySelector","footer","Core","labelValue","labelType","route","navigateToLogin","index","items","Item","childItem","childIndex","exact","ReactDOM","render","localStorage","setItem","JSON","stringify","getItem","parse","removeItem","setRegistrations","RegistrationReducer","setUsers","UserReducer","configureStore","rankState","branchState","locationState","registrationState","nmsState","deviceState","userState","UserManagementReducer","middleware","thunk"],"mappings":"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","file":"static/js/main.7894a7fb.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: RankReducer, actions: RankActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      rank: null,\n    },\n    reducers: {\n      setRanks: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: BranchReducer, actions: BranchActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      branch: null,\n    },\n    reducers: {\n      setBranches: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: LocationReducer, actions: LocationActions } = createSlice(\n  {\n    name: \"locationSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      _location: null,\n    },\n    reducers: {\n      setLocations: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: NmsDeviceReducer, actions: NmsDeviceActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      nms: null,\n    },\n    reducers: {\n      setNmsDevices: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: DeviceReducer, actions: DeviceActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      nms: null,\n    },\n    reducers: {\n      setDevices: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import React from \"react\";\nconst PhotoThumb = ({\n  url = null,\n  width = 120,\n  height = 120,\n  border = 1,\n  borderColor = \"grey\",\n  onClick = () => {}\n}) => {\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        width,\n        height,\n        backgroundImage: `url(${url})`,\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"contain\",\n        backgroundPosition: 'center',\n        border: `solid ${border || 1}px ${borderColor}`,\n        cursor: \"pointer\",\n      }}\n      className=\"img-thumbnail m-2\"\n    />\n  );\n};\n\nexport default PhotoThumb;\n","import axios from \"axios\";\nimport store from \"src/store/store\";\nimport { CurrentUserActions } from \"src/slices/currentUserSlice\";\nimport LocalStorageHelper from \"./localStorageHelper\";\nimport { showGlobalModalNotification } from \"./storeHelper\";\n\nconst baseUrl = `http://localhost:28000`;\nconst httpClient = axios.create({\n  baseURL: baseUrl,\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n\n\nhttpClient.interceptors.request.use((config) => {\n  // Do something before request is sent\n  const user = LocalStorageHelper.get('currentUser');\n  config.headers['Content-type'] = `application/json`\n  config.headers['Authorization'] = `Bearer ${user?.accessToken}`\n  return config;\n});\n\nhttpClient.interceptors.response.use(\n  (response) => {\n    return { data: response.data, success: true };\n  },\n  (error) => {\n    const errorResponse = error?.response;\n    switch (errorResponse?.status) {\n      case 422:\n        const errors = errorResponse?.data ?? {}\n        const globalError = errors['global'] || null\n        if (globalError){\n          showGlobalModalNotification({\n            message: globalError,\n            success: false,\n            hideTs: 5000,\n            title: \"Error!!\"\n          })\n        }\n        return Promise.resolve({\n          success: false,\n          errors: errors,\n          code: 422,\n        });\n      case 401:\n        // const redirectURL = errorResponse.request.responseURL\n        store.dispatch(CurrentUserActions.setUserState(null));\n        // window.location = `/login?redirect=${encodeURIComponent(redirectURL)}`\n        return Promise.resolve({\n          success: false,\n          code: 401,\n        });\n      case 404:\n        showGlobalModalNotification({\n          message: 'Page/Resource you are trying to access, do not exist.',\n          success: false,\n          hideTs: 5000,\n          title: \"Error!!\"\n        })\n        return Promise.resolve({\n          success: false,\n          code: 404,\n        });\n      default:\n        showGlobalModalNotification({\n          message: \"Something went wrong.\",\n          success: false,\n          hideTs: 5000,\n          title: \"Error!!\"\n        })\n\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default httpClient;\n","import httpClient from \"src/utils/httpClient\";\n\nconst uploadFile = async (file) => {\n  const data = new FormData();\n  data.append(\"file\", file);\n  const res = await httpClient.post(\"/api/v1/admin/uploads\", data);\n  const url = res?.success ? res.data : null\n  return url ? `/api/v1/uploads/${url}` : null\n};\n\nconst getUploadedFiles = async () => await httpClient.get(\"/api/v1/admin/uploads\");\n\nconst deleteFile = async (id) => await httpClient.delete(`/api/v1/admin/uploads/${id}`)\n\nconst UploadService = {\n  uploadFile,\n  getUploadedFiles,\n  deleteFile\n};\n\n\nexport default UploadService;\n","import { Field, Form, Formik } from \"formik\";\nimport React, { forwardRef } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport DatePicker from \"react-datepicker\";\nimport PhotoThumb from \"./PhotoThumb\";\nimport { format } from \"date-fns\";\nimport { Button, ButtonGroup, Col, Row } from \"adminlte-2-react\";\nimport { showGlobalModalNotification } from \"src/utils/storeHelper\";\nimport UploadService from \"src/services/UploadService\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst CustomDateInput = forwardRef(({ onClick, originalValue }, ref) => {\n  return (\n    <ButtonGroup>\n      <Button className=\"ps-2 pe-2\" disabled text={originalValue || \"YYYY-MM-DD\"} />\n      <Button onClick={onClick} icon=\"fa-calendar\" />\n    </ButtonGroup>\n  );\n});\nconst FieldWrap = ({\n  field = {},\n  errors = {},\n  touched = {},\n  children = null,\n  formErrors = {}\n}) => {\n  const shouldShowError =\n    (errors[field.name] && touched[field.name]) ||\n    (errors[field.name] && field.type === \"richtext\") || formErrors[field.name];\n  return (\n    <Col key={field.id} className={`mb-2 col-lg-${field.cols} col-sm-12 col-md-6`}>\n      <div className={`form-group ${shouldShowError ? 'has-error' : ''}`}>\n        {!field?.hideLabel && <label htmlFor={field.id} className=\"form-label\">\n          {field.label}\n        </label>\n        }\n        <div>\n          {children}\n          {shouldShowError && (\n            <span className=\"text-red\"><p>{errors[field.name] || formErrors[field.name]}</p></span>\n          )}\n        </div>\n      </div>\n    </Col>\n  );\n};\n\nconst objectAsArray = (object) => {\n  if (Array.isArray(object)) {\n    return object;\n  } else {\n    const data = [];\n    Object.keys(key => {\n      data.push({ key, value: object[key] })\n    })\n    return data;\n  }\n}\n\nconst EntityForm = ({\n  id = \"\",\n  action = \"\",\n  method = \"POST\",\n  disabled = false,\n  initialValues = {},\n  validationSchema = null,\n  fields = [],\n  onSubmit = async (values, props) => { },\n  editMode = false,\n  entitySingle = 'record',\n  submitTitle = null,\n  formErrors = {},\n  hideSubmit = false\n}) => {\n\n  if (!initialValues || fields.length < 1) {\n    return <></>;\n  }\n  return (\n    <Row>\n      <Col md={12}>\n        <Formik\n          initialValues={initialValues}\n          enableReinitialize\n          onSubmit={(values, formConfig) => {\n            const modifiedValues = {}\n            Object.keys(initialValues).forEach(key => {\n              if ((values[key] !== initialValues[key] && values[key] !== undefined) || `${key}` === \"id\") {\n                modifiedValues[key] = values[key]\n              }\n            });\n            onSubmit(modifiedValues, formConfig)\n          }}\n          validationSchema={validationSchema}\n        >\n          {({ errors, touched, values, setFieldValue }) => (\n            <Form\n              action={action}\n              id={id || Date.now()}\n              method={method}\n              disabled={disabled}\n            >\n              <Row>\n                {fields.map((field) => {\n                  switch (field.type) {\n                    case \"fieldset\":\n                      return (\n                        <h3 className=\"display-6 fs-6 pt-2 pb-2 fw-bold bg-secondary text-white\">{field?.title}</h3>\n                      );\n                    case \"select\":\n                      const options = objectAsArray(field?.options || [])\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}-${entitySingle}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <Field\n                            as=\"select\"\n                            className={\n                              errors[field.name] && touched[field.name]\n                                ? \"form-select rounded-0 is-invalid shadow-none form-control\"\n                                : \"form-select form-control\"\n                            }\n                            placeholder={field.placeholder || field.label}\n                            name={field.name}\n                            id={field.id}\n                            onChange={(e) => {\n                              field.onChange && field.onChange(e)\n                              setFieldValue(field.name, e.nativeEvent.target.value)\n                            }}\n                          >\n                            <option value={''}>{field.placeholder || field.label}</option>\n                            {options.map((option) => (\n                              <option\n                                key={`${option.key}-${entitySingle}`}\n                                value={option.key}\n                              >\n                                {option.value}\n                              </option>\n                            ))}\n                          </Field>\n                        </FieldWrap>\n                      );\n                    case \"textarea\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <Field\n                            as=\"textarea\"\n                            className={\n                              errors[field.name] && touched[field.name]\n                                ? \"form-control shadow-none is-invalid\"\n                                : \"form-control shadow-none\"\n                            }\n                            placeholder={field.placeholder || field.label}\n                            name={field.name}\n                            id={field.id}\n                            onChange={(e) => {\n                              field.onChange && field.onChange(e)\n                              setFieldValue(field.name, e.nativeEvent.target.value)\n                            }}\n                          />\n                        </FieldWrap>\n                      );\n                    case \"checkbox_group\":\n                      const setCheckBoxGroupFieldValue = (e) => {\n                        const existingValues = new Set(values[field.name].length > 0 ? values[field.name] : [])\n                        if (e.target.checked) {\n                          existingValues.add(parseInt(e.target.value))\n                        } else {\n                          existingValues.delete(parseInt(e.target.value))\n                        }\n                        setFieldValue(field.name, Array.from(existingValues))\n                      }\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n\n                        >\n                          <div className=\"p-3 ps-3\" style={{ height: `${field.height || 150}px`, backgroundColor: '', border: 'solid 1px #eee', overflow: 'auto' }}>\n                            {field.options.map(option => {\n                              return (\n                                <div key={option.key} className=\"form-check\">\n                                  <input\n                                    type=\"checkbox\"\n                                    className={\n                                      errors[field.name] && touched[field.name]\n                                        ? \"form-check-input shadow-none is-invalid\"\n                                        : \"form-check-input shadow-none\"\n                                    }\n                                    name={`${field.name}`}\n                                    checked={values[field.name].includes(option.key)}\n                                    id={`${field.id}-${option.key}`}\n                                    value={option.key}\n                                    onChange={setCheckBoxGroupFieldValue}\n                                  />\n                                  <label className=\"form-check-label\" htmlFor={`${field.id}-${option.key}`}>{option.value}</label>\n                                </div>\n                              )\n                            })}\n                          </div>\n                        </FieldWrap>\n                      );\n                    case \"richtext\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <ReactQuill\n                            theme=\"snow\"\n                            value={values[field.name]}\n                            onChange={(value) => setFieldValue(field.name, value)}\n                          />\n                        </FieldWrap>\n                      );\n                    case \"date\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <DatePicker\n                            showIcon\n                            name={field.name}\n                            className=\"d-flex\"\n                            onChange={(date) => {\n                              field.onChange && field.onChange(date)\n                              setFieldValue(\n                                field.name,\n                                format(date, \"yyyy-MM-dd\")\n                              )\n                            }\n                            }\n                            customInput={\n                              <CustomDateInput\n                                originalValue={values[field.name]}\n                              />\n                            }\n                          />\n                        </FieldWrap>\n                      );\n                    case \"upload\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <input onChange={async (e) => {\n                            const file = e.nativeEvent?.target?.files[0]\n                            if (!file) {\n                              showGlobalModalNotification({\n                                success: false,\n                                message: \"You've choosen any file\",\n                              })\n                              return\n                            }\n                            const url = await UploadService.uploadFile(file)\n                            if (!url) {\n                              showGlobalModalNotification({\n                                success: false,\n                                message: \"Unable to upload file, contact server admin.\"\n                              })\n                              return\n                            }\n                            setFieldValue(field.name, url)\n                          }} id=\"fileinputRef\" accept=\"image/*\" type=\"file\" name={\"file\"} style={{ opacity: 0, position: \"absolute\", left: -9999, top: -100 }} />\n                          <div className=\"d-flex flex-wrap align-items-center justify-content-start\">\n                            <PhotoThumb\n                              key={\"no-selection\"}\n                              url={values[field.name] || values[field.default]}\n                            />\n                            <Button\n                              onClick={() => {\n                                document.getElementById('fileinputRef').click();\n                              }}\n                              icon=\"fa-edit\"\n                            />\n                          </div>\n                        </FieldWrap>\n                      );\n                    case \"hidden\":\n                      return (\n                        <Field\n                          key={`field-${field.id}`}\n                          autoComplete=\"off\"\n                          name={field.name}\n                          type={\"hidden\"}\n                          id={field.id}\n                        />\n                      );\n                    default:\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <Field\n                            autoComplete=\"off\"\n                            className={\n                              errors[field.name] && touched[field.name]\n                                ? \"form-control rounded-0 shadow-none is-invalid\"\n                                : \"form-control rounded-0 shadow-none\"\n                            }\n                            placeholder={field.placeholder || field.label}\n                            name={field.name}\n                            type={field.type}\n                            id={field.id}\n                            onChange={(e) => {\n                              field.onChange && field.onChange(e)\n                              setFieldValue(field.name, e.nativeEvent.target.value)\n                            }}\n                          />\n                        </FieldWrap>\n                      );\n                  }\n                })}\n              </Row>\n              {!hideSubmit && (\n                <>\n                  <hr />\n                  <div className=\"d-flex flex-row-reverse text-right\">\n                    <button\n                      disabled={disabled}\n                      onClick={() => window.scrollTo(0, 0)}\n                      type=\"success\"\n                      className=\"btn rounded-0  btn-primary\"\n                    >\n                      {submitTitle && <span>{submitTitle}</span>}\n                      {!submitTitle && (\n                        <span>\n                          {editMode ? \"Update\" : \"Create\"} {entitySingle}\n                        </span>\n                      )}\n                    </button>\n                  </div>\n                </>\n              )}\n\n            </Form>\n          )}\n        </Formik>\n      </Col>\n    </Row>\n  );\n};\n\nexport default EntityForm;\n","import { GlobalActions } from \"src/slices/globalSlice\"\nimport store from \"src/store/store\"\n\n\nexport const showGlobalModalNotification = ({\n    success = true,\n    title = 'Please note',\n    message,\n    hideTs = 3000\n}) => {\n    window.scrollTo(0, 0)\n    store.dispatch(GlobalActions.setGlobalMessage({\n        type: success ? 'success' : 'danger',\n        title,\n        message\n    }))\n    // setTimeout(function () {\n    //    \n    // }, hideTs)\n}\n\nexport const dismissGlobalError = () => {\n    store.dispatch(GlobalActions.setGlobalMessage({\n        type: '',\n        title: '',\n        message: ''\n    }))\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const { actions: GlobalActions, reducer: GlobalReducer } = createSlice({\r\n  name: \"globalSlice\",\r\n  initialState: {\r\n    errors: null,\r\n    globalMessage: {\r\n      title: '',\r\n      type: '',\r\n      message: ''\r\n    },\r\n    settings: [],\r\n    snmpDeviceStatus: {}\r\n  },\r\n  reducers: {\r\n    setGlobalMessage: (state, { payload }) => {\r\n      const { type, title, message } = payload\r\n      state.globalMessage = { ...state.globalError, type, title, message }\r\n    },\r\n    setWebsiteSettings: (state, { payload }) => {\r\n      const { results } = payload\r\n      state.settings = results\r\n    },\r\n    setSnmpDeviceStatus: (state, { payload }) => {\r\n      state.snmpDeviceStatus = payload\r\n    }\r\n  },\r\n});\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport LocalStorageHelper from \"../utils/localStorageHelper\";\r\n\r\nexport const userKEY = \"currentUser\";\r\nexport const { actions: CurrentUserActions, reducer: CurrentUserReducer } = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: LocalStorageHelper.get(userKEY),\r\n    currentUser: null,\r\n  },\r\n  reducers: {\r\n    setUserState: (state, { payload }) => {\r\n      payload\r\n        ? LocalStorageHelper.store(userKEY, payload)\r\n        : LocalStorageHelper.delete(userKEY);\r\n      state.user = payload;\r\n\r\n      if (payload) {\r\n                // window.location = `/login?redirect=${encodeURIComponent(redirectURL)}`\r\n        window.location = '/'\r\n      }\r\n    },\r\n    setCurrentUser: (state, {payload}) => {\r\n      state.currentUser = payload\r\n    }\r\n  },\r\n});\r\n","import httpClient from \"../utils/httpClient\";\n\nconst loginUser = async (username, password) =>\n  await httpClient.post(\"/auth/login\", {\n    username,\n    password\n  });\n\nconst getCurrentUser = async () => await httpClient.get(\"/api/v1/me\");\n\nconst logOutUser = async () => await httpClient.get(\"/auth/logout\");\n\nconst getAllUsers = async (params = {}) =>\n  await httpClient.get(\"/api/v1/admin/users\", { params });\n\nconst rejectUser = async (id) => await httpClient.delete(`/api/v1/admin/users/${id}`);\nconst approveUser = async (id) => await httpClient.post(`/api/v1/admin/users/${id}`);\n\nconst blockUser = async (id) => await httpClient.patch(`/api/v1/admin/users/${id}/block`)\nconst unblockUser = async (id) => await httpClient.patch(`/api/v1/admin/users/${id}/unblock`)\n\nconst UserService = {\n  loginUser,\n  getCurrentUser,\n  logOutUser,\n  getAllUsers,\n  approveUser,\n  rejectUser,\n  blockUser,\n  unblockUser\n};\n\nexport default UserService;\n","import { Box } from \"adminlte-2-react\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport * as yup from \"yup\";\r\n\r\nconst loginSchema = yup.object().shape({\r\n  username: yup.string().required(),\r\n  password: yup.string().required(),\r\n});\r\n\r\nconst LoginForm = ({ triggerLogin = async () => { }, history, ...rest }) => {\r\n  const _history = useHistory()\r\n  const [formErrors, setFormErrors] = useState({})\r\n  return (\r\n    <div className=\"login-box\" style={{ border: 'solid 1px #eee', paddingTop: 50 }}>\r\n      <div className=\"login-logo\">\r\n        <a href=\"/\">\r\n          <b>TMCS</b>\r\n          login\r\n        </a>\r\n      </div>\r\n      <div className=\"login-box-body\">\r\n        <Box type=\"primary\" title=\"Login to continue\">\r\n\r\n          <Formik\r\n            initialValues={{\r\n              username: \"\",\r\n              password: \"\",\r\n            }}\r\n            onSubmit={async (values) => {\r\n              const data = await triggerLogin(values, history || _history)\r\n              if (data?.errors){\r\n                setFormErrors(data.errors);\r\n              }\r\n            }}\r\n            validationSchema={loginSchema}\r\n            initialErrors={formErrors}\r\n          >\r\n            {({ errors, touched }) => (\r\n              <Form>\r\n\r\n                <div className=\"card-body\">\r\n                  <div className=\"mb-2\">\r\n                    <label htmlFor=\"email\" className=\"form-label\">\r\n                      username\r\n                    </label>\r\n                    <Field\r\n                      type=\"text\"\r\n                      autoComplete=\"off\"\r\n                      className={\r\n                        errors.username && touched.username\r\n                          ? \"form-control shadow-none is-invalid\"\r\n                          : \"form-control shadow-none\"\r\n                      }\r\n                      placholder=\"Enter username\"\r\n                      name=\"username\"\r\n                      id=\"username\"\r\n                    />\r\n                    {errors.username && touched.username && (\r\n                      <div className=\"invalid-feedback\">{errors.username}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"mb-2\">\r\n                    <label htmlFor=\"password\" className=\"form-label\">\r\n                      Password\r\n                    </label>\r\n                    <Field\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      autoComplete=\"off\"\r\n                      className={\r\n                        errors.password && touched.password\r\n                          ? \"form-control shadow-none is-invalid\"\r\n                          : \"form-control shadow-none\"\r\n                      }\r\n                      placholder=\"Enter password\"\r\n                      id=\"password\"\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                      <div className=\"invalid-feedback\">{errors.password}</div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <hr />\r\n                <div className=\"card-footer text-center\">\r\n                  <div className=\"d-flex flex-row-reverse\">\r\n                    <button type=\"submit\" className=\"btn btn-block rounded-0  btn-primary\">\r\n                      Submit\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Box>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default LoginForm;\r\n","import { userKEY } from \"src/slices/currentUserSlice\"\nimport LocalStorageHelper from \"./localStorageHelper\"\n\nexport const pushQueryParams = (history, params = {}, append = true, replace = false) => {\n    const queryParams = parseQueryParams(history)\n    params = append ? { ...queryParams, ...params } : params\n    const finalParams = {}\n    Object.keys(params).forEach(p => {\n        if (typeof params[p] !== 'undefined' && params[p] !== 'undefined' && params[p] !== 'null' && params[p] !== null) {\n            finalParams[p] = params[p]\n        }\n    })\n    replace ? history.replace({\n        pathname: history.location.pathname,\n        search: (new URLSearchParams(finalParams)).toString()\n    }) : history.push({\n        pathname: history.location.pathname,\n        search: (new URLSearchParams(finalParams)).toString()\n    })\n}\n\nexport const parseQueryParams = (history, key = null, defaultVal = null) => {\n    const params = {}\n    const p = new URLSearchParams(history.location.search)\n    p.forEach((v, k) => {\n        params[k] = v\n    })\n    if (key != null) {\n        return params[key] || defaultVal\n    }\n    return params\n}\n\nexport const getCurrentStateParam = (history, param = 'id') => {\n    const state = (history.location.state || {})\n    if (state && state[param]) {\n        return state[param]\n    }\n    return null\n}\n\nexport const isCurrentRoute = (history, matchingRouteName) => {\n    console.log(history, matchingRouteName)\n    return false\n}\n\nexport const navigateToPath = (history, path, state = {}, clearPrevious = false) => {\n\n    let pathname = path\n\n    Object.keys(state).forEach(key => {\n        pathname = pathname.replace(`:${key}`, state[key])\n    })\n\n    if (clearPrevious) {\n        history.replace({\n            pathname,\n            state\n        })\n    } else {\n        history.push({\n            pathname,\n            state\n        })\n    }\n}\n\nexport const navigateToHome = (history) => {\n    const params = parseQueryParams(history)\n    const path = (params['redirect'] || '/').replace(`${window.location.protocol}://${window.location.host}`, '')\n    navigateToPath(history, path.substring())\n}\n\nexport const navigateToSubPath = (history, subPath, clearPrevious = false) => {\n    const pathname = history.location.pathname + subPath\n    navigateToPath(history, pathname, clearPrevious)\n}\n\n\nexport const navigateToLogin = (route = '/login') => {\n    LocalStorageHelper.delete(userKEY)\n    window.location = route\n}\n","export const LOCATION_LIST_PAGE = '/admin/locations'\nexport const RANK_LIST_PAGE = '/admin/ranks'\nexport const BRANCH_LIST_PAGE = '/admin/branches'\nexport const LOGOUT_ROUTE = '/logout'\nexport const REGISTRATION_LIST_PAGE = '/admin/registrations'\nexport const NMS_LIST_PAGE = '/admin/nms-devices'\nexport const USER_LIST_PAGE = '/admin/users'\nexport const DASHBOARD_ROUTE = \"/\";\nexport const DEVICE_MAMAGEMENT_ROUTE = \"/admin/manage-devices\";\nexport const ONLINE_USERS_ROUTE = \"/admin/online-users\";\nexport const SUPER_USER_LIST_PAGE = \"/admin/super-users\";\nexport const BACKUPS_LIST = \"/admin/db-backups\";\nexport const REPORTS_LIST_PAGE = \"/admin/reports\";\nexport const SETTINGS_PAGE = \"/admin/settings\";\nexport const CONTACT_PAGE = \"/admin/contact-us\";\n\nexport const NAV_ITEMS = [\n  {\n    icon: \"fa-tachometer-alt\",\n    title: \"Dashboard\",\n    path: DASHBOARD_ROUTE\n  },\n  {\n    icon: \"fa-globe\",\n    title: \"Manage Locations\",\n\n    path: LOCATION_LIST_PAGE,\n  },\n  {\n    icon: \"fa-sort-numeric-up\",\n    title: \"Manage Ranks\",\n    path: RANK_LIST_PAGE\n  },\n  {\n    icon: \"fa-building\",\n    title: \"Manage Branches\",\n    path: BRANCH_LIST_PAGE\n  },\n  {\n    icon: \"fa-tasks\",\n    title: \"Registration Requests\",\n    path: REGISTRATION_LIST_PAGE,\n  },\n  {\n    icon: \"fa-user\",\n    title: \"Manage Users\",\n    path: USER_LIST_PAGE,\n  },\n  {\n    icon: \"fa-users\",\n    title: \"Current Users\",\n    color: \"green\",\n\n    path: ONLINE_USERS_ROUTE,\n  },\n\n  {\n    icon: \"fa-laptop\",\n    title: \"NMS\",\n    path: NMS_LIST_PAGE,\n  },\n  {\n    icon: \"fa-download\",\n    title: \"Database Backups\",\n\n    path: BACKUPS_LIST,\n  },\n  {\n    icon: \"fa-tools\",\n    title: \"Device Management\",\n\n    path: DEVICE_MAMAGEMENT_ROUTE,\n  },\n  {\n    icon: \"fa-users\",\n    title: \"CTMS - User Accounts\",\n\n    path: SUPER_USER_LIST_PAGE,\n  },\n  {\n    icon: \"fa-chart-line\",\n    title: \"Reports\",\n    path: REPORTS_LIST_PAGE,\n  },\n  {\n    icon: \"fa-cog\",\n    title: \"Configuration\",\n    path: SETTINGS_PAGE\n  },\n  {\n    icon: \"fa-phone-alt\",\n    title: \"Contact us\",\n    path: CONTACT_PAGE,\n  }\n];\n\nexport const USER_STATUSES = {\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  PENDING: 'PENDING',\n  DISABLED: 'DISABLED',\n  ACTIVE: 'ACTIVE'\n}\n\nexport const USER_ROLES = {\n  SUPERADMIN: 'SUPERADMIN',\n  ADMIN: 'ADMIN',\n  USER: 'USER',\n}\n\nexport const SETTINGS_CONFIG  = {\n  LANDLINE_SALES: 'landline_sales',\n  EMAIL_SALES: 'email_sales',\n  LANDLINE_SUPPORT: 'landline_support',\n  EMAIL_SUPPORT: 'email_support',\n  LOGO: 'logo',\n  SNMP_CHECK_INTERVAL: 'snmp_check_interval'\n}","import { Button } from \"adminlte-2-react\";\nimport React from \"react\";\n\nconst Dialog = ({\n  children = \"\",\n  title = \"Dialog\",\n  exists = true,\n  show = true,\n  showHeader = true,\n  acceptText = null,\n  cancelText = null,\n  canDismiss = true,\n  size = \"xl\",\n  bodyPadding = 2,\n  zIndex = 1050,\n  cancelDisabled = false,\n  successDisabled = false,\n  onSuccess = () => { },\n  onCancel = () => { },\n  onDismiss = () => { },\n}) => {\n  return (\n    exists && (\n      <div\n        className={show ? 'modal fade in': 'modal fade'}\n        tabIndex=\"-1\"\n        aria-hidden={show}\n        style={{ display: show ? \"block\" : \"none\", zIndex, overflow: 'auto' }}\n      >\n        <div className={`modal-dialog modal-${size}`}>\n          <div className=\"modal-content\">\n            {showHeader && (\n              <div className=\"modal-header\">\n                <h4 className=\"modal-title\">{title}\n                  {canDismiss && (\n                    <Button\n                      type=\"button\"\n                      className=\"close\"\n                      aria-label=\"Close\"\n                      onClick={onDismiss}\n                      icon=\"fa-times\"\n                    />\n                  )}\n                </h4>\n              </div>\n            )}\n            <div className={`modal-body p-${bodyPadding}`}>\n              {children}\n            </div>\n            {(cancelText || acceptText) && (\n              <div className=\"modal-footer\">\n                {cancelText && (\n                  <button\n                    disabled={cancelDisabled}\n                    className=\"btn rounded-0  btn-default\"\n                    onClick={onCancel}\n                  >\n                    {cancelText}\n                  </button>\n                )}\n                {acceptText && (\n                  <button\n                    disabled={successDisabled}\n                    className=\"btn rounded-0  btn-primary\"\n                    onClick={onSuccess}\n                  >\n                    {acceptText}\n                  </button>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default Dialog;\n","import { Col, Row, Button, ButtonGroup } from \"adminlte-2-react\";\nimport * as yup from \"yup\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport overlayFactory from 'react-bootstrap-table2-overlay';\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\nimport LoadingOverlay from \"react-loading-overlay\"\nimport Dialog from \"./Dialog\";\nimport EntityForm from \"./EntityForm\";\nimport { showGlobalModalNotification } from \"src/utils/storeHelper\";\nimport httpClient from \"src/utils/httpClient\";\nLoadingOverlay.propTypes = undefined\n\nconst MODE_EDIT = 'edit';\nconst MODE_ADD = 'add';\n\nconst DataGridComponent = ({\n    modalSize = 'xl',\n    keyField = \"id\",\n    entitySingle = 'record',\n    entityPlural = 'records',\n    columns = [],\n    hideIdOnEdit = false,\n    data = {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        limit: 100,\n        totalPages: 1,\n    },\n    remote = {\n        sort: true,\n        filter: true,\n        pagination: true,\n    },\n    defaultSorted = [\n        { dataField: 'id', order: 'asc' }\n    ],\n    showTotal = true,\n    beforeSave = (values) => { return values },\n    onTableChange = async (params) => { },\n    onDataUpdated = async (tableData) => { },\n    onDelete = (id) => { },\n    canAdd = true,\n    canDelete = true,\n    canEdit = true,\n    rowActionButtons = [],\n    globalActionButtons = [],\n    formOptions = {\n        fields: [],\n        validationSchema: null,\n        onSuccess: async (data) => { },\n    },\n    resource = null,\n    onFormShow = (row, mode) => {\n\n    },\n    actionColumnWidth = 200,\n    filterComponents = [],\n    ...rest\n}) => {\n    const [formErrors, setFormErrors] = useState({})\n    const [record, setCurrentRecord] = useState(null)\n    const [showFormDialog, setShowFormDialog] = useState(false)\n    const [selectedIds, setSelectedIds] = useState([])\n    const [loading, setLoading] = useState(false)\n    const [records, setRecords] = useState(data)\n    const fetchTableData = useCallback(async () => {\n        setFormErrors({})\n        if (resource) {\n            const params = parseQueryParams(rest.history)\n            const result = await httpClient.get(`${resource}`, { params })\n            if (result?.success) {\n                setRecords({\n                    results: result.data?.results || [],\n                    currentPage: result.data?.currentPage || 1,\n                    totalResults: result.data.totalResults || 0,\n                    limit: result.data?.limit || 100,\n                    totalPages: result.data?.totalPages || 1\n                })\n            } else {\n                setRecords({ ...data, results: [], totalResults: 0, limit: 100 })\n            }\n        }\n    }, [resource, data, rest.history])\n\n    const columnsWithActions = useMemo(() => {\n        const clms = columns.filter(clm => clm.dataField !== '_actions')\n        if (!(canEdit || canDelete || rowActionButtons.length > 0)) {\n            return clms;\n        }\n        clms.push({\n            dataField: '_actions',\n            isDummyField: true,\n            style: {\n                width: actionColumnWidth || 200,\n            },\n            text: 'Actions',\n            formatter: (cellContent, row) => {\n                return (\n                    <ButtonGroup>\n                        {rowActionButtons.map(actionButton => {\n                            actionButton.canShow = actionButton.canShow ? actionButton.canShow : () => true\n                            if (actionButton.canShow && actionButton.canShow(row)) {\n                                return <Button key={`action-${row.id}-${actionButton.text}`} className=\"mr-2\"\n                                    type={actionButton?.type || 'primary'}\n                                    icon={actionButton?.icon || 'gear'}\n                                    text={actionButton.text}\n                                    onClick={async () => {\n                                        await actionButton.onClick(row.id, row)\n                                        fetchTableData()\n                                    }}\n                                />\n                            }\n\n                        })}\n                        {canEdit && <Button className=\"mr-2\" type=\"primary\" text=\"Edit\" icon=\"fa-edit\" onClick={() => {\n                            pushQueryParams(rest.history, { id: row.id, mode: MODE_EDIT }, true)\n                            setCurrentRecord(row);\n                            setShowFormDialog(true)\n                            setFormErrors({})\n                        }} />}\n                        {canDelete && <Button className=\"mr-2\" type=\"danger\" onClick={async () => {\n                            if (resource) {\n                                const data = await httpClient.delete(`${resource}/${row.id}`)\n                                if (data?.success) {\n                                    showGlobalModalNotification({\n                                        success: true,\n                                        message: `${entitySingle} successfully deleted.`\n                                    })\n                                } else {\n                                    setFormErrors(data?.errors ?? {})\n                                }\n                            } else {\n                                await onDelete(row.id);\n                            }\n                            fetchTableData()\n                        }} text=\"Delete\" icon=\"fa-trash\" />\n                        }\n\n                    </ButtonGroup>\n                )\n            },\n        })\n        return clms\n    }, [columns, canDelete, canAdd, onDelete, rowActionButtons, rest.history])\n\n    const validationSchemaDynamic = useMemo(() => {\n        return formOptions.validationSchema || yup.object().shape({})\n    }, [formOptions.validationSchema]);\n\n    const fieldsDyanmic = useMemo(() => {\n        return formOptions.fields;\n    }, [formOptions.fields]);\n\n    const initialValues = useMemo(() => {\n        const values = {}\n        fieldsDyanmic.forEach(field => {\n            values[field.recordKey || field.name] = record ? (record[field.recordKey] || record[field.name] || field.default) || '' : (field.default || '')\n        })\n        values['id'] = record ? record.id : null\n        return values;\n    }, [record, fieldsDyanmic]);\n\n    const triggerSetCurrentRecord = () => {\n        const params = parseQueryParams(rest.history)\n        const mode = params['mode'] || ''\n        const id = params['id'] || null\n        const isAddEdit = mode === MODE_ADD || mode === MODE_EDIT\n        const currentRecord = (records.results || []).find(r => `${r.id}` === id)\n        setCurrentRecord(currentRecord)\n        setShowFormDialog(isAddEdit)\n    }\n\n    useEffect(() => {\n        fetchTableData();\n        triggerSetCurrentRecord();\n        const unlisten = rest.history.listen((...args) => {\n            fetchTableData()\n        })\n        return unlisten\n    }, [])\n\n    useEffect(() => {\n        triggerSetCurrentRecord();\n        onDataUpdated(records);\n    }, [showFormDialog, records])\n\n    useEffect(() => {\n        onFormShow(record, parseQueryParams(rest.history, 'mode'))\n    }, [record, rest.history])\n\n    return (\n        <React.Fragment>\n            {(canAdd || canEdit) && <Dialog size={modalSize} show={showFormDialog}\n                showHeader={true}\n                title={`${record ? `Editing ${entitySingle} ${!hideIdOnEdit ? `#${record.id}` : ''}` : `Adding ${entitySingle}`}`}\n                onDismiss={() => {\n                    setShowFormDialog(false)\n                    pushQueryParams(rest.history, { mode: null, id: null }, true, true)\n                }}>\n                <EntityForm\n                    entityPlural={entityPlural}\n                    entitySingle={entitySingle}\n                    formErrors={formErrors}\n                    fields={fieldsDyanmic}\n                    initialValues={initialValues}\n                    editMode={record ? true : false}\n                    onSubmit={async (values, { resetForm }) => {\n                        window.scrollTo(0, 0);\n                        values = beforeSave(values)\n                        let data\n                        if (resource) {\n                            data = values?.id ? await httpClient.put(`${resource}/${values.id}`, values) : await httpClient.post(resource, values)\n                        } else {\n                            data = await formOptions.onSuccess(values)\n                        }\n\n                        if (data?.success) {\n                            resetForm();\n                            setCurrentRecord(null);\n                            setShowFormDialog(false);\n                            pushQueryParams(rest.history, { mode: null, id: null }, true, true)\n                            onTableChange(parseQueryParams(rest.history))\n                            fetchTableData();\n                            showGlobalModalNotification({\n                                success: true,\n                                message: `${entitySingle} successfully ${values?.id ? 'updated' : 'created'}`\n                            })\n                        } else {\n                            setFormErrors(data?.errors ?? {})\n                        }\n\n                    }}\n                />\n            </Dialog>\n            }\n            <ToolkitProvider\n                keyField={keyField}\n                data={records.results || []}\n                columns={columnsWithActions}\n            >\n                {\n                    props => (\n                        <div>\n                            <br />\n                            <Row className=\"text-left\">\n                                <Col md={12}>\n                                    {filterComponents.map(e => e)}\n                                </Col>\n                                <Col md={12} className=\"text-right\">\n                                    <Button onClick={async () => {\n                                        setLoading(true)\n                                        fetchTableData()\n                                        await onTableChange(parseQueryParams(rest.history))\n                                        setLoading(false)\n                                    }} className=\"mr-2\" type=\"primary\" disabled={loading} text={loading ? \"Loading...\" : \"Refresh\"} icon=\"fa-redo\" />\n                                    {canAdd &&\n                                        <Button className=\"mr-2\" onClick={() => {\n                                            pushQueryParams(rest.history, { mode: MODE_ADD, id: undefined }, true)\n                                            setShowFormDialog(true)\n                                            setCurrentRecord(null);\n                                        }} type=\"success\" text={`Add ${entitySingle}`} icon=\"fa-plus-circle\" />\n                                    }\n                                    {globalActionButtons.map(actionButton => {\n                                        return <Button className=\"mr-2\"\n                                            type={actionButton.type}\n                                            icon={actionButton.icon}\n                                            text={actionButton.text}\n                                            onClick={async () => {\n                                                await actionButton.onClick(selectedIds)\n                                                fetchTableData();\n                                            }}\n                                        />\n                                    })}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <hr />\n                                </Col>\n                            </Row>\n                            <BootstrapTable\n                                {...props.baseProps}\n                                remote={remote}\n                                defaultSorted={defaultSorted}\n                                \n                                pagination={records.totalPages > 1 ? paginationFactory({\n                                    page: records.currentPage || 1,\n                                    sizePerPage: records.limit || 100,\n                                    totalSize: records.totalResults || records.results.length || 0,\n                                    sizePerPageList: [100, 200, 500],\n                                    paginationSize: records.totalResults || records.results.length || 0,\n                                    showTotal,\n                                }): null}\n                                loading={loading}\n                                onTableChange={async (type, _data) => {\n                                    const params = {\n                                        sortOrder: _data['sortOrder'],\n                                        sortBy: _data['sortField'],\n                                        page: _data['page'],\n                                        limit: _data['sizePerPage'],\n                                    }\n                                    pushQueryParams(rest.history, params)\n                                    fetchTableData();\n                                    setLoading(true)\n                                    await onTableChange(params)\n                                    setLoading(false)\n                                }}\n                                striped={true}\n                                selectRow={(globalActionButtons.length || canEdit || canDelete) ? {\n                                    mode: 'checkbox',\n                                    bgColor: '#eee',\n                                    selectColumnStyle: () => {\n                                        return {\n                                            width: 20\n                                        }\n                                    },\n                                    onSelectAll: (isSelected) => {\n                                        const selections = []\n                                        if (isSelected) {\n                                            (data.results || []).forEach(r => {\n                                                selections.push(selections)\n                                            })\n                                        }\n                                        setSelectedIds(selections)\n                                    },\n                                    onSelect: (row, isSelected) => {\n                                        const selections = selectedIds.filter(id => row.id !== id)\n                                        if (isSelected) {\n                                            selections.push(row.id)\n                                        }\n                                        setSelectedIds(selections)\n                                    }\n                                } : {\n                                    mode:'ROW_SELECT_DISABLED',\n                                    hideSelectColumn: true\n                                }}\n                                overlay={overlayFactory({\n                                    spinner: true,\n                                    styles: {\n                                        overlay: (base) => ({ ...base, background: 'rgba(0, 0, 0, 0.5)', position: 'absolute' })\n                                    }\n                                })}\n                                noDataIndication={() => <h5 className=\"text-center\">Sorry no {entityPlural} currently availble</h5>} />\n                        </div>\n                    )\n                }\n            </ToolkitProvider>\n        </React.Fragment>\n\n    )\n}\n\nexport default DataGridComponent;","import * as yup from \"yup\";\nimport { BranchActions } from \"src/slices/BranchSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\n\nconst BranchListView = ({\n  title = 'Branches',\n  description = 'here you can manage branches',\n  ...rest\n}) => {\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Branch\"}>\n      <Box type=\"primary\" title=\"Displaying branches\" icon=\"fa-building\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Branches\"\n              entitySingle=\"Branch\"\n              resource={`/api/v1/admin/branches`}\n              onDataUpdated={async (tableData) => {\n                BranchActions.setBranches(tableData)\n              }}\n              defaultSorted={\n                [{ dataField: 'id', order: 'asc' }]\n              }\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Branch ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'description',\n                  text: 'Description',\n                  sort: true,\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    {\n                      id: \"description\",\n                      name: \"description\",\n                      label: \"Branch Description\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    description: yup.string(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default BranchListView;\n","import * as yup from \"yup\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { LocationActions } from \"src/slices/LocationSlice\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\n\nconst LocationListView = ({\n  ...rest\n}) => {\n\n  const joinChar = ' » ';\n\n  const [level, setLevel] = useState(0)\n  const [segments, setSegments] = useState([])\n\n  const rowActionButtons = useMemo(() => {\n    if (level > 1) {\n      return []\n    }\n    return [{\n      icon: 'fa-link',\n      type: 'primary',\n      text: 'Sublocations',\n      onClick: (id, row) => {\n        const _level = level + 1\n        const _segments = [...segments, row.title]\n        setSegments(_segments)\n        setLevel(_level)\n        pushQueryParams(rest.history, { level: _level, locationId: id, segments: _segments.join(',') })\n      }\n    }]\n  }, [level, segments, rest.history])\n\n  useEffect(() => {\n    const _handler = () => {\n      const params = parseQueryParams(rest.history)\n      const segments = (params['segments'] || '').split(',').filter(segment => !!segment)\n      setLevel(parseInt(params['level'] || 0))\n      setSegments(segments)\n    }\n    _handler();\n    const unlisten = rest.history.listen(_handler)\n    return unlisten\n  }, [rest.history])\n\n  return (\n    <Content title={['Manage Locations'].concat(segments).join(joinChar)} subTitle={['here you can manage locations'].concat(segments).join(joinChar)} browserTitle={segments.join(joinChar)}>\n      <Box type=\"primary\" title={['Displaying locations'].concat(segments).join(joinChar)} icon=\"fa-globe\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              actionColumnWidth={320}\n              entityPlural={['Locations'].concat(segments).join(joinChar)}\n              entitySingle={['Location'].concat(segments).join(joinChar)}\n              resource={`/api/v1/admin/locations`}\n              onDataUpdated={async (tableData) => LocationActions.setLocations(tableData)}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Location ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'email',\n                  text: 'Email',\n                  sort: true,\n                }\n              ]}\n              rowActionButtons={rowActionButtons}\n              beforeSave={(values) => {\n                const params = parseQueryParams(rest.history)\n                values['locationId'] = params['locationId'] || null\n                return values\n              }}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    \n                    {\n                      id: \"email\",\n                      name: \"email\",\n                      label: \"Location Email\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    email: yup.string().email(),\n                    description: yup.string(),\n                  })\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default LocationListView;\n","import * as yup from \"yup\";\n\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { RankActions } from \"src/slices/RankSlice\";\n\nconst RankListView = ({\n  title = 'Ranks',\n  description = 'here you can manage ranks',\n  ...rest\n}) => {\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Rank\"}>\n      <Box type=\"primary\" title=\"Displaying ranks\" icon=\"fa-sort-numeric-up\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Ranks\"\n              entitySingle=\"Rank\"\n              defaultSorted={\n                [{ dataField: 'id', order: 'asc' }]\n              }\n              resource={`/api/v1/admin/ranks`}\n              onDataUpdated={async(tableData) => {\n                RankActions.setRanks(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Rank ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'description',\n                  text: 'Description',\n                  sort: true,\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    {\n                      id: \"description\",\n                      name: \"description\",\n                      label: \"Rank Description\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    description: yup.string(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\nexport default RankListView;\n","import httpClient from \"src/utils/httpClient\";\n\nconst rejectRegistration = async (id) => await httpClient.delete(`/api/v1/admin/registrations/${id}`);\nconst approveRegistration = async (id) => await httpClient.post(`/api/v1/admin/registrations/${id}`);\n\nconst RegistrationService = {\n  rejectRegistration,\n  approveRegistration,\n};\n\nexport default RegistrationService;\n","import { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport RegistrationService from \"src/services/RegistrationService\";\n\nconst STATUSES = {\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  PENDING: 'PENDING'\n}\n\nconst RegistrationListView = ({\n  title = 'Registrations',\n  description = 'here you can manage registrations',\n  ...rest\n}) => {\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Registration\"}>\n      <Box type=\"primary\" title=\"Displaying registrations\" icon=\"fa-user\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              actionColumnWidth={300}\n              entitySingle=\"Registration\"\n              entityPlural=\"Registrations\"\n              resource={`/api/v1/admin/registrations`}\n              rowActionButtons={[\n                {\n                  text: 'Approve',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === STATUSES.PENDING\n                  },\n                  onClick: async (id) => {\n                    await RegistrationService.approveRegistration(id)\n                  }\n                },\n                {\n                  text: 'Reject',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === STATUSES.PENDING\n                  },\n                  onClick: async (id) => {\n                    await RegistrationService.rejectRegistration(id)\n                  }\n                }\n              ]}\n              canAdd={false}\n              canEdit={false}\n              canDelete={false}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Registration ID',\n                  hidden: true,\n                }, {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'First Name',\n                  sort: true,\n\n                },\n                {\n                  dataField: 'middlename',\n                  text: 'Middle Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'lastName',\n                  text: 'Last Name',\n                  sort: true,\n                },\n\n                {\n                  dataField: 'ip',\n                  text: 'IP',\n                },\n                {\n                  dataField: 'port',\n                  text: 'Port',\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\n\nexport default RegistrationListView;\n","const { default: httpClient } = require(\"src/utils/httpClient\");\n\nconst getLocationList = async () => {\n    const data = await httpClient.get(\"/api/v1/locations\");\n    const locations = data?.success ? data.data : []\n    return locations\n}\n\nconst getBranchesList = async () => {\n    const data = await httpClient.get(\"/api/v1/branches\");\n    return data?.success ? data.data : []\n}\n\n\nconst getRanksList = async () => {\n    const data = await httpClient.get(\"/api/v1/ranks\");\n    return data?.success ? data.data : []\n}\n\n\nconst createDatabaseBackup = async () => await httpClient.post(`/api/v1/admin/db-backups`)\nconst getDashboardSummary = async () => await httpClient.get(`/api/v1/admin/dashboard`)\nconst getNmsDevicesStatus = async () => await httpClient.get(`/api/v1/admin/nms-devices/status`)\n\nconst CommonServerice = {\n    getLocationList,\n    getBranchesList,\n    getRanksList,\n    createDatabaseBackup,\n    getDashboardSummary,\n    getNmsDevicesStatus\n}\nexport default CommonServerice\n","import * as yup from \"yup\";\n\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport CommonService from \"src/services/CommonService\";\nimport UserService from \"src/services/UserService\";\nimport { USER_STATUSES } from \"src/constants/global\";\n\nconst UserListView = ({\n  title = 'Users',\n  description = 'here you can manage users',\n  ...rest\n}) => {\n\n  const [locations, setLocations] = useState([])\n  const [branches, setBranches] = useState([])\n  const [ranks, setRanks] = useState([])\n  const [record, setRecord] = useState(null)\n  const [mode, setMode] = useState(null)\n  console.log(mode);\n\n  useEffect(() => {\n    (async () => {\n      setLocations(await CommonService.getLocationList())\n      setBranches(await CommonService.getBranchesList())\n      setRanks(await CommonService.getRanksList())\n    })();\n  }, [])\n\n  const fields = useMemo(() => {\n    const _fields = [\n      {\n        id: \"username\",\n        name: \"username\",\n        label: \"Username *\",\n        placeholder: \"Enter Username\",\n        type: \"text\",\n        cols: 6,\n      },\n      {\n        id: \"password\",\n        name: \"password\",\n        label: \"Password *\",\n        type: \"password\",\n        cols: 6,\n      },\n      {\n        id: \"firstName\",\n        name: \"firstName\",\n        label: \"First Name *\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"middleName\",\n        name: \"middleName\",\n        label: \"Middle Name\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"lastName\",\n        name: \"lastName\",\n        label: \"Last Name\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"locationId\",\n        name: \"locationId\",\n        label: \"Location *\",\n        type: \"select\",\n        options: locations.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"branchId\",\n        name: \"branchId\",\n        label: \"Branch *\",\n        type: \"select\",\n        options: branches.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"rankId\",\n        name: \"rankId\",\n        label: \"Rank *\",\n        type: \"select\",\n        options: ranks.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"ip\",\n        name: \"ip\",\n        label: \"IP\",\n        type: \"text\",\n        cols: 10,\n      },\n      {\n        id: \"port\",\n        name: \"port\",\n        label: \"Port\",\n        type: \"text\",\n        cols: 2,\n      },\n      {\n        id: \"addressLine1\",\n        name: \"addressLine1\",\n        label: \"Address Line 1\",\n        type: \"textarea\",\n        cols: 6,\n      },\n      {\n        id: \"addressLine2\",\n        name: \"addressLine2\",\n        label: \"Address Line 2\",\n        type: \"textarea\",\n        cols: 6,\n      },\n    ]\n    if (record && record?.id) {\n     // return _fields.filter(field => !['password', 'username'].includes(field.name))\n    }\n    return _fields\n  }, [locations, ranks, branches, record])\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Users\"}>\n      <Box type=\"primary\" title=\"Displaying users\" icon=\"fa-user\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              actionColumnWidth={300}\n              {...rest}\n              rowActionButtons={[\n                {\n                  text: 'Block',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.ACTIVE\n                  },\n                  onClick: async (id) => {\n                    await UserService.blockUser(id)\n                  }\n                },\n                {\n                  text: 'Unblock',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.DISABLED\n                  },\n                  onClick: async (id) => {\n                    await UserService.unblockUser(id)\n                  }\n                }\n              ]}\n              entitySingle=\"User\"\n              entityPlural=\"Users\"\n              resource={`/api/v1/admin/users`}\n              onFormShow={(row, mode) => {\n                setRecord(row)\n                setMode(mode)\n              }}\n              formOptions={\n                {\n                  fields,\n                  validationSchema: yup.object().shape({\n                    username: yup.string().required(),\n                    firstName: yup.string().required(),\n                    password: yup.string().required(),\n                    locationId: yup.string().required(),\n                    branchId: yup.string().required(),\n                    rankId: yup.string().required(),\n                  }),\n                }\n              }\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'User ID',\n                  hidden: true,\n                }, {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'branchId',\n                  text: 'Branch',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return branches.find(b => `${b.id}` === `${row.branchId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'rankId',\n                  text: 'Rank',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return ranks.find(r => `${r.id}` === `${row.rankId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'locationId',\n                  text: 'Location',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return locations.find(l => `${l.id}` === `${row.locationId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n                {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    return [row.ip, row.port].filter(x => !!x).join(\":\")\n                  }\n\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default UserListView;\n","import { Box, Col, Content, Infobox2, Row } from \"adminlte-2-react\";\nimport React, { useEffect, useState } from \"react\";\nimport CommonService from \"src/services/CommonService\";\n\n\nimport {\n  REGISTRATION_LIST_PAGE,\n  USER_LIST_PAGE,\n  NMS_LIST_PAGE,\n  DEVICE_MAMAGEMENT_ROUTE,\n  SUPER_USER_LIST_PAGE,\n  ONLINE_USERS_ROUTE} from \"src/constants/global\";\n\nconst DashboardView = ({\n  title = \"System Overview\",\n  description,\n  ...rest\n}) => {\n\n  const NAVIGATION_CARDS = {\n    totalUsers: { text: \"Total Users\", icon: \"fa-users\", to: USER_LIST_PAGE, color: 'orange' },\n    totalOnlineUsers: { text: \"Total Online Users\", icon: \"fa-users\", to: ONLINE_USERS_ROUTE, color: 'teal' },\n    totalSuperUsers: { text: \"Total Super Users\", icon: \"fa-users\", to: SUPER_USER_LIST_PAGE, color: 'purple' },\n    totalNmsDevices: { text: \"Total Nms Monitored Devices\", icon: \"fa-laptop\", to: NMS_LIST_PAGE, color: 'purple' },\n    totalDevices: { text: \"Total devices in directory\", icon: \"fa-laptop\", to: DEVICE_MAMAGEMENT_ROUTE, color: 'orange' },\n    totalPendingRequests: { text: \"Pending registration requests\", icon: \"fa-tasks\", to: REGISTRATION_LIST_PAGE, color: 'teal' }\n  }\n\n  const [summary, setSummary] = useState({\n    totalUsers: 0,\n    totalOnlineUsers: 0,\n    totalSuperUsers: 0,\n    totalNmsDevices: 0,\n    totalDevices: 0,\n    totalPendingRequests: 0\n  })\n\n  useEffect(() => {\n    (async () => {\n      const data = await CommonService.getDashboardSummary()\n      data?.data && setSummary(data.data)\n    })()\n  }, [])\n\n  return (\n\n    <Content title={[title]} subTitle={description} browserTitle={title}>\n        <Row>\n          {Object.keys(NAVIGATION_CARDS).map((key) => {\n            const card = NAVIGATION_CARDS[key]\n            return (\n              <Col key={key} md={4}>\n                <Box color={card.color} type=\"success\" icon={card.icon}>\n                  <Infobox2 title={summary[key] || 0} {...card} />\n                </Box>\n              </Col>\n            );\n          })}\n        </Row>\n    </Content>\n  );\n};\n\n\nexport default DashboardView","import { Callout } from \"adminlte-2-react\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { dismissGlobalError } from \"src/utils/storeHelper\";\nimport Dialog from \"./Dialog\";\n\nconst GlobalToast = ({\n    globalMessage = {}\n}) => {\n    if (!globalMessage || !globalMessage.message) {\n        return <React.Fragment />\n    }\n    return (\n        <Dialog\n            canDismiss={true}\n            title={''}\n            size='xl'\n            show={globalMessage.message}\n            zIndex={9999}\n            onDismiss={() => {\n                dismissGlobalError();\n            }}>\n            <Callout className=\"rounded-0\" title={globalMessage.title}\n                type={globalMessage.type}>{globalMessage.message}</Callout>\n        </Dialog>\n    )\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        globalMessage: state.globalState?.globalMessage || {}\n    };\n};\n\n\nexport default connect(mapStateToProps, null)(GlobalToast);\n","import * as yup from \"yup\";\nimport { NmsDeviceActions } from \"src/slices/NmsDeviceSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useEffect, useState } from \"react\";\nimport CommonServerice from \"src/services/CommonService\";\nimport { connect } from \"react-redux\";\nimport { SETTINGS_CONFIG } from \"src/constants/global\";\n\nconst NmsDeviceListView = ({\n  title = 'Manage NMS Devices',\n  description = 'here you can manage devices',\n  settings = [],\n  ...rest\n}) => {\n  const [deviceStatus, setDeviceStatus] = useState({})\n  const [checkInterval, setCheckInterval] = useState(5000)\n\n  useEffect(() => {\n    const interval = settings.find(s => s.name === SETTINGS_CONFIG.SNMP_CHECK_INTERVAL)?.value || 5\n    setCheckInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const data = await CommonServerice.getNmsDevicesStatus()\n      data?.success && setDeviceStatus(data.data)\n    }, checkInterval * 1000)\n    return () => clearInterval(interval)\n  }, [checkInterval])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={title}>\n      <Box type=\"primary\" title=\"Displaying devices\" icon=\"fa-laptop\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Devices\"\n              entitySingle=\"Device\"\n              resource={`/api/v1/admin/nms-devices`}\n              onDataUpdated={async (tableData) => {\n                NmsDeviceActions.setNmsDevices(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Device ID',\n                  hidden: true,\n                }, {\n                  dataField: 'name',\n                  text: 'Name',\n                  sort: true,\n                }, {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    let address = 'http://'+ row['ip'] + (row['port'] ? `:${row['port']}`: '') \n                    return <a href={address}>{address}</a>\n                  }\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  formatter: (c, row) => {\n                    return deviceStatus[row.ip]?.isOnline ? <strong style={{color: '#0f0'}}>Online</strong>: <strong style={{color: '#f00'}}>Offline</strong>\n                  }\n                },\n                {\n                  dataField: 'sysName',\n                  text: 'Device System Name',\n                  width:100,\n                  formatter: (c, row) => {\n                    const str = deviceStatus[row.ip]?.systemName\n                    try{\n                      return atob(str).split(\",\").join(\"\\n\")\n                    }catch(e){\n                      return \"Unknown\"\n                    }\n                  }\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"ip\",\n                      name: \"ip\",\n                      label: \"IP\",\n                      type: \"text\",\n                      cols: 10,\n                    },\n                    {\n                      id: \"port\",\n                      name: \"port\",\n                      label: \"Port\",\n                      type: \"text\",\n                      cols: 2,\n                    },\n                    {\n                      id: \"name\",\n                      name: \"name\",\n                      label: \"Device Name\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    ip: yup.string().required(),\n                    name: yup.string().required(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    settings: state.globalState?.settings || []\n  };\n};\n\nexport default connect(mapStateToProps, null)(NmsDeviceListView);\n","import React, { useMemo } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport CommonServerice from \"src/services/CommonService\";\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\n\nconst { default: EntityForm } = require(\"../EntityForm\")\n\nconst LocationFilter = ({\n    label = \"Filter by location\",\n    cols = 12,\n    ...rest\n}) => {\n    const [locations, setLocations] = useState([])\n    const [locationId, setLocationId] = useState(null)\n\n    const getFilterValue = () => {\n        return parseQueryParams(rest.history, 'locationId', null)\n    }\n\n    useEffect(() => {\n        (async () => {\n            setLocations(await CommonServerice.getLocationList())\n        })();\n        setLocationId(getFilterValue())\n    }, [])\n\n    useEffect(() => {\n        const unlisten = rest.history.listen((...args) => {\n            setLocationId(getFilterValue())\n        })\n        return unlisten\n    }, [])\n\n    const initialValues = useMemo(() => {\n        return { locationId: locationId || \"\" }\n    }, [locationId])\n\n    return (\n        <EntityForm\n            hideSubmit={true}\n            initialValues={initialValues}\n            fields={[\n                {\n                    id: 'locationId',\n                    name: 'locationId',\n                    label,\n                    type: 'select',\n                    cols,\n                    hideLabel: false,\n                    onChange: (e) => {\n                        const value = e.nativeEvent.target.value\n                        pushQueryParams(rest.history, {\n                            locationId: value || null\n                        }, true)\n                    },\n                    options: locations.map(l => {\n                        return {\n                            key: l.id,\n                            value: l.title\n                        }\n                    })\n                }\n            ]}\n        />\n    )\n}\n\nexport default LocationFilter","import * as yup from \"yup\";\nimport { DeviceActions } from \"src/slices/DeviceSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport CommonService from \"src/services/CommonService\";\nimport { useEffect, useState } from \"react\";\nimport LocationFilter from \"src/components/filters/LocationFilter\";\n\nconst DeviceListView = ({\n  title = 'Manage Devices',\n  description = 'here you can manage devices directory',\n  ...rest\n}) => {\n\n  const [locations, setLocations] = useState([])\n  useEffect(() => {\n    (async () => {\n      setLocations(await CommonService.getLocationList())\n    })();\n  }, [])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={title}>\n      <Box type=\"primary\" title=\"Displaying devices\" icon=\"fa-tools\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Devices\"\n              entitySingle=\"Device\"\n              resource={`/api/v1/admin/devices`}\n              filterComponents={[<LocationFilter history={rest.history} key={'location_filter'} />]}\n              onDataUpdated={async (tableData) => {\n                DeviceActions.setDevices(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Device ID',\n                  hidden: true,\n                },{\n                  dataField: 'name',\n                  text: 'Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'locationId',\n                  text: 'Location',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return locations.find(l => `${l.id}` === `${row.locationId}`)?.title || '-'\n                  }\n                },\n                 {\n                  dataField: 'ip',\n                  text: 'IP',\n                  sort: true,\n                  formatter: (c, row) => {\n                    let address = 'http://'+ row['ip'] + (row['port'] ? `:${row['port']}`: '') \n                    return <a href={address}>{address}</a>\n                  }\n                },\n\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"ip\",\n                      name: \"ip\",\n                      label: \"IP\",\n                      type: \"text\",\n                      cols: 10,\n                    },\n                    {\n                      id: \"port\",\n                      name: \"port\",\n                      label: \"Port\",\n                      type: \"text\",\n                      cols: 2,\n                    },\n                    {\n                      id: \"name\",\n                      name: \"name\",\n                      label: \"Device Name\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    {\n                      id: \"locationId\",\n                      name: \"locationId\",\n                      label: \"Location *\",\n                      type: \"select\",\n                      options: locations.map(l => {\n                        return {\n                          key: l.id,\n                          value: l.title\n                        }\n                      }),\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    ip: yup.string().required(),\n                    name: yup.string().required(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default DeviceListView;\n","import { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useMemo } from \"react\";\nimport UserService from \"src/services/UserService\";\nimport { USER_ROLES, USER_STATUSES } from \"src/constants/global\";\n\nconst AdminListView = ({\n  title = 'Super Users',\n  description = 'here you can manage super users',\n  ...rest\n}) => {\n\n  const fields = useMemo(() => {\n    const _fields = [\n      {\n        id: \"username\",\n        name: \"username\",\n        label: \"Username *\",\n        placeholder: \"Enter Username\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"password\",\n        name: \"password\",\n        label: \"Password *\",\n        type: \"password\",\n        cols: 4,\n      },\n      {\n        id: \"role\",\n        name: \"role\",\n        label: \"Role *\",\n        type: \"select\",\n        cols: 4,\n        options: [USER_ROLES.ADMIN, USER_ROLES.SUPERADMIN].map(role => {\n          return {\n            key: role,\n            value: role\n          }\n        })\n      },\n      {\n        id: \"firstName\",\n        name: \"firstName\",\n        label: \"First Name *\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"middleName\",\n        name: \"middleName\",\n        label: \"Middle Name\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"lastName\",\n        name: \"lastName\",\n        label: \"Last Name\",\n        type: \"text\",\n        cols: 4,\n      },\n    ]\n    return _fields\n  }, [])\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage CTMS Users\"}>\n      <Box type=\"primary\" title=\"Displaying CTMS users\" icon=\"fa-users\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              actionColumnWidth={200}\n              {...rest}\n              canDelete={false}\n              rowActionButtons={[\n                {\n                  text: 'Block',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.ACTIVE\n                  },\n                  onClick: async (id) => {\n                    await UserService.blockUser(id)\n                  }\n                },\n                {\n                  text: 'Unblock',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.DISABLED\n                  },\n                  onClick: async (id) => {\n                    await UserService.unblockUser(id)\n                  }\n                }\n              ]}\n              entitySingle=\"Super User\"\n              entityPlural=\"Super Users\"\n              resource={`/api/v1/admin/superusers`}\n              formOptions={{\n                fields\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'User ID',\n                  hidden: true,\n                }, {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'role',\n                  text: 'Role',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default AdminListView;\n","import { format, isValid, parseISO } from \"date-fns\"\n\nexport const humanFriendlyDateFormat = (dateStrIso, defaultFormatStr = 'E do MMM, yyyy hh:mm a') => {\n    return format(parseISO(dateStrIso), defaultFormatStr)\n}\n\nexport const formatMySql = (dateStr) => {\n    return format(new Date(dateStr), \"yyyy-MM-dd\")\n}\n\nexport const formatBytesToString = (bytes) => {\n    if (bytes < 1024) {\n        return `${bytes} bytes`\n    }\n    if (bytes > 1024 && bytes < 1024 * 1024) {\n        return `${(bytes / 1024).toFixed(3)} KB`\n    }\n    if (bytes > 1024 * 1024 && bytes < 1024 * 1024 * 1024) {\n        return `${(bytes / (1024 * 1024)).toFixed(3)} MB`\n    }\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(3)} GB`\n}\n\nexport const formatUserName = (user) => {\n    return [user?.firstName, user?.middleName, user?.lastName].filter(x => x).join(\" \")\n}\n\nexport const convertToDate = (strordate) => {\n    if (typeof strordate === \"object\") {\n        return strordate\n    }else{\n        try{\n            return parseISO(strordate)\n        }catch(e){\n            return new Date(strordate)\n        }\n    }\n}","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst OnLineUsersView = ({\n  title = 'Current Users',\n  description = 'here you can see currently active users',\n  ...rest\n}) => {\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Current Users\"}>\n      <Box type=\"success\" title=\"Displaying current users\" icon=\"fa-users\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              canAdd={false}\n              canEdit={false}\n              canDelete={false}\n              {...rest}\n              entitySingle=\"User\"\n              entityPlural=\"Users\"\n              resource={`/api/v1/admin/users/online`}\n              columns={[\n                {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n                {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    return [row.ip, row.port].filter(x => !!x).join(\":\")\n                  }\n\n                },\n                {\n                  dataField: 'lastVisited',\n                  text: 'Last Visited',\n                  formatter: (c, row) => {\n                    return humanFriendlyDateFormat(row['lastVisited'])\n                  }\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default OnLineUsersView;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport CommonService from \"src/services/CommonService\";\nimport { formatBytesToString, humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst BackupsListView = ({\n    title = 'Database backups',\n    description = 'here you can see currently active users',\n    ...rest\n}) => {\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Database backups\"}>\n            <Box type=\"success\" title=\"Displaying latest 100 backup files\" icon=\"fa-download\">\n                <Row>\n                    <Col md={12}>\n                        <DataGridComponent\n                            modalSize=\"lg\"\n                            canAdd={false}\n                            canEdit={false}\n                            canDelete={false}\n                            {...rest}\n                            entitySingle=\"Backup\"\n                            entityPlural=\"Backups\"\n                            resource={`/api/v1/admin/db-backups`}\n                            globalActionButtons={[\n                                {\n                                    text: 'Create Backup',\n                                    icon: 'fa-plus',\n                                    type: 'success',\n                                    onClick: async () => {\n                                        await CommonService.createDatabaseBackup()\n                                    }\n                                },]\n                            }\n                            columns={[\n                                {\n                                    dataField: 'filename',\n                                    text: 'Backup file name',\n                                },\n                                {\n                                    dataField: 'size',\n                                    text: 'Size',\n                                    formatter: (c, row) => {\n                                        return formatBytesToString(row['size'])\n                                    }\n                                }, {\n                                    dataField: 'createdOn',\n                                    text: 'Created',\n                                    formatter: (c, row) => {\n                                        return humanFriendlyDateFormat(row['createdOn'])\n                                    }\n                                },\n                            ]}\n                        />\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default BackupsListView;\n","import 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\nimport { addDays, isAfter, isBefore, isDate, subDays, subYears } from \"date-fns\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { useState } from \"react\";\nimport { convertToDate, formatMySql } from \"src/utils/commonHelper\";\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\nimport { DateRangePicker } from 'react-date-range';\nimport { Button } from 'adminlte-2-react';\nimport Dialog from '../Dialog';\n\nconst DateFilter = ({\n    label = \"Filter by date\",\n    cols = 12,\n    ...rest\n}) => {\n    const [showPicker, setShowPicker] = useState(false)\n    const [state, setState] = useState([]);\n\n    const getFilterValue = () => {\n        const defaultStart = subDays(new Date(), 7)\n        const defaultEnd = subDays(new Date(), 7)\n        let start = parseQueryParams(rest.history, 'start', null)\n        let end = parseQueryParams(rest.history, 'end', null)\n\n        start = isDate(start) ? convertToDate(start) : defaultStart\n        end = isDate(end) ? convertToDate(end) : defaultEnd\n\n        if (!isBefore(start, end)){\n            start = subDays(end, 7)\n        }\n\n        setState([\n            {\n                startDate: start,\n                endDate: end,\n                key: 'selection'\n            }\n        ])\n    }\n\n    useEffect(() => {\n        getFilterValue();\n        const unlisten = rest.history.listen(() => {\n            getFilterValue();\n        })\n        return unlisten\n    }, [])\n\n\n    return (\n        <>\n            {state.length > 0 && <Button disabled text={`Showing results from ${formatMySql(state[0].startDate)} to ${formatMySql(state[0].endDate)}`} />}\n            <Button type=\"success\" onClick={() => setShowPicker(true)} icon=\"fa-calendar\" text=\"Filter by Date\" />\n            <Dialog show={showPicker} size=\"lg\" title=\"Choose dates\" onSuccess={() => {\n                setShowPicker(false)\n                pushQueryParams(rest.history, {\n                    start: formatMySql(state[0].startDate),\n                    end: formatMySql(state[0].endDate)\n                })\n            }} acceptText=\"Search\">\n                {state.length > 0 && <DateRangePicker\n                    minDate={subYears(new Date(), 1)}\n                    maxDate={new Date()}\n                    onChange={item => {\n                        setState([item.selection])\n                    }}\n                    showSelectionPreview={true}\n                    moveRangeOnFirstSelection={false}\n                    months={2}\n                    ranges={state}\n                    direction=\"horizontal\"\n                />}\n            </Dialog>\n        </>\n    )\n}\n\nexport default DateFilter","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport DateFilter from \"src/components/filters/DateFilter\";\nimport { formatUserName, humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst ReportListView = ({\n    title = 'Reports',\n    description = 'here you can see various activity by users',\n    ...rest\n}) => {\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Reports\"}>\n            <Box type=\"success\" title=\"Displaying activity reports\" icon=\"fa-chart-line\">\n                <Row>\n                    <Col md={12}>\n                        <DataGridComponent\n                            modalSize=\"lg\"\n                            canAdd={false}\n                            canEdit={false}\n                            canDelete={false}\n                            {...rest}\n                            filterComponents={[<DateFilter history={rest.history} key={'date_filter'} />]}\n                            entitySingle=\"User\"\n                            entityPlural=\"Users\"\n                            resource={`/api/v1/admin/reports`}\n                            columns={[\n                                {\n                                    dataField: 'entity',\n                                    text: 'Entity',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return <strong>{`${row['entity']}`.toUpperCase()}</strong>\n                                    },\n                                },\n                                {\n                                    dataField: 'entityAction',\n                                    text: 'Action',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return row['entityAction'].split('_').join(\" \")\n                                    },\n                                },\n                                {\n                                    dataField: 'modifiedById',\n                                    text: 'Action Taken By',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return row['modifiedBy'] ? (row['modifiedBy']?.username || row['modifedById']) : \"-\"\n                                    },\n                                },\n                                {\n                                    dataField: 'additionalInfo',\n                                    text: 'Comments',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return `${row['additionalInfo']}`\n                                    },\n                                },\n                                {\n                                    dataField: 'createdAt',\n                                    text: 'Action Performed on',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return `${humanFriendlyDateFormat(row['createdAt'])}`\n                                    },\n                                }\n                            ]}\n                        />\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default ReportListView;\n","import httpClient from \"src/utils/httpClient\";\n\nconst getWebsiteSettings = async () => await httpClient.get(\"/api/v1/admin/settings\");\nconst saveWebsiteSetting = async (settingData) => await httpClient.put(\"/api/v1/admin/settings\", settingData);\n\nconst SettingService = {\n  getWebsiteSettings,\n  saveWebsiteSetting\n};\n\nexport default SettingService;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useMemo, useState } from \"react\";\nimport SettingService from \"src/services/SettingService\";\nimport PhotoThumb from \"src/components/PhotoThumb\";\nimport { connect } from \"react-redux\";\nimport { GlobalActions } from \"src/slices/globalSlice\";\n\nconst SettingsListView = ({\n  title = 'Configurations',\n  description = 'here you can manage configurations',\n  triggerGetSettings,\n  ...rest\n}) => {\n\n  const [settings, setSettings] = useState([])\n  const [record, setCurrentRecord] = useState(null)\n\n  const fields = useMemo(() => {\n    if (record) {\n      return settings.filter(setting => setting.id === record.id)\n    }\n    return []\n  }, [record, settings])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Configuration\"}>\n      <Box type=\"primary\" title=\"Displaying configurations\" icon=\"fa-cog\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              hideIdOnEdit={true}\n              entityPlural=\"Configurations\"\n              entitySingle=\"Configuration\"\n              canAdd={false}\n              canEdit={true}\n              canDelete={false}\n              resource={`/api/v1/admin/settings`}\n              onFormShow={(row) => {\n                setCurrentRecord(row)\n              }}\n              onDataUpdated={(data) => {\n                triggerGetSettings()\n                setSettings(data.results)\n              }}\n              columns={[\n                {\n                  dataField: 'label',\n                  text: 'Setting Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'value',\n                  text: 'Setting Value',\n                  sort: true,\n                  formatter: (c, row) => {\n                    if (row.type === 'upload') {\n                      return <PhotoThumb border={false} width={50} height={50} url={row.value} />\n                    }\n                    return row['value']\n                  }\n                }\n              ]}\n              formOptions={\n                {\n                  fields\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    triggerGetSettings: async () => {\n      const data = await SettingService.getWebsiteSettings()\n      data?.success && dispatch(GlobalActions.setWebsiteSettings(data.data))\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SettingsListView);\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport { useEffect, useState } from \"react\";\nimport { SETTINGS_CONFIG } from \"src/constants/global\";\nimport SettingService from \"src/services/SettingService\";\n\nconst READ_SETTINGS = [\n    SETTINGS_CONFIG.EMAIL_SALES,\n    SETTINGS_CONFIG.LANDLINE_SALES,\n    SETTINGS_CONFIG.LANDLINE_SUPPORT,\n    SETTINGS_CONFIG.EMAIL_SUPPORT\n]\nconst ContactUsView = ({\n    title = 'Contact Us',\n    description = 'contact information',\n    ...rest\n}) => {\n    const [settings, setSettings] = useState([])\n    useEffect(() => {\n        (async () => {\n            const data = await SettingService.getWebsiteSettings()\n            if (data?.success && data?.data?.results) {\n                const _settings = (data.data.results || []).filter(setting => READ_SETTINGS.includes(setting.name))\n                setSettings(_settings)\n            }\n        })()\n    }, [])\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Contact us\"}>\n            <Box type=\"success\" title=\"Displaying contact information\" icon=\"fa-phone-alt\">\n                <Row>\n                    <Col md={12}>\n                        <table className=\"table table-bordred table-striped\">\n                            <tbody>\n                            {settings.map((setting) => {\n                                return (\n                                    <tr>\n                                        <td>{setting.label}</td>\n                                        <td>{setting.value || setting.default}</td>\n                                    </tr>\n                                );\n                            })}\n                            </tbody>\n                        </table>\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default ContactUsView;\n","import { connect } from \"react-redux\";\r\nimport UserService from \"src/services/UserService\";\r\nimport { CurrentUserActions } from \"src/slices/currentUserSlice\";\r\nimport AdminLTE, { Navbar, Sidebar, } from \"adminlte-2-react\";\r\nimport LoginForm from \"src/components/LoginForm\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { navigateToLogin } from \"src/utils/routerHelper\";\r\nimport {\r\n  BRANCH_LIST_PAGE,\r\n  LOCATION_LIST_PAGE,\r\n  NAV_ITEMS,\r\n  RANK_LIST_PAGE,\r\n  REGISTRATION_LIST_PAGE,\r\n  USER_LIST_PAGE,\r\n  DASHBOARD_ROUTE,\r\n  LOGOUT_ROUTE,\r\n  NMS_LIST_PAGE,\r\n  DEVICE_MAMAGEMENT_ROUTE,\r\n  SUPER_USER_LIST_PAGE,\r\n  ONLINE_USERS_ROUTE,\r\n  BACKUPS_LIST,\r\n  REPORTS_LIST_PAGE,\r\n  SETTINGS_PAGE,\r\n  CONTACT_PAGE,\r\n  SETTINGS_CONFIG\r\n} from \"src/constants/global\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport BranchListView from \"src/modules/branches/views/BranchListView\";\r\nimport LocationListView from \"src/modules/locations/views/LocationListView\";\r\nimport RankListView from \"src/modules/ranks/views/RankListView\";\r\nimport RegistrationListView from \"src/modules/registrations/views/RegistrationListView\";\r\nimport UserListView from \"src/modules/users/UserListView\";\r\nimport DashboardView from \"src/modules/dashboard/views/DashboardView\";\r\nimport GlobalToast from \"src/components/GlobalToast\";\r\nimport NmsDeviceListView from \"src/modules/nms-devices/views/NmsDevicesListView\";\r\nimport DeviceListView from \"src/modules/device-directory/views/DevicesListView\";\r\nimport AdminListView from \"src/modules/users/AdminListView\";\r\nimport OnLineUsersView from \"src/modules/users/OnlineUsersView\";\r\nimport BackupsListView from \"src/modules/backups/BackupsListView\";\r\nimport ReportListView from \"src/modules/reports/ReportListView\";\r\nimport SettingsListView from \"src/modules/settings/SettingsListView\";\r\nimport ContactUsView from \"src/modules/contact_us/ContactUsView\";\r\nimport { format } from \"date-fns\";\r\nimport SettingService from \"src/services/SettingService\";\r\nimport { GlobalActions } from \"src/slices/globalSlice\";\r\n\r\nconst { Entry } = Navbar\r\n\r\nconst Footer = () => {\r\n  const title = `©️ ${format(new Date(), 'yyyy')} MCIL. All Rights Reserved.`\r\n  return (\r\n    <div className=\"text-center\" style={{ color: '#444', padding: \"15px 0\", margin: 0, marginLeft: 200, background: '#eee', borderTop: 'solid 1px #ccc' }}>\r\n      <p><strong>{title}</strong></p>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Layout = ({ \r\n  triggerLogin,\r\n  triggerGetCurrentUser,\r\n  triggerGetSettings,\r\n  currentUser,\r\n  settings\r\n}) => {\r\n  const [logo, setLogo] = useState('/default_logo.png')\r\n  useEffect(() => {\r\n    triggerGetCurrentUser()\r\n    triggerGetSettings()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const l = settings.find(setting => setting.name === SETTINGS_CONFIG.LOGO)?.value || '/default_logo.png'\r\n    setLogo(l)\r\n  },[settings])\r\n\r\n  useEffect(() => {\r\n      setTimeout(() => {\r\n        const eleme = document.querySelector('a.logo')\r\n        eleme && (eleme.style.background = `url(${logo})`)\r\n      }, 200)\r\n  },[logo])\r\n\r\n  const isLoggedIn = !!currentUser\r\n  if (!isLoggedIn) {\r\n    return (\r\n      <BrowserRouter>\r\n        <GlobalToast />\r\n        <LoginForm triggerLogin={triggerLogin} />\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <GlobalToast />\r\n      <AdminLTE footer={<Footer />} theme=\"black\" title={[]}>\r\n        <Navbar.Core>\r\n          <Entry to={LOGOUT_ROUTE} labelValue=\"Logout\" icon=\"fa-power-off\" labelType=\"danger\" onClick={() => navigateToLogin()} />\r\n        </Navbar.Core>\r\n        <Sidebar.Core>\r\n          {\r\n            NAV_ITEMS.map((item, index) => {\r\n              if (item.items && item.items.length > 0) {\r\n                return (<Sidebar.Item onClick={item.onClick} key={index} icon={item.icon} text={item.title} to={item.path} color={item.color ?? 'gray'}>\r\n                  {(item.items || []).map((childItem, childIndex) => {\r\n                    return <Sidebar.Item onClick={childItem.onClick} key={`${index}-child-${childIndex}`} icon={childItem.icon} text={childItem.title} to={childItem.path} color={childItem.color ?? 'gray'} />\r\n                  })}\r\n                </Sidebar.Item>)\r\n              }\r\n              return <Sidebar.Item onClick={item.onClick} key={`${index}`} icon={item.icon} text={item.title} to={item.path} color={item.color ?? 'gray'} />\r\n            })\r\n          }\r\n        </Sidebar.Core>\r\n        <BranchListView path={BRANCH_LIST_PAGE} exact={true} />\r\n        <LocationListView path={LOCATION_LIST_PAGE} exact={true} />\r\n        <RankListView path={RANK_LIST_PAGE} exact={true} />\r\n        <RegistrationListView path={REGISTRATION_LIST_PAGE} exact={true} />\r\n        <UserListView path={USER_LIST_PAGE} exact={true} />\r\n        <DashboardView path={DASHBOARD_ROUTE} exact={true} />\r\n        <NmsDeviceListView path={NMS_LIST_PAGE} exact={true} />\r\n        <DeviceListView path={DEVICE_MAMAGEMENT_ROUTE} exact={true} />\r\n        <AdminListView path={SUPER_USER_LIST_PAGE} exact={true} />\r\n        <OnLineUsersView path={ONLINE_USERS_ROUTE} exact={true} />\r\n        <BackupsListView path={BACKUPS_LIST} exact={true} />\r\n        <ReportListView path={REPORTS_LIST_PAGE} exact={true} />\r\n        <SettingsListView path={SETTINGS_PAGE} exact={true} />\r\n        <ContactUsView path={CONTACT_PAGE} exact={true} />\r\n      </AdminLTE>\r\n    </React.Fragment>\r\n\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentUser: state.currentUserState?.currentUser || null,\r\n    settings: state.globalState?.settings || null\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    triggerLogin: async ({ username, password }, history) => {\r\n      const data = await UserService.loginUser(username, password);\r\n      data?.success && dispatch(CurrentUserActions.setUserState(data.data));\r\n    },\r\n    triggerGetCurrentUser: async () => {\r\n      const data = await UserService.getCurrentUser()\r\n      data?.success && dispatch(CurrentUserActions.setCurrentUser(data.data))\r\n    },\r\n    triggerGetSettings: async () => {\r\n      const data = await SettingService.getWebsiteSettings()\r\n      data?.success && dispatch(GlobalActions.setWebsiteSettings(data.data))\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Layout from \"./layouts\";\nimport store from \"./store/store\";\nimport { Provider } from \"react-redux\";\nimport 'react-quill/dist/quill.snow.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'src/assets/style.css'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.Fragment>\n      <Layout />\n    </React.Fragment>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","const LocalStorageHelper = {\n  store: (key, value) => {\n    if (key && value) {\n      window.localStorage.setItem(key, JSON.stringify(value));\n    }\n  },\n  get: (key) => {\n    if (key) {\n        let value = window.localStorage.getItem(key);\n        try{\n            return JSON.parse(value);\n        }catch(e){\n            return value || null\n        }\n    }\n  },\n  delete: (key) => {\n      if(key){\n         localStorage.removeItem(key);\n      }\n  }\n};\n\nexport default LocalStorageHelper\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: RegistrationReducer, actions: RegistrationActions } = createSlice(\n  {\n    name: \"registrationSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n    },\n    reducers: {\n      setRegistrations: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: UserReducer, actions: UserActions } = createSlice(\n  {\n    name: \"userSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n    },\n    reducers: {\n      setUsers: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport thunk from \"redux-thunk\";\r\nimport { RegistrationReducer } from \"src/slices/RegistrationSlice\";\r\nimport { RankReducer } from \"src/slices/RankSlice\";\r\nimport { BranchReducer } from \"src/slices/BranchSlice\";\r\nimport { LocationReducer } from \"src/slices/LocationSlice\";\r\nimport { GlobalReducer } from \"src/slices/globalSlice\";\r\nimport { CurrentUserReducer } from \"src/slices/currentUserSlice\";\r\nimport { NmsDeviceReducer } from \"src/slices/NmsDeviceSlice\";\r\nimport { DeviceReducer } from \"src/slices/DeviceSlice\";\r\nimport { UserReducer as UserManagementReducer } from \"src/slices/UserSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    globalState: GlobalReducer,\r\n    currentUserState: CurrentUserReducer,\r\n    rankState: RankReducer,\r\n    branchState: BranchReducer,\r\n    locationState: LocationReducer,\r\n    registrationState: RegistrationReducer,\r\n    nmsState: NmsDeviceReducer,\r\n    deviceState: DeviceReducer,\r\n    userState: UserManagementReducer\r\n  },\r\n  middleware: [thunk],\r\n});\r\n"],"sourceRoot":""}