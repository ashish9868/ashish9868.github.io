{"version":3,"sources":["slices/LocationSlice.js","slices/NmsDeviceSlice.js","slices/DeviceSlice.js","components/PhotoThumb.js","services/UploadService.js","components/EntityForm.js","utils/httpClient.js","utils/storeHelper.js","slices/globalSlice.js","slices/currentUserSlice.js","services/UserService.js","components/LoginForm.js","utils/routerHelper.js","constants/global.js","components/Dialog.js","components/DataGridComponent.js","modules/branches/views/BranchListView.js","modules/locations/views/LocationListView.js","modules/ranks/views/RankListView.js","services/RegistrationService.js","modules/registrations/views/RegistrationListView.js","services/CommonService.js","modules/users/UserListView.js","modules/dashboard/views/DashboardView.js","components/GlobalToast.js","modules/nms-devices/views/NmsDevicesListView.js","components/filters/LocationFilter.js","modules/device-directory/views/DevicesListView.js","modules/users/AdminListView.js","utils/commonHelper.js","modules/users/OnlineUsersView.js","modules/backups/BackupsListView.js","modules/reports/ReportListView.js","services/SettingService.js","modules/settings/SettingsListView.js","modules/contact_us/ContactUsView.js","layouts/index.js","index.js","utils/localStorageHelper.js","slices/RegistrationSlice.js","slices/UserSlice.js","store/store.js","slices/RankSlice.js","slices/BranchSlice.js"],"names":["createSlice","name","initialState","listData","results","currentPage","totalResults","totalPages","_location","reducers","setLocations","state","payload","LocationReducer","reducer","LocationActions","actions","nms","setNmsDevices","NmsDeviceReducer","NmsDeviceActions","setDevices","DeviceReducer","DeviceActions","PhotoThumb","url","width","height","border","borderColor","onClick","style","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","cursor","className","uploadFile","file","data","FormData","append","httpClient","post","res","success","getUploadedFiles","get","deleteFile","id","delete","UploadService","CustomDateInput","forwardRef","ref","originalValue","FieldWrap","field","errors","touched","children","formErrors","shouldShowError","type","cols","hideLabel","htmlFor","label","EntityForm","action","method","disabled","initialValues","validationSchema","fields","onSubmit","values","props","editMode","entitySingle","submitTitle","hideSubmit","length","md","enableReinitialize","formConfig","modifiedValues","Object","keys","forEach","key","undefined","setFieldValue","Date","now","map","title","options","object","Array","isArray","push","value","objectAsArray","as","placeholder","onChange","e","nativeEvent","target","option","setCheckBoxGroupFieldValue","existingValues","Set","checked","add","parseInt","from","backgroundColor","overflow","includes","theme","date","format","customInput","files","showGlobalModalNotification","message","accept","opacity","position","left","top","default","document","getElementById","click","icon","autoComplete","window","scrollTo","axios","create","baseURL","headers","interceptors","request","use","config","user","LocalStorageHelper","accessToken","response","error","errorResponse","status","globalError","hideTs","Promise","resolve","code","store","dispatch","CurrentUserActions","setUserState","reject","GlobalActions","setGlobalMessage","dismissGlobalError","globalMessage","settings","snmpDeviceStatus","setWebsiteSettings","setSnmpDeviceStatus","GlobalReducer","userKEY","currentUser","location","setCurrentUser","CurrentUserReducer","loginUser","username","password","getCurrentUser","logOutUser","getAllUsers","params","rejectUser","approveUser","blockUser","patch","unblockUser","UserService","loginSchema","yup","shape","required","LoginForm","triggerLogin","history","_history","useHistory","useState","setFormErrors","paddingTop","href","initialErrors","placholder","pushQueryParams","replace","queryParams","parseQueryParams","finalParams","p","pathname","search","URLSearchParams","toString","defaultVal","v","k","LOCATION_LIST_PAGE","RANK_LIST_PAGE","BRANCH_LIST_PAGE","REGISTRATION_LIST_PAGE","NMS_LIST_PAGE","USER_LIST_PAGE","DEVICE_MAMAGEMENT_ROUTE","ONLINE_USERS_ROUTE","SUPER_USER_LIST_PAGE","BACKUPS_LIST","REPORTS_LIST_PAGE","SETTINGS_PAGE","CONTACT_PAGE","NAV_ITEMS","path","color","USER_STATUSES","USER_ROLES","SUPERADMIN","ADMIN","USER","SETTINGS_CONFIG","Dialog","exists","show","showHeader","acceptText","cancelText","canDismiss","size","bodyPadding","zIndex","cancelDisabled","successDisabled","onSuccess","onCancel","onDismiss","tabIndex","display","LoadingOverlay","propTypes","MODE_EDIT","DataGridComponent","modalSize","keyField","entityPlural","columns","hideIdOnEdit","limit","remote","sort","filter","pagination","defaultSorted","dataField","order","showTotal","beforeSave","onTableChange","onDataUpdated","tableData","onDelete","canAdd","canDelete","canEdit","rowActionButtons","globalActionButtons","formOptions","resource","onFormShow","row","mode","actionColumnWidth","filterComponents","rest","record","setCurrentRecord","showFormDialog","setShowFormDialog","selectedIds","setSelectedIds","loading","setLoading","records","setRecords","fetchTableData","useCallback","result","columnsWithActions","useMemo","clms","clm","isDummyField","text","formatter","cellContent","actionButton","canShow","fieldsDyanmic","recordKey","triggerSetCurrentRecord","isAddEdit","currentRecord","find","r","useEffect","unlisten","listen","Fragment","resetForm","put","baseProps","paginationFactory","page","sizePerPage","totalSize","sizePerPageList","paginationSize","_data","sortOrder","sortBy","striped","selectRow","bgColor","selectColumnStyle","onSelectAll","isSelected","selections","onSelect","hideSelectColumn","overlay","overlayFactory","spinner","styles","base","background","noDataIndication","BranchListView","description","subTitle","browserTitle","BranchActions","setBranches","hidden","LocationListView","joinChar","level","setLevel","segments","setSegments","_level","_segments","locationId","join","_handler","split","segment","concat","email","RankListView","RankActions","setRanks","rejectRegistration","approveRegistration","RegistrationService","STATUSES","RegistrationListView","require","getLocationList","locations","getBranchesList","getRanksList","createDatabaseBackup","getDashboardSummary","getNmsDevicesStatus","CommonServerice","UserListView","branches","ranks","setRecord","setMode","console","log","CommonService","_fields","l","firstName","branchId","rankId","c","b","middleName","lastName","x","ip","port","DashboardView","NAVIGATION_CARDS","totalUsers","to","totalOnlineUsers","totalSuperUsers","totalNmsDevices","totalDevices","totalPendingRequests","summary","setSummary","card","connect","globalState","deviceStatus","setDeviceStatus","checkInterval","setCheckInterval","interval","s","setInterval","clearInterval","address","isOnline","str","systemName","atob","LocationFilter","DeviceListView","AdminListView","role","humanFriendlyDateFormat","dateStrIso","defaultFormatStr","parseISO","OnLineUsersView","BackupsListView","bytes","toFixed","ReportListView","toUpperCase","getWebsiteSettings","saveWebsiteSetting","settingData","SettingService","triggerGetSettings","setSettings","setting","READ_SETTINGS","ContactUsView","_settings","Entry","Navbar","Footer","padding","margin","marginLeft","borderTop","currentUserState","triggerGetCurrentUser","logo","setLogo","setTimeout","eleme","querySelector","footer","Core","labelValue","labelType","route","navigateToLogin","item","index","items","Item","childItem","childIndex","exact","ReactDOM","render","localStorage","setItem","JSON","stringify","getItem","parse","removeItem","setRegistrations","RegistrationReducer","setUsers","UserReducer","configureStore","rankState","RankReducer","branchState","BranchReducer","locationState","registrationState","nmsState","deviceState","userState","UserManagementReducer","middleware","thunk","rank","branch"],"mappings":"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","file":"static/js/main.07112512.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: LocationReducer, actions: LocationActions } = createSlice(\n  {\n    name: \"locationSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      _location: null,\n    },\n    reducers: {\n      setLocations: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: NmsDeviceReducer, actions: NmsDeviceActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      nms: null,\n    },\n    reducers: {\n      setNmsDevices: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: DeviceReducer, actions: DeviceActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      nms: null,\n    },\n    reducers: {\n      setDevices: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import React from \"react\";\nconst PhotoThumb = ({\n  url = null,\n  width = 120,\n  height = 120,\n  border = 1,\n  borderColor = \"grey\",\n  onClick = () => {}\n}) => {\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        width,\n        height,\n        backgroundImage: `url(${url})`,\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"contain\",\n        backgroundPosition: 'center',\n        border: `solid ${border || 1}px ${borderColor}`,\n        cursor: \"pointer\",\n      }}\n      className=\"img-thumbnail m-2\"\n    />\n  );\n};\n\nexport default PhotoThumb;\n","import httpClient from \"src/utils/httpClient\";\n\nconst uploadFile = async (file) => {\n  const data = new FormData();\n  data.append(\"file\", file);\n  const res = await httpClient.post(\"/api/v1/admin/uploads\", data);\n  const url = res?.success ? res.data : null\n  return url ? `/api/v1/uploads/${url}` : null\n};\n\nconst getUploadedFiles = async () => await httpClient.get(\"/api/v1/admin/uploads\");\n\nconst deleteFile = async (id) => await httpClient.delete(`/api/v1/admin/uploads/${id}`)\n\nconst UploadService = {\n  uploadFile,\n  getUploadedFiles,\n  deleteFile\n};\n\n\nexport default UploadService;\n","import { Field, Form, Formik } from \"formik\";\nimport React, { forwardRef } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport DatePicker from \"react-datepicker\";\nimport PhotoThumb from \"./PhotoThumb\";\nimport { format } from \"date-fns\";\nimport { Button, Col, Row } from \"adminlte-2-react\";\nimport { showGlobalModalNotification } from \"src/utils/storeHelper\";\nimport UploadService from \"src/services/UploadService\";\n\nconst CustomDateInput = forwardRef(({ onClick, originalValue }, ref) => {\n  return (\n    <div\n      style={{ cursor: \"pointer\" }}\n      className=\"input-group mb-3\"\n      onClick={onClick}\n    >\n      <div className=\"ps-2 pe-2 form-control\">\n        {originalValue || \"YYYY-MM-DD\"}\n      </div>\n      <span className=\"input-group-text\" id=\"basic-addon1\">\n        <i className=\"bi bi-calendar\" />\n      </span>\n    </div>\n  );\n});\nconst FieldWrap = ({\n  field = {},\n  errors = {},\n  touched = {},\n  children = null,\n  formErrors = {}\n}) => {\n  const shouldShowError =\n    (errors[field.name] && touched[field.name]) ||\n    (errors[field.name] && field.type === \"richtext\") || formErrors[field.name];\n  return (\n    <Col key={field.id} className={`mb-2 col-lg-${field.cols} col-sm-12 col-md-6`}>\n      <div className={`form-group ${shouldShowError ? 'has-error' : ''}`}>\n        {!field?.hideLabel && <label htmlFor={field.id} className=\"form-label\">\n          {field.label}\n        </label>\n        }\n        <div>\n          {children}\n          {shouldShowError && (\n            <span className=\"text-red\"><p>{errors[field.name] || formErrors[field.name]}</p></span>\n          )}\n        </div>\n      </div>\n    </Col>\n  );\n};\n\nconst objectAsArray = (object) => {\n  if (Array.isArray(object)) {\n    return object;\n  } else {\n    const data = [];\n    Object.keys(key => {\n      data.push({ key, value: object[key] })\n    })\n    return data;\n  }\n}\n\nconst EntityForm = ({\n  id = \"\",\n  action = \"\",\n  method = \"POST\",\n  disabled = false,\n  initialValues = {},\n  validationSchema = null,\n  fields = [],\n  onSubmit = async (values, props) => { },\n  editMode = false,\n  entitySingle = 'record',\n  submitTitle = null,\n  formErrors = {},\n  hideSubmit = false\n}) => {\n\n  if (!initialValues || fields.length < 1) {\n    return <></>;\n  }\n  return (\n    <Row>\n      <Col md={12}>\n        <Formik\n          initialValues={initialValues}\n          enableReinitialize\n          onSubmit={(values, formConfig) => {\n            const modifiedValues = {}\n            Object.keys(initialValues).forEach(key => {\n              if ((values[key] !== initialValues[key] && values[key] !== undefined) || `${key}` === \"id\") {\n                modifiedValues[key] = values[key]\n              }\n            });\n            onSubmit(modifiedValues, formConfig)\n          }}\n          validationSchema={validationSchema}\n        >\n          {({ errors, touched, values, setFieldValue }) => (\n            <Form\n              action={action}\n              id={id || Date.now()}\n              method={method}\n              disabled={disabled}\n            >\n              <Row>\n                {fields.map((field) => {\n                  switch (field.type) {\n                    case \"fieldset\":\n                      return (\n                        <h3 className=\"display-6 fs-6 pt-2 pb-2 fw-bold bg-secondary text-white\">{field?.title}</h3>\n                      );\n                    case \"select\":\n                      const options = objectAsArray(field?.options || [])\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}-${entitySingle}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <Field\n                            as=\"select\"\n                            className={\n                              errors[field.name] && touched[field.name]\n                                ? \"form-select rounded-0 is-invalid shadow-none form-control\"\n                                : \"form-select form-control\"\n                            }\n                            placeholder={field.placeholder || field.label}\n                            name={field.name}\n                            id={field.id}\n                            onChange={(e) => {\n                              field.onChange && field.onChange(e)\n                              setFieldValue(field.name, e.nativeEvent.target.value)\n                            }}\n                          >\n                            <option value={''}>{field.placeholder || field.label}</option>\n                            {options.map((option) => (\n                              <option\n                                key={`${option.key}-${entitySingle}`}\n                                value={option.key}\n                              >\n                                {option.value}\n                              </option>\n                            ))}\n                          </Field>\n                        </FieldWrap>\n                      );\n                    case \"textarea\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <Field\n                            as=\"textarea\"\n                            className={\n                              errors[field.name] && touched[field.name]\n                                ? \"form-control shadow-none is-invalid\"\n                                : \"form-control shadow-none\"\n                            }\n                            placeholder={field.placeholder || field.label}\n                            name={field.name}\n                            id={field.id}\n                            onChange={(e) => {\n                              field.onChange && field.onChange(e)\n                              setFieldValue(field.name, e.nativeEvent.target.value)\n                            }}\n                          />\n                        </FieldWrap>\n                      );\n                    case \"checkbox_group\":\n                      const setCheckBoxGroupFieldValue = (e) => {\n                        const existingValues = new Set(values[field.name].length > 0 ? values[field.name] : [])\n                        if (e.target.checked) {\n                          existingValues.add(parseInt(e.target.value))\n                        } else {\n                          existingValues.delete(parseInt(e.target.value))\n                        }\n                        setFieldValue(field.name, Array.from(existingValues))\n                      }\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n\n                        >\n                          <div className=\"p-3 ps-3\" style={{ height: `${field.height || 150}px`, backgroundColor: '', border: 'solid 1px #eee', overflow: 'auto' }}>\n                            {field.options.map(option => {\n                              return (\n                                <div key={option.key} className=\"form-check\">\n                                  <input\n                                    type=\"checkbox\"\n                                    className={\n                                      errors[field.name] && touched[field.name]\n                                        ? \"form-check-input shadow-none is-invalid\"\n                                        : \"form-check-input shadow-none\"\n                                    }\n                                    name={`${field.name}`}\n                                    checked={values[field.name].includes(option.key)}\n                                    id={`${field.id}-${option.key}`}\n                                    value={option.key}\n                                    onChange={setCheckBoxGroupFieldValue}\n                                  />\n                                  <label className=\"form-check-label\" htmlFor={`${field.id}-${option.key}`}>{option.value}</label>\n                                </div>\n                              )\n                            })}\n                          </div>\n                        </FieldWrap>\n                      );\n                    case \"richtext\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <ReactQuill\n                            theme=\"snow\"\n                            value={values[field.name]}\n                            onChange={(value) => setFieldValue(field.name, value)}\n                          />\n                        </FieldWrap>\n                      );\n                    case \"date\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <DatePicker\n                            name={field.name}\n                            className=\"d-flex\"\n                            onChange={(date) => {\n                              field.onChange && field.onChange(date)\n                              setFieldValue(\n                                field.name,\n                                format(date, \"yyyy-MM-dd\")\n                              )\n                            }\n                            }\n                            customInput={\n                              <CustomDateInput\n                                originalValue={values[field.name]}\n                              />\n                            }\n                          />\n                        </FieldWrap>\n                      );\n                    case \"upload\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <input onChange={async (e) => {\n                            const file = e.nativeEvent?.target?.files[0]\n                            if (!file) {\n                              showGlobalModalNotification({\n                                success: false,\n                                message: \"You've choosen any file\",\n                              })\n                              return\n                            }\n                            const url = await UploadService.uploadFile(file)\n                            if (!url) {\n                              showGlobalModalNotification({\n                                success: false,\n                                message: \"Unable to upload file, contact server admin.\"\n                              })\n                              return\n                            }\n                            setFieldValue(field.name, url)\n                          }} id=\"fileinputRef\" accept=\"image/*\" type=\"file\" name={\"file\"} style={{ opacity: 0, position: \"absolute\", left: -9999, top: -100 }} />\n                          <div className=\"d-flex flex-wrap align-items-center justify-content-start\">\n                            <PhotoThumb\n                              key={\"no-selection\"}\n                              url={values[field.name] || values[field.default]}\n                            />\n                            <Button\n                              onClick={() => {\n                                document.getElementById('fileinputRef').click();\n                              }}\n                              icon=\"fa-edit\"\n                            />\n                          </div>\n                        </FieldWrap>\n                      );\n                    case \"hidden\":\n                      return (\n                        <Field\n                          key={`field-${field.id}`}\n                          autoComplete=\"off\"\n                          name={field.name}\n                          type={\"hidden\"}\n                          id={field.id}\n                        />\n                      );\n                    default:\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <Field\n                            autoComplete=\"off\"\n                            className={\n                              errors[field.name] && touched[field.name]\n                                ? \"form-control rounded-0 shadow-none is-invalid\"\n                                : \"form-control rounded-0 shadow-none\"\n                            }\n                            placeholder={field.placeholder || field.label}\n                            name={field.name}\n                            type={field.type}\n                            id={field.id}\n                            onChange={(e) => {\n                              field.onChange && field.onChange(e)\n                              setFieldValue(field.name, e.nativeEvent.target.value)\n                            }}\n                          />\n                        </FieldWrap>\n                      );\n                  }\n                })}\n              </Row>\n              {!hideSubmit && (\n                <>\n                  <hr />\n                  <div className=\"d-flex flex-row-reverse text-right\">\n                    <button\n                      disabled={disabled}\n                      onClick={() => window.scrollTo(0, 0)}\n                      type=\"success\"\n                      className=\"btn rounded-0  btn-primary\"\n                    >\n                      {submitTitle && <span>{submitTitle}</span>}\n                      {!submitTitle && (\n                        <span>\n                          {editMode ? \"Update\" : \"Create\"} {entitySingle}\n                        </span>\n                      )}\n                    </button>\n                  </div>\n                </>\n              )}\n\n            </Form>\n          )}\n        </Formik>\n      </Col>\n    </Row>\n  );\n};\n\nexport default EntityForm;\n","import axios from \"axios\";\nimport store from \"src/store/store\";\nimport { CurrentUserActions } from \"src/slices/currentUserSlice\";\nimport LocalStorageHelper from \"./localStorageHelper\";\nimport { showGlobalModalNotification } from \"./storeHelper\";\n\nconst baseUrl = `http://localhost:28000`;\nconst httpClient = axios.create({\n  baseURL: baseUrl,\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n\n\nhttpClient.interceptors.request.use((config) => {\n  // Do something before request is sent\n  const user = LocalStorageHelper.get('currentUser');\n  config.headers['Content-type'] = `application/json`\n  config.headers['Authorization'] = `Bearer ${user?.accessToken}`\n  return config;\n});\n\nhttpClient.interceptors.response.use(\n  (response) => {\n    return { data: response.data, success: true };\n  },\n  (error) => {\n    const errorResponse = error?.response;\n    switch (errorResponse?.status) {\n      case 422:\n        const errors = errorResponse?.data ?? {}\n        const globalError = errors['global'] || null\n        if (globalError){\n          showGlobalModalNotification({\n            message: globalError,\n            success: false,\n            hideTs: 5000,\n            title: \"Error!!\"\n          })\n        }\n        return Promise.resolve({\n          success: false,\n          errors: errors,\n          code: 422,\n        });\n      case 401:\n        // const redirectURL = errorResponse.request.responseURL\n        store.dispatch(CurrentUserActions.setUserState(null));\n        // window.location = `/login?redirect=${encodeURIComponent(redirectURL)}`\n        return Promise.resolve({\n          success: false,\n          code: 401,\n        });\n      case 404:\n        showGlobalModalNotification({\n          message: 'Page/Resource you are trying to access, do not exist.',\n          success: false,\n          hideTs: 5000,\n          title: \"Error!!\"\n        })\n        return Promise.resolve({\n          success: false,\n          code: 404,\n        });\n      default:\n        showGlobalModalNotification({\n          message: \"Something went wrong.\",\n          success: false,\n          hideTs: 5000,\n          title: \"Error!!\"\n        })\n\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default httpClient;\n","import { GlobalActions } from \"src/slices/globalSlice\"\nimport store from \"src/store/store\"\n\n\nexport const showGlobalModalNotification = ({\n    success = true,\n    title = 'Please note',\n    message,\n    hideTs = 3000\n}) => {\n    window.scrollTo(0, 0)\n    store.dispatch(GlobalActions.setGlobalMessage({\n        type: success ? 'success' : 'danger',\n        title,\n        message\n    }))\n    // setTimeout(function () {\n    //    \n    // }, hideTs)\n}\n\nexport const dismissGlobalError = () => {\n    store.dispatch(GlobalActions.setGlobalMessage({\n        type: '',\n        title: '',\n        message: ''\n    }))\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const { actions: GlobalActions, reducer: GlobalReducer } = createSlice({\r\n  name: \"globalSlice\",\r\n  initialState: {\r\n    errors: null,\r\n    globalMessage: {\r\n      title: '',\r\n      type: '',\r\n      message: ''\r\n    },\r\n    settings: [],\r\n    snmpDeviceStatus: {}\r\n  },\r\n  reducers: {\r\n    setGlobalMessage: (state, { payload }) => {\r\n      const { type, title, message } = payload\r\n      state.globalMessage = { ...state.globalError, type, title, message }\r\n    },\r\n    setWebsiteSettings: (state, { payload }) => {\r\n      const { results } = payload\r\n      state.settings = results\r\n    },\r\n    setSnmpDeviceStatus: (state, { payload }) => {\r\n      state.snmpDeviceStatus = payload\r\n    }\r\n  },\r\n});\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport LocalStorageHelper from \"../utils/localStorageHelper\";\r\n\r\nexport const userKEY = \"currentUser\";\r\nexport const { actions: CurrentUserActions, reducer: CurrentUserReducer } = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: LocalStorageHelper.get(userKEY),\r\n    currentUser: null,\r\n  },\r\n  reducers: {\r\n    setUserState: (state, { payload }) => {\r\n      payload\r\n        ? LocalStorageHelper.store(userKEY, payload)\r\n        : LocalStorageHelper.delete(userKEY);\r\n      state.user = payload;\r\n\r\n      if (payload) {\r\n                // window.location = `/login?redirect=${encodeURIComponent(redirectURL)}`\r\n        window.location = '/'\r\n      }\r\n    },\r\n    setCurrentUser: (state, {payload}) => {\r\n      state.currentUser = payload\r\n    }\r\n  },\r\n});\r\n","import httpClient from \"../utils/httpClient\";\n\nconst loginUser = async (username, password) =>\n  await httpClient.post(\"/auth/login\", {\n    username,\n    password\n  });\n\nconst getCurrentUser = async () => await httpClient.get(\"/api/v1/me\");\n\nconst logOutUser = async () => await httpClient.get(\"/auth/logout\");\n\nconst getAllUsers = async (params = {}) =>\n  await httpClient.get(\"/api/v1/admin/users\", { params });\n\nconst rejectUser = async (id) => await httpClient.delete(`/api/v1/admin/users/${id}`);\nconst approveUser = async (id) => await httpClient.post(`/api/v1/admin/users/${id}`);\n\nconst blockUser = async (id) => await httpClient.patch(`/api/v1/admin/users/${id}/block`)\nconst unblockUser = async (id) => await httpClient.patch(`/api/v1/admin/users/${id}/unblock`)\n\nconst UserService = {\n  loginUser,\n  getCurrentUser,\n  logOutUser,\n  getAllUsers,\n  approveUser,\n  rejectUser,\n  blockUser,\n  unblockUser\n};\n\nexport default UserService;\n","import { Box } from \"adminlte-2-react\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport * as yup from \"yup\";\r\n\r\nconst loginSchema = yup.object().shape({\r\n  username: yup.string().required(),\r\n  password: yup.string().required(),\r\n});\r\n\r\nconst LoginForm = ({ triggerLogin = async () => { }, history, ...rest }) => {\r\n  const _history = useHistory()\r\n  const [formErrors, setFormErrors] = useState({})\r\n  return (\r\n    <div className=\"login-box\" style={{ border: 'solid 1px #eee', paddingTop: 50 }}>\r\n      <div className=\"login-logo\">\r\n        <a href=\"/\">\r\n          <b>TMCS</b>\r\n          login\r\n        </a>\r\n      </div>\r\n      <div className=\"login-box-body\">\r\n        <Box type=\"primary\" title=\"Login to continue\">\r\n\r\n          <Formik\r\n            initialValues={{\r\n              username: \"\",\r\n              password: \"\",\r\n            }}\r\n            onSubmit={async (values) => {\r\n              const data = await triggerLogin(values, history || _history)\r\n              if (data?.errors){\r\n                setFormErrors(data.errors);\r\n              }\r\n            }}\r\n            validationSchema={loginSchema}\r\n            initialErrors={formErrors}\r\n          >\r\n            {({ errors, touched }) => (\r\n              <Form>\r\n\r\n                <div className=\"card-body\">\r\n                  <div className=\"mb-2\">\r\n                    <label htmlFor=\"email\" className=\"form-label\">\r\n                      username\r\n                    </label>\r\n                    <Field\r\n                      type=\"text\"\r\n                      autoComplete=\"off\"\r\n                      className={\r\n                        errors.username && touched.username\r\n                          ? \"form-control shadow-none is-invalid\"\r\n                          : \"form-control shadow-none\"\r\n                      }\r\n                      placholder=\"Enter username\"\r\n                      name=\"username\"\r\n                      id=\"username\"\r\n                    />\r\n                    {errors.username && touched.username && (\r\n                      <div className=\"invalid-feedback\">{errors.username}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"mb-2\">\r\n                    <label htmlFor=\"password\" className=\"form-label\">\r\n                      Password\r\n                    </label>\r\n                    <Field\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      autoComplete=\"off\"\r\n                      className={\r\n                        errors.password && touched.password\r\n                          ? \"form-control shadow-none is-invalid\"\r\n                          : \"form-control shadow-none\"\r\n                      }\r\n                      placholder=\"Enter password\"\r\n                      id=\"password\"\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                      <div className=\"invalid-feedback\">{errors.password}</div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <hr />\r\n                <div className=\"card-footer text-center\">\r\n                  <div className=\"d-flex flex-row-reverse\">\r\n                    <button type=\"submit\" className=\"btn btn-block rounded-0  btn-primary\">\r\n                      Submit\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Box>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default LoginForm;\r\n","import { userKEY } from \"src/slices/currentUserSlice\"\nimport LocalStorageHelper from \"./localStorageHelper\"\n\nexport const pushQueryParams = (history, params = {}, append = true, replace = false) => {\n    const queryParams = parseQueryParams(history)\n    params = append ? { ...queryParams, ...params } : params\n    const finalParams = {}\n    Object.keys(params).forEach(p => {\n        if (typeof params[p] !== 'undefined' && params[p] !== 'undefined' && params[p] !== 'null' && params[p] !== null) {\n            finalParams[p] = params[p]\n        }\n    })\n    replace ? history.replace({\n        pathname: history.location.pathname,\n        search: (new URLSearchParams(finalParams)).toString()\n    }) : history.push({\n        pathname: history.location.pathname,\n        search: (new URLSearchParams(finalParams)).toString()\n    })\n}\n\nexport const parseQueryParams = (history, key = null, defaultVal = null) => {\n    const params = {}\n    const p = new URLSearchParams(history.location.search)\n    p.forEach((v, k) => {\n        params[k] = v\n    })\n    if (key != null) {\n        return params[key] || defaultVal\n    }\n    return params\n}\n\nexport const getCurrentStateParam = (history, param = 'id') => {\n    const state = (history.location.state || {})\n    if (state && state[param]) {\n        return state[param]\n    }\n    return null\n}\n\nexport const isCurrentRoute = (history, matchingRouteName) => {\n    console.log(history, matchingRouteName)\n    return false\n}\n\nexport const navigateToPath = (history, path, state = {}, clearPrevious = false) => {\n\n    let pathname = path\n\n    Object.keys(state).forEach(key => {\n        pathname = pathname.replace(`:${key}`, state[key])\n    })\n\n    if (clearPrevious) {\n        history.replace({\n            pathname,\n            state\n        })\n    } else {\n        history.push({\n            pathname,\n            state\n        })\n    }\n}\n\nexport const navigateToHome = (history) => {\n    const params = parseQueryParams(history)\n    const path = (params['redirect'] || '/').replace(`${window.location.protocol}://${window.location.host}`, '')\n    navigateToPath(history, path.substring())\n}\n\nexport const navigateToSubPath = (history, subPath, clearPrevious = false) => {\n    const pathname = history.location.pathname + subPath\n    navigateToPath(history, pathname, clearPrevious)\n}\n\n\nexport const navigateToLogin = (route = '/login') => {\n    LocalStorageHelper.delete(userKEY)\n    window.location = route\n}\n","export const LOCATION_LIST_PAGE = '/admin/locations'\nexport const RANK_LIST_PAGE = '/admin/ranks'\nexport const BRANCH_LIST_PAGE = '/admin/branches'\nexport const LOGOUT_ROUTE = '/logout'\nexport const REGISTRATION_LIST_PAGE = '/admin/registrations'\nexport const NMS_LIST_PAGE = '/admin/nms-devices'\nexport const USER_LIST_PAGE = '/admin/users'\nexport const DASHBOARD_ROUTE = \"/\";\nexport const DEVICE_MAMAGEMENT_ROUTE = \"/admin/manage-devices\";\nexport const ONLINE_USERS_ROUTE = \"/admin/online-users\";\nexport const SUPER_USER_LIST_PAGE = \"/admin/super-users\";\nexport const BACKUPS_LIST = \"/admin/db-backups\";\nexport const REPORTS_LIST_PAGE = \"/admin/reports\";\nexport const SETTINGS_PAGE = \"/admin/settings\";\nexport const CONTACT_PAGE = \"/admin/contact-us\";\n\nexport const NAV_ITEMS = [\n  {\n    icon: \"fa-tachometer-alt\",\n    title: \"Dashboard\",\n    path: DASHBOARD_ROUTE\n  },\n  {\n    icon: \"fa-globe\",\n    title: \"Manage Locations\",\n\n    path: LOCATION_LIST_PAGE,\n  },\n  {\n    icon: \"fa-sort-numeric-up\",\n    title: \"Manage Ranks\",\n    path: RANK_LIST_PAGE\n  },\n  {\n    icon: \"fa-building\",\n    title: \"Manage Branches\",\n    path: BRANCH_LIST_PAGE\n  },\n  {\n    icon: \"fa-tasks\",\n    title: \"Registration Requests\",\n    path: REGISTRATION_LIST_PAGE,\n  },\n  {\n    icon: \"fa-user\",\n    title: \"Manage Users\",\n    path: USER_LIST_PAGE,\n  },\n  {\n    icon: \"fa-users\",\n    title: \"Current Users\",\n    color: \"green\",\n\n    path: ONLINE_USERS_ROUTE,\n  },\n\n  {\n    icon: \"fa-laptop\",\n    title: \"NMS\",\n    path: NMS_LIST_PAGE,\n  },\n  {\n    icon: \"fa-download\",\n    title: \"Database Backups\",\n\n    path: BACKUPS_LIST,\n  },\n  {\n    icon: \"fa-tools\",\n    title: \"Device Management\",\n\n    path: DEVICE_MAMAGEMENT_ROUTE,\n  },\n  {\n    icon: \"fa-users\",\n    title: \"CTMS - User Accounts\",\n\n    path: SUPER_USER_LIST_PAGE,\n  },\n  {\n    icon: \"fa-chart-line\",\n    title: \"Reports\",\n    path: REPORTS_LIST_PAGE,\n  },\n  {\n    icon: \"fa-cog\",\n    title: \"Configuration\",\n    path: SETTINGS_PAGE\n  },\n  {\n    icon: \"fa-phone-alt\",\n    title: \"Contact us\",\n    path: CONTACT_PAGE,\n  }\n];\n\nexport const USER_STATUSES = {\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  PENDING: 'PENDING',\n  DISABLED: 'DISABLED',\n  ACTIVE: 'ACTIVE'\n}\n\nexport const USER_ROLES = {\n  SUPERADMIN: 'SUPERADMIN',\n  ADMIN: 'ADMIN',\n  USER: 'USER',\n}\n\nexport const SETTINGS_CONFIG  = {\n  LANDLINE_SALES: 'landline_sales',\n  EMAIL_SALES: 'email_sales',\n  LANDLINE_SUPPORT: 'landline_support',\n  EMAIL_SUPPORT: 'email_support',\n  LOGO: 'logo',\n  SNMP_CHECK_INTERVAL: 'snmp_check_interval'\n}","import { Button } from \"adminlte-2-react\";\nimport React from \"react\";\n\nconst Dialog = ({\n  children = \"\",\n  title = \"Dialog\",\n  exists = true,\n  show = true,\n  showHeader = true,\n  acceptText = null,\n  cancelText = null,\n  canDismiss = true,\n  size = \"xl\",\n  bodyPadding = 2,\n  zIndex = 1050,\n  cancelDisabled = false,\n  successDisabled = false,\n  onSuccess = () => { },\n  onCancel = () => { },\n  onDismiss = () => { },\n}) => {\n  return (\n    exists && (\n      <div\n        className={show ? 'modal fade in': 'modal fade'}\n        tabIndex=\"-1\"\n        aria-hidden={show}\n        style={{ display: show ? \"block\" : \"none\", zIndex, overflow: 'auto' }}\n      >\n        <div className={`modal-dialog modal-${size}`}>\n          <div className=\"modal-content\">\n            {showHeader && (\n              <div className=\"modal-header\">\n                <h4 className=\"modal-title\">{title}\n                  {canDismiss && (\n                    <Button\n                      type=\"button\"\n                      className=\"close\"\n                      aria-label=\"Close\"\n                      onClick={onDismiss}\n                      icon=\"fa-times\"\n                    />\n                  )}\n                </h4>\n              </div>\n            )}\n            <div className={`modal-body p-${bodyPadding}`}>\n              {children}\n            </div>\n            {(cancelText || acceptText) && (\n              <div className=\"modal-footer\">\n                {cancelText && (\n                  <button\n                    disabled={cancelDisabled}\n                    className=\"btn rounded-0  btn-default\"\n                    onClick={onCancel}\n                  >\n                    {cancelText}\n                  </button>\n                )}\n                {acceptText && (\n                  <button\n                    disabled={successDisabled}\n                    className=\"btn rounded-0  btn-primary\"\n                    onClick={onSuccess}\n                  >\n                    {acceptText}\n                  </button>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default Dialog;\n","import { Col, Row, Button, ButtonGroup } from \"adminlte-2-react\";\nimport * as yup from \"yup\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport overlayFactory from 'react-bootstrap-table2-overlay';\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\nimport LoadingOverlay from \"react-loading-overlay\"\nimport Dialog from \"./Dialog\";\nimport EntityForm from \"./EntityForm\";\nimport { showGlobalModalNotification } from \"src/utils/storeHelper\";\nimport httpClient from \"src/utils/httpClient\";\nLoadingOverlay.propTypes = undefined\n\nconst MODE_EDIT = 'edit';\nconst MODE_ADD = 'add';\n\nconst DataGridComponent = ({\n    modalSize = 'xl',\n    keyField = \"id\",\n    entitySingle = 'record',\n    entityPlural = 'records',\n    columns = [],\n    hideIdOnEdit = false,\n    data = {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        limit: 100,\n        totalPages: 1,\n    },\n    remote = {\n        sort: true,\n        filter: true,\n        pagination: true,\n    },\n    defaultSorted = [\n        { dataField: 'id', order: 'asc' }\n    ],\n    showTotal = true,\n    beforeSave = (values) => { return values },\n    onTableChange = async (params) => { },\n    onDataUpdated = async (tableData) => { },\n    onDelete = (id) => { },\n    canAdd = true,\n    canDelete = true,\n    canEdit = true,\n    rowActionButtons = [],\n    globalActionButtons = [],\n    formOptions = {\n        fields: [],\n        validationSchema: null,\n        onSuccess: async (data) => { },\n    },\n    resource = null,\n    onFormShow = (row, mode) => {\n\n    },\n    actionColumnWidth = 200,\n    filterComponents = [],\n    ...rest\n}) => {\n    const [formErrors, setFormErrors] = useState({})\n    const [record, setCurrentRecord] = useState(null)\n    const [showFormDialog, setShowFormDialog] = useState(false)\n    const [selectedIds, setSelectedIds] = useState([])\n    const [loading, setLoading] = useState(false)\n    const [records, setRecords] = useState(data)\n    const fetchTableData = useCallback(async () => {\n        setFormErrors({})\n        if (resource) {\n            const params = parseQueryParams(rest.history)\n            const result = await httpClient.get(`${resource}`, { params })\n            if (result?.success) {\n                setRecords({\n                    results: result.data?.results || [],\n                    currentPage: result.data?.currentPage || 1,\n                    totalResults: result.data.totalResults || 0,\n                    limit: result.data?.limit || 100,\n                    totalPages: result.data?.totalPages || 1\n                })\n            } else {\n                setRecords({ ...data, results: [], totalResults: 0, limit: 100 })\n            }\n        }\n    }, [resource, data, rest.history])\n\n    const columnsWithActions = useMemo(() => {\n        const clms = columns.filter(clm => clm.dataField !== '_actions')\n        if (!(canEdit || canDelete || rowActionButtons.length > 0)) {\n            return clms;\n        }\n        clms.push({\n            dataField: '_actions',\n            isDummyField: true,\n            style: {\n                width: actionColumnWidth || 200,\n            },\n            text: 'Actions',\n            formatter: (cellContent, row) => {\n                return (\n                    <ButtonGroup>\n                        {rowActionButtons.map(actionButton => {\n                            actionButton.canShow = actionButton.canShow ? actionButton.canShow : () => true\n                            if (actionButton.canShow && actionButton.canShow(row)) {\n                                return <Button key={`action-${row.id}-${actionButton.text}`} className=\"mr-2\"\n                                    type={actionButton?.type || 'primary'}\n                                    icon={actionButton?.icon || 'gear'}\n                                    text={actionButton.text}\n                                    onClick={async () => {\n                                        await actionButton.onClick(row.id, row)\n                                        fetchTableData()\n                                    }}\n                                />\n                            }\n\n                        })}\n                        {canEdit && <Button className=\"mr-2\" type=\"primary\" text=\"Edit\" icon=\"fa-edit\" onClick={() => {\n                            pushQueryParams(rest.history, { id: row.id, mode: MODE_EDIT }, true)\n                            setCurrentRecord(row);\n                            setShowFormDialog(true)\n                            setFormErrors({})\n                        }} />}\n                        {canDelete && <Button className=\"mr-2\" type=\"danger\" onClick={async () => {\n                            if (resource) {\n                                const data = await httpClient.delete(`${resource}/${row.id}`)\n                                if (data?.success) {\n                                    showGlobalModalNotification({\n                                        success: true,\n                                        message: `${entitySingle} successfully deleted.`\n                                    })\n                                } else {\n                                    setFormErrors(data?.errors ?? {})\n                                }\n                            } else {\n                                await onDelete(row.id);\n                            }\n                            fetchTableData()\n                        }} text=\"Delete\" icon=\"fa-trash\" />\n                        }\n\n                    </ButtonGroup>\n                )\n            },\n        })\n        return clms\n    }, [columns, canDelete, canAdd, onDelete, rowActionButtons, rest.history])\n\n    const validationSchemaDynamic = useMemo(() => {\n        return formOptions.validationSchema || yup.object().shape({})\n    }, [formOptions.validationSchema]);\n\n    const fieldsDyanmic = useMemo(() => {\n        return formOptions.fields;\n    }, [formOptions.fields]);\n\n    const initialValues = useMemo(() => {\n        const values = {}\n        fieldsDyanmic.forEach(field => {\n            values[field.recordKey || field.name] = record ? (record[field.recordKey] || record[field.name] || field.default) || '' : (field.default || '')\n        })\n        values['id'] = record ? record.id : null\n        return values;\n    }, [record, fieldsDyanmic]);\n\n    const triggerSetCurrentRecord = () => {\n        const params = parseQueryParams(rest.history)\n        const mode = params['mode'] || ''\n        const id = params['id'] || null\n        const isAddEdit = mode === MODE_ADD || mode === MODE_EDIT\n        const currentRecord = (records.results || []).find(r => `${r.id}` === id)\n        setCurrentRecord(currentRecord)\n        setShowFormDialog(isAddEdit)\n    }\n\n    useEffect(() => {\n        fetchTableData();\n        triggerSetCurrentRecord();\n        const unlisten = rest.history.listen((...args) => {\n            if (args[1] === 'POP') {\n                fetchTableData()\n            }\n        })\n        return unlisten\n    }, [])\n\n    useEffect(() => {\n        triggerSetCurrentRecord();\n        onDataUpdated(records);\n    }, [showFormDialog, records])\n\n    useEffect(() => {\n        onFormShow(record, parseQueryParams(rest.history, 'mode'))\n    }, [record, rest.history])\n\n    return (\n        <React.Fragment>\n            {(canAdd || canEdit) && <Dialog size={modalSize} show={showFormDialog}\n                showHeader={true}\n                title={`${record ? `Editing ${entitySingle} ${!hideIdOnEdit ? `#${record.id}` : ''}` : `Adding ${entitySingle}`}`}\n                onDismiss={() => {\n                    setShowFormDialog(false)\n                    pushQueryParams(rest.history, { mode: null, id: null }, true, true)\n                }}>\n                <EntityForm\n                    entityPlural={entityPlural}\n                    entitySingle={entitySingle}\n                    formErrors={formErrors}\n                    fields={fieldsDyanmic}\n                    initialValues={initialValues}\n                    editMode={record ? true : false}\n                    onSubmit={async (values, { resetForm }) => {\n                        window.scrollTo(0, 0);\n                        values = beforeSave(values)\n                        let data\n                        if (resource) {\n                            data = values?.id ? await httpClient.put(`${resource}/${values.id}`, values) : await httpClient.post(resource, values)\n                        } else {\n                            data = await formOptions.onSuccess(values)\n                        }\n\n                        if (data?.success) {\n                            resetForm();\n                            setCurrentRecord(null);\n                            setShowFormDialog(false);\n                            pushQueryParams(rest.history, { mode: null, id: null }, true, true)\n                            onTableChange(parseQueryParams(rest.history))\n                            fetchTableData();\n                            showGlobalModalNotification({\n                                success: true,\n                                message: `${entitySingle} successfully ${values?.id ? 'updated' : 'created'}`\n                            })\n                        } else {\n                            setFormErrors(data?.errors ?? {})\n                        }\n\n                    }}\n                />\n            </Dialog>\n            }\n            <ToolkitProvider\n                keyField={keyField}\n                data={records.results || []}\n                columns={columnsWithActions}\n            >\n                {\n                    props => (\n                        <div>\n                            <br />\n                            <Row className=\"text-left\">\n                                <Col md={6}>\n                                    {filterComponents.map(e => e)}\n                                </Col>\n                                <Col md={6} className=\"text-right\">\n                                    <Button onClick={async () => {\n                                        setLoading(true)\n                                        fetchTableData()\n                                        await onTableChange(parseQueryParams(rest.history))\n                                        setLoading(false)\n                                    }} className=\"mr-2\" type=\"primary\" disabled={loading} text={loading ? \"Loading...\" : \"Refresh\"} icon=\"fa-redo\" />\n                                    {canAdd &&\n                                        <Button className=\"mr-2\" onClick={() => {\n                                            pushQueryParams(rest.history, { mode: MODE_ADD, id: undefined }, true)\n                                            setShowFormDialog(true)\n                                            setCurrentRecord(null);\n                                        }} type=\"success\" text={`Add ${entitySingle}`} icon=\"fa-plus-circle\" />\n                                    }\n                                    {globalActionButtons.map(actionButton => {\n                                        return <Button className=\"mr-2\"\n                                            type={actionButton.type}\n                                            icon={actionButton.icon}\n                                            text={actionButton.text}\n                                            onClick={async () => {\n                                                await actionButton.onClick(selectedIds)\n                                                fetchTableData();\n                                            }}\n                                        />\n                                    })}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <hr />\n                                </Col>\n                            </Row>\n                            <BootstrapTable\n                                {...props.baseProps}\n                                remote={remote}\n                                defaultSorted={defaultSorted}\n                                \n                                pagination={records.totalPages > 1 ? paginationFactory({\n                                    page: records.currentPage || 1,\n                                    sizePerPage: records.limit || 100,\n                                    totalSize: records.totalResults || records.results.length || 0,\n                                    sizePerPageList: [100, 200, 500],\n                                    paginationSize: records.totalResults || records.results.length || 0,\n                                    showTotal,\n                                }): null}\n                                loading={loading}\n                                onTableChange={async (type, _data) => {\n                                    const params = {\n                                        sortOrder: _data['sortOrder'],\n                                        sortBy: _data['sortField'],\n                                        page: _data['page'],\n                                        limit: _data['sizePerPage'],\n                                    }\n                                    pushQueryParams(rest.history, params)\n                                    fetchTableData();\n                                    setLoading(true)\n                                    await onTableChange(params)\n                                    setLoading(false)\n                                }}\n                                striped={true}\n                                selectRow={(globalActionButtons.length || canEdit || canDelete) ? {\n                                    mode: 'checkbox',\n                                    bgColor: '#eee',\n                                    selectColumnStyle: () => {\n                                        return {\n                                            width: 20\n                                        }\n                                    },\n                                    onSelectAll: (isSelected) => {\n                                        const selections = []\n                                        if (isSelected) {\n                                            (data.results || []).forEach(r => {\n                                                selections.push(selections)\n                                            })\n                                        }\n                                        setSelectedIds(selections)\n                                    },\n                                    onSelect: (row, isSelected) => {\n                                        const selections = selectedIds.filter(id => row.id !== id)\n                                        if (isSelected) {\n                                            selections.push(row.id)\n                                        }\n                                        setSelectedIds(selections)\n                                    }\n                                } : {\n                                    mode:'ROW_SELECT_DISABLED',\n                                    hideSelectColumn: true\n                                }}\n                                overlay={overlayFactory({\n                                    spinner: true,\n                                    styles: {\n                                        overlay: (base) => ({ ...base, background: 'rgba(0, 0, 0, 0.5)', position: 'absolute' })\n                                    }\n                                })}\n                                noDataIndication={() => <h5 className=\"text-center\">Sorry no {entityPlural} currently availble</h5>} />\n                        </div>\n                    )\n                }\n            </ToolkitProvider>\n        </React.Fragment>\n\n    )\n}\n\nexport default DataGridComponent;","import * as yup from \"yup\";\nimport { BranchActions } from \"src/slices/BranchSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\n\nconst BranchListView = ({\n  title = 'Branches',\n  description = 'here you can manage branches',\n  ...rest\n}) => {\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Branch\"}>\n      <Box type=\"primary\" title=\"Displaying branches\" icon=\"fa-building\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Branches\"\n              entitySingle=\"Branch\"\n              resource={`/api/v1/admin/branches`}\n              onDataUpdated={async (tableData) => {\n                BranchActions.setBranches(tableData)\n              }}\n              defaultSorted={\n                [{ dataField: 'id', order: 'asc' }]\n              }\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Branch ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'description',\n                  text: 'Description',\n                  sort: true,\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    {\n                      id: \"description\",\n                      name: \"description\",\n                      label: \"Branch Description\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    description: yup.string(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default BranchListView;\n","import * as yup from \"yup\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { LocationActions } from \"src/slices/LocationSlice\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\n\nconst LocationListView = ({\n  ...rest\n}) => {\n\n  const joinChar = ' » ';\n\n  const [level, setLevel] = useState(0)\n  const [segments, setSegments] = useState([])\n\n  const rowActionButtons = useMemo(() => {\n    if (level > 1) {\n      return []\n    }\n    return [{\n      icon: 'fa-link',\n      type: 'primary',\n      text: 'Sublocations',\n      onClick: (id, row) => {\n        const _level = level + 1\n        const _segments = [...segments, row.title]\n        setSegments(_segments)\n        setLevel(_level)\n        pushQueryParams(rest.history, { level: _level, locationId: id, segments: _segments.join(',') })\n      }\n    }]\n  }, [level, segments, rest.history])\n\n  useEffect(() => {\n    const _handler = () => {\n      const params = parseQueryParams(rest.history)\n      const segments = (params['segments'] || '').split(',').filter(segment => !!segment)\n      setLevel(parseInt(params['level'] || 0))\n      setSegments(segments)\n    }\n    _handler();\n    const unlisten = rest.history.listen(_handler)\n    return unlisten\n  }, [rest.history])\n\n  return (\n    <Content title={['Manage Locations'].concat(segments).join(joinChar)} subTitle={['here you can manage locations'].concat(segments).join(joinChar)} browserTitle={segments.join(joinChar)}>\n      <Box type=\"primary\" title={['Displaying locations'].concat(segments).join(joinChar)} icon=\"fa-globe\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              actionColumnWidth={320}\n              entityPlural={['Locations'].concat(segments).join(joinChar)}\n              entitySingle={['Location'].concat(segments).join(joinChar)}\n              resource={`/api/v1/admin/locations`}\n              onDataUpdated={async (tableData) => LocationActions.setLocations(tableData)}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Location ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'email',\n                  text: 'Email',\n                  sort: true,\n                }\n              ]}\n              rowActionButtons={rowActionButtons}\n              beforeSave={(values) => {\n                const params = parseQueryParams(rest.history)\n                values['locationId'] = params['locationId'] || null\n                return values\n              }}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    \n                    {\n                      id: \"email\",\n                      name: \"email\",\n                      label: \"Location Email\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    email: yup.string().email(),\n                    description: yup.string(),\n                  })\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default LocationListView;\n","import * as yup from \"yup\";\n\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { RankActions } from \"src/slices/RankSlice\";\n\nconst RankListView = ({\n  title = 'Ranks',\n  description = 'here you can manage ranks',\n  ...rest\n}) => {\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Rank\"}>\n      <Box type=\"primary\" title=\"Displaying ranks\" icon=\"fa-sort-numeric-up\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Ranks\"\n              entitySingle=\"Rank\"\n              defaultSorted={\n                [{ dataField: 'id', order: 'asc' }]\n              }\n              resource={`/api/v1/admin/ranks`}\n              onDataUpdated={async(tableData) => {\n                RankActions.setRanks(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Rank ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'description',\n                  text: 'Description',\n                  sort: true,\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    {\n                      id: \"description\",\n                      name: \"description\",\n                      label: \"Rank Description\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    description: yup.string(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\nexport default RankListView;\n","import httpClient from \"src/utils/httpClient\";\n\nconst rejectRegistration = async (id) => await httpClient.delete(`/api/v1/admin/registrations/${id}`);\nconst approveRegistration = async (id) => await httpClient.post(`/api/v1/admin/registrations/${id}`);\n\nconst RegistrationService = {\n  rejectRegistration,\n  approveRegistration,\n};\n\nexport default RegistrationService;\n","import { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport RegistrationService from \"src/services/RegistrationService\";\n\nconst STATUSES = {\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  PENDING: 'PENDING'\n}\n\nconst RegistrationListView = ({\n  title = 'Registrations',\n  description = 'here you can manage registrations',\n  ...rest\n}) => {\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Registration\"}>\n      <Box type=\"primary\" title=\"Displaying registrations\" icon=\"fa-user\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              actionColumnWidth={300}\n              entitySingle=\"Registration\"\n              entityPlural=\"Registrations\"\n              resource={`/api/v1/admin/registrations`}\n              rowActionButtons={[\n                {\n                  text: 'Approve',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === STATUSES.PENDING\n                  },\n                  onClick: async (id) => {\n                    await RegistrationService.approveRegistration(id)\n                  }\n                },\n                {\n                  text: 'Reject',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === STATUSES.PENDING\n                  },\n                  onClick: async (id) => {\n                    await RegistrationService.rejectRegistration(id)\n                  }\n                }\n              ]}\n              canAdd={false}\n              canEdit={false}\n              canDelete={false}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Registration ID',\n                  hidden: true,\n                }, {\n                  dataField: 'userName',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'First Name',\n                  sort: true,\n\n                },\n                {\n                  dataField: 'middlename',\n                  text: 'Middle Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'lastName',\n                  text: 'Last Name',\n                  sort: true,\n                },\n\n                {\n                  dataField: 'ip',\n                  text: 'IP',\n                },\n                {\n                  dataField: 'port',\n                  text: 'Port',\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\n\nexport default RegistrationListView;\n","const { default: httpClient } = require(\"src/utils/httpClient\");\n\nconst getLocationList = async () => {\n    const data = await httpClient.get(\"/api/v1/locations\");\n    const locations = data?.success ? data.data : []\n    return locations\n}\n\nconst getBranchesList = async () => {\n    const data = await httpClient.get(\"/api/v1/branches\");\n    return data?.success ? data.data : []\n}\n\n\nconst getRanksList = async () => {\n    const data = await httpClient.get(\"/api/v1/ranks\");\n    return data?.success ? data.data : []\n}\n\n\nconst createDatabaseBackup = async () => await httpClient.post(`/api/v1/admin/db-backups`)\nconst getDashboardSummary = async () => await httpClient.get(`/api/v1/admin/dashboard`)\nconst getNmsDevicesStatus = async () => await httpClient.get(`/api/v1/admin/nms-devices/status`)\n\nconst CommonServerice = {\n    getLocationList,\n    getBranchesList,\n    getRanksList,\n    createDatabaseBackup,\n    getDashboardSummary,\n    getNmsDevicesStatus\n}\nexport default CommonServerice\n","import * as yup from \"yup\";\n\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport CommonService from \"src/services/CommonService\";\nimport UserService from \"src/services/UserService\";\nimport { USER_STATUSES } from \"src/constants/global\";\n\nconst UserListView = ({\n  title = 'Users',\n  description = 'here you can manage users',\n  ...rest\n}) => {\n\n  const [locations, setLocations] = useState([])\n  const [branches, setBranches] = useState([])\n  const [ranks, setRanks] = useState([])\n  const [record, setRecord] = useState(null)\n  const [mode, setMode] = useState(null)\n  console.log(mode);\n\n  useEffect(() => {\n    (async () => {\n      setLocations(await CommonService.getLocationList())\n      setBranches(await CommonService.getBranchesList())\n      setRanks(await CommonService.getRanksList())\n    })();\n  }, [])\n\n  const fields = useMemo(() => {\n    const _fields = [\n      {\n        id: \"username\",\n        name: \"username\",\n        label: \"Username *\",\n        placeholder: \"Enter Username\",\n        type: \"text\",\n        cols: 6,\n      },\n      {\n        id: \"password\",\n        name: \"password\",\n        label: \"Password *\",\n        type: \"password\",\n        cols: 6,\n      },\n      {\n        id: \"firstName\",\n        name: \"firstName\",\n        label: \"First Name *\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"middleName\",\n        name: \"middleName\",\n        label: \"Middle Name\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"lastName\",\n        name: \"lastName\",\n        label: \"Last Name\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"locationId\",\n        name: \"locationId\",\n        label: \"Location *\",\n        type: \"select\",\n        options: locations.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"branchId\",\n        name: \"branchId\",\n        label: \"Branch *\",\n        type: \"select\",\n        options: branches.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"rankId\",\n        name: \"rankId\",\n        label: \"Rank *\",\n        type: \"select\",\n        options: ranks.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"ip\",\n        name: \"ip\",\n        label: \"IP\",\n        type: \"text\",\n        cols: 10,\n      },\n      {\n        id: \"port\",\n        name: \"port\",\n        label: \"Port\",\n        type: \"text\",\n        cols: 2,\n      },\n      {\n        id: \"addressLine1\",\n        name: \"addressLine1\",\n        label: \"Address Line 1\",\n        type: \"textarea\",\n        cols: 6,\n      },\n      {\n        id: \"addressLine2\",\n        name: \"addressLine2\",\n        label: \"Address Line 2\",\n        type: \"textarea\",\n        cols: 6,\n      },\n    ]\n    if (record && record?.id) {\n     // return _fields.filter(field => !['password', 'username'].includes(field.name))\n    }\n    return _fields\n  }, [locations, ranks, branches, record])\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Users\"}>\n      <Box type=\"primary\" title=\"Displaying users\" icon=\"fa-user\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              actionColumnWidth={300}\n              {...rest}\n              rowActionButtons={[\n                {\n                  text: 'Block',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.ACTIVE\n                  },\n                  onClick: async (id) => {\n                    await UserService.blockUser(id)\n                  }\n                },\n                {\n                  text: 'Unblock',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.DISABLED\n                  },\n                  onClick: async (id) => {\n                    await UserService.unblockUser(id)\n                  }\n                }\n              ]}\n              entitySingle=\"User\"\n              entityPlural=\"Users\"\n              resource={`/api/v1/admin/users`}\n              onFormShow={(row, mode) => {\n                setRecord(row)\n                setMode(mode)\n              }}\n              formOptions={\n                {\n                  fields,\n                  validationSchema: yup.object().shape({\n                    username: yup.string().required(),\n                    firstName: yup.string().required(),\n                    password: yup.string().required(),\n                    locationId: yup.string().required(),\n                    branchId: yup.string().required(),\n                    rankId: yup.string().required(),\n                  }),\n                }\n              }\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'User ID',\n                  hidden: true,\n                }, {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'branchId',\n                  text: 'Branch',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return branches.find(b => `${b.id}` === `${row.branchId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'rankId',\n                  text: 'Rank',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return ranks.find(r => `${r.id}` === `${row.rankId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'locationId',\n                  text: 'Location',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return locations.find(l => `${l.id}` === `${row.locationId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n                {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    return [row.ip, row.port].filter(x => !!x).join(\":\")\n                  }\n\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default UserListView;\n","import { Box, Col, Content, Infobox2, Row } from \"adminlte-2-react\";\nimport React, { useEffect, useState } from \"react\";\nimport CommonService from \"src/services/CommonService\";\n\n\nimport {\n  REGISTRATION_LIST_PAGE,\n  USER_LIST_PAGE,\n  NMS_LIST_PAGE,\n  DEVICE_MAMAGEMENT_ROUTE,\n  SUPER_USER_LIST_PAGE,\n  ONLINE_USERS_ROUTE} from \"src/constants/global\";\n\nconst DashboardView = ({\n  title = \"System Overview\",\n  description,\n  ...rest\n}) => {\n\n  const NAVIGATION_CARDS = {\n    totalUsers: { text: \"Total Users\", icon: \"fa-users\", to: USER_LIST_PAGE, color: 'orange' },\n    totalOnlineUsers: { text: \"Total Online Users\", icon: \"fa-users\", to: ONLINE_USERS_ROUTE, color: 'teal' },\n    totalSuperUsers: { text: \"Total Super Users\", icon: \"fa-users\", to: SUPER_USER_LIST_PAGE, color: 'purple' },\n    totalNmsDevices: { text: \"Total Nms Monitored Devices\", icon: \"fa-laptop\", to: NMS_LIST_PAGE, color: 'purple' },\n    totalDevices: { text: \"Total devices in directory\", icon: \"fa-laptop\", to: DEVICE_MAMAGEMENT_ROUTE, color: 'orange' },\n    totalPendingRequests: { text: \"Pending registration requests\", icon: \"fa-tasks\", to: REGISTRATION_LIST_PAGE, color: 'teal' }\n  }\n\n  const [summary, setSummary] = useState({\n    totalUsers: 0,\n    totalOnlineUsers: 0,\n    totalSuperUsers: 0,\n    totalNmsDevices: 0,\n    totalDevices: 0,\n    totalPendingRequests: 0\n  })\n\n  useEffect(() => {\n    (async () => {\n      const data = await CommonService.getDashboardSummary()\n      data?.data && setSummary(data.data)\n    })()\n  }, [])\n\n  return (\n\n    <Content title={[title]} subTitle={description} browserTitle={title}>\n        <Row>\n          {Object.keys(NAVIGATION_CARDS).map((key) => {\n            const card = NAVIGATION_CARDS[key]\n            return (\n              <Col key={key} md={4}>\n                <Box color={card.color} type=\"success\" icon={card.icon}>\n                  <Infobox2 title={summary[key] || 0} {...card} />\n                </Box>\n              </Col>\n            );\n          })}\n        </Row>\n    </Content>\n  );\n};\n\n\nexport default DashboardView","import { Callout } from \"adminlte-2-react\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { dismissGlobalError } from \"src/utils/storeHelper\";\nimport Dialog from \"./Dialog\";\n\nconst GlobalToast = ({\n    globalMessage = {}\n}) => {\n    if (!globalMessage || !globalMessage.message) {\n        return <React.Fragment />\n    }\n    return (\n        <Dialog\n            canDismiss={true}\n            title={''}\n            size='xl'\n            show={globalMessage.message}\n            zIndex={9999}\n            onDismiss={() => {\n                dismissGlobalError();\n            }}>\n            <Callout className=\"rounded-0\" title={globalMessage.title}\n                type={globalMessage.type}>{globalMessage.message}</Callout>\n        </Dialog>\n    )\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        globalMessage: state.globalState?.globalMessage || {}\n    };\n};\n\n\nexport default connect(mapStateToProps, null)(GlobalToast);\n","import * as yup from \"yup\";\nimport { NmsDeviceActions } from \"src/slices/NmsDeviceSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useEffect, useState } from \"react\";\nimport CommonServerice from \"src/services/CommonService\";\nimport { connect } from \"react-redux\";\nimport { SETTINGS_CONFIG } from \"src/constants/global\";\n\nconst NmsDeviceListView = ({\n  title = 'Manage NMS Devices',\n  description = 'here you can manage devices',\n  settings = [],\n  ...rest\n}) => {\n  const [deviceStatus, setDeviceStatus] = useState({})\n  const [checkInterval, setCheckInterval] = useState(5000)\n\n  useEffect(() => {\n    const interval = settings.find(s => s.name === SETTINGS_CONFIG.SNMP_CHECK_INTERVAL)?.value || 5\n    setCheckInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const data = await CommonServerice.getNmsDevicesStatus()\n      data?.success && setDeviceStatus(data.data)\n    }, checkInterval * 1000)\n    return () => clearInterval(interval)\n  }, [checkInterval])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={title}>\n      <Box type=\"primary\" title=\"Displaying devices\" icon=\"fa-laptop\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Devices\"\n              entitySingle=\"Device\"\n              resource={`/api/v1/admin/nms-devices`}\n              onDataUpdated={async (tableData) => {\n                NmsDeviceActions.setNmsDevices(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Device ID',\n                  hidden: true,\n                }, {\n                  dataField: 'name',\n                  text: 'Name',\n                  sort: true,\n                }, {\n                  dataField: 'ip',\n                  text: 'IP',\n                  formatter: (c, row) => {\n                    let address = 'http://'+ row['ip'] + (row['port'] ? `:${row['port']}`: '') \n                    return <a href={address}>{address}</a>\n                  }\n                },\n                {\n                  dataField: 'port',\n                  text: 'Port',\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  formatter: (c, row) => {\n                    return deviceStatus[row.ip]?.isOnline ? <strong style={{color: '#0f0'}}>Online</strong>: <strong style={{color: '#f00'}}>Offline</strong>\n                  }\n                },\n                {\n                  dataField: 'sysName',\n                  text: 'Device System Name',\n                  width:100,\n                  formatter: (c, row) => {\n                    const str = deviceStatus[row.ip]?.systemName\n                    try{\n                      return atob(str).split(\",\").join(\"\\n\")\n                    }catch(e){\n                      return \"Unknown\"\n                    }\n                  }\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"ip\",\n                      name: \"ip\",\n                      label: \"IP\",\n                      type: \"text\",\n                      cols: 10,\n                    },\n                    {\n                      id: \"port\",\n                      name: \"port\",\n                      label: \"Port\",\n                      type: \"text\",\n                      cols: 2,\n                    },\n                    {\n                      id: \"name\",\n                      name: \"name\",\n                      label: \"Device Name\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    ip: yup.string().required(),\n                    name: yup.string().required(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    settings: state.globalState?.settings || []\n  };\n};\n\nexport default connect(mapStateToProps, null)(NmsDeviceListView);\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport CommonServerice from \"src/services/CommonService\";\nimport { pushQueryParams } from \"src/utils/routerHelper\";\n\nconst { default: EntityForm } = require(\"../EntityForm\")\n\nconst LocationFilter = ({\n    ...rest\n}) => {\n    console.log(rest)\n    const [locations, setLocations] = useState([])\n    useEffect(() => {\n        (async () => {\n            setLocations(await CommonServerice.getLocationList())\n        })();\n    }, [])\n\n    return (\n        <EntityForm\n        hideSubmit={true}\n        fields={[\n            {\n                id: 'location_filter',\n                name: 'location_filter',\n                label: 'Filter by Location',\n                type: 'select',\n                cols: 4,\n                hideLabel: true,\n                onChange: (e) => {\n                    const value = e.nativeEvent.target.value\n                    pushQueryParams(rest.history, {\n                        locationId: value || null\n                    }, true)\n                },\n                options: locations.map(l => {\n                    return {\n                        key: l.id,\n                        value: l.title\n                    }\n                })\n            }\n        ]}\n        />\n    )\n}\n\nexport default LocationFilter","import * as yup from \"yup\";\nimport { DeviceActions } from \"src/slices/DeviceSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport CommonService from \"src/services/CommonService\";\nimport { useEffect, useState } from \"react\";\nimport LocationFilter from \"src/components/filters/LocationFilter\";\n\nconst DeviceListView = ({\n  title = 'Manage Devices',\n  description = 'here you can manage devices directory',\n  ...rest\n}) => {\n\n  const [locations, setLocations] = useState([])\n  useEffect(() => {\n    (async () => {\n      setLocations(await CommonService.getLocationList())\n    })();\n  }, [])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={title}>\n      <Box type=\"primary\" title=\"Displaying devices\" icon=\"fa-tools\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Devices\"\n              entitySingle=\"Device\"\n              resource={`/api/v1/admin/devices`}\n              filterComponents={[<LocationFilter history={rest.history} key={'location_filter'} />]}\n              onDataUpdated={async (tableData) => {\n                DeviceActions.setDevices(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Device ID',\n                  hidden: true,\n                },{\n                  dataField: 'name',\n                  text: 'Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'locationId',\n                  text: 'Location',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return locations.find(l => `${l.id}` === `${row.locationId}`)?.title || '-'\n                  }\n                },\n                 {\n                  dataField: 'ip',\n                  text: 'IP',\n                  sort: true,\n                  formatter: (c, row) => {\n                    let address = 'http://'+ row['ip'] + (row['port'] ? `:${row['port']}`: '') \n                    return <a href={address}>{address}</a>\n                  }\n                },\n\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"ip\",\n                      name: \"ip\",\n                      label: \"IP\",\n                      type: \"text\",\n                      cols: 10,\n                    },\n                    {\n                      id: \"port\",\n                      name: \"port\",\n                      label: \"Port\",\n                      type: \"text\",\n                      cols: 2,\n                    },\n                    {\n                      id: \"name\",\n                      name: \"name\",\n                      label: \"Device Name\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    {\n                      id: \"locationId\",\n                      name: \"locationId\",\n                      label: \"Location *\",\n                      type: \"select\",\n                      options: locations.map(l => {\n                        return {\n                          key: l.id,\n                          value: l.title\n                        }\n                      }),\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    ip: yup.string().required(),\n                    name: yup.string().required(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default DeviceListView;\n","import { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useMemo } from \"react\";\nimport UserService from \"src/services/UserService\";\nimport { USER_ROLES, USER_STATUSES } from \"src/constants/global\";\n\nconst AdminListView = ({\n  title = 'Super Users',\n  description = 'here you can manage super users',\n  ...rest\n}) => {\n\n  const fields = useMemo(() => {\n    const _fields = [\n      {\n        id: \"username\",\n        name: \"username\",\n        label: \"Username *\",\n        placeholder: \"Enter Username\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"password\",\n        name: \"password\",\n        label: \"Password *\",\n        type: \"password\",\n        cols: 4,\n      },\n      {\n        id: \"role\",\n        name: \"role\",\n        label: \"Role *\",\n        type: \"select\",\n        cols: 4,\n        options: [USER_ROLES.ADMIN, USER_ROLES.SUPERADMIN].map(role => {\n          return {\n            key: role,\n            value: role\n          }\n        })\n      },\n      {\n        id: \"firstName\",\n        name: \"firstName\",\n        label: \"First Name *\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"middleName\",\n        name: \"middleName\",\n        label: \"Middle Name\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"lastName\",\n        name: \"lastName\",\n        label: \"Last Name\",\n        type: \"text\",\n        cols: 4,\n      },\n    ]\n    return _fields\n  }, [])\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage CTMS Users\"}>\n      <Box type=\"primary\" title=\"Displaying CTMS users\" icon=\"fa-users\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              actionColumnWidth={200}\n              {...rest}\n              canDelete={false}\n              rowActionButtons={[\n                {\n                  text: 'Block',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.ACTIVE\n                  },\n                  onClick: async (id) => {\n                    await UserService.blockUser(id)\n                  }\n                },\n                {\n                  text: 'Unblock',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.DISABLED\n                  },\n                  onClick: async (id) => {\n                    await UserService.unblockUser(id)\n                  }\n                }\n              ]}\n              entitySingle=\"Super User\"\n              entityPlural=\"Super Users\"\n              resource={`/api/v1/admin/superusers`}\n              formOptions={{\n                fields\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'User ID',\n                  hidden: true,\n                }, {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'role',\n                  text: 'Role',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default AdminListView;\n","import { format, parseISO } from \"date-fns\"\n\nexport const humanFriendlyDateFormat = (dateStrIso, defaultFormatStr = 'E do MMM, yyyy hh:mm a') => {\n    return format(parseISO(dateStrIso), defaultFormatStr)\n}\n\nexport const formatBytesToString = (bytes) => {\n    if (bytes < 1024) {\n        return `${bytes} bytes`\n    }\n    if (bytes > 1024 && bytes < 1024 * 1024) {\n        return `${(bytes / 1024).toFixed(3)} KB`\n    }\n    if (bytes > 1024 * 1024 && bytes < 1024 * 1024 * 1024) {\n        return `${(bytes / (1024 * 1024)).toFixed(3)} MB`\n    }\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(3)} GB`\n}","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst OnLineUsersView = ({\n  title = 'Current Users',\n  description = 'here you can see currently active users',\n  ...rest\n}) => {\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Current Users\"}>\n      <Box type=\"success\" title=\"Displaying current users\" icon=\"fa-users\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              canAdd={false}\n              canEdit={false}\n              canDelete={false}\n              {...rest}\n              entitySingle=\"User\"\n              entityPlural=\"Users\"\n              resource={`/api/v1/admin/users/online`}\n              columns={[\n                {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n                {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    return [row.ip, row.port].filter(x => !!x).join(\":\")\n                  }\n\n                },\n                {\n                  dataField: 'lastVisited',\n                  text: 'Last Visited',\n                  formatter: (c, row) => {\n                    return humanFriendlyDateFormat(row['lastVisited'])\n                  }\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default OnLineUsersView;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport CommonService from \"src/services/CommonService\";\nimport { formatBytesToString, humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst BackupsListView = ({\n    title = 'Database backups',\n    description = 'here you can see currently active users',\n    ...rest\n}) => {\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Database backups\"}>\n            <Box type=\"success\" title=\"Displaying latest 100 backup files\" icon=\"fa-download\">\n                <Row>\n                    <Col md={12}>\n                        <DataGridComponent\n                            modalSize=\"lg\"\n                            canAdd={false}\n                            canEdit={false}\n                            canDelete={false}\n                            {...rest}\n                            entitySingle=\"Backup\"\n                            entityPlural=\"Backups\"\n                            resource={`/api/v1/admin/db-backups`}\n                            globalActionButtons={[\n                                {\n                                    text: 'Create Backup',\n                                    icon: 'fa-plus',\n                                    type: 'success',\n                                    onClick: async () => {\n                                        await CommonService.createDatabaseBackup()\n                                    }\n                                },]\n                            }\n                            columns={[\n                                {\n                                    dataField: 'filename',\n                                    text: 'Backup file name',\n                                },\n                                {\n                                    dataField: 'size',\n                                    text: 'Size',\n                                    formatter: (c, row) => {\n                                        return formatBytesToString(row['size'])\n                                    }\n                                }, {\n                                    dataField: 'createdOn',\n                                    text: 'Created',\n                                    formatter: (c, row) => {\n                                        return humanFriendlyDateFormat(row['createdOn'])\n                                    }\n                                },\n                            ]}\n                        />\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default BackupsListView;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst ReportListView = ({\n    title = 'Reports',\n    description = 'here you can see various activity by users',\n    ...rest\n}) => {\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Reports\"}>\n            <Box type=\"success\" title=\"Displaying activity reports\" icon=\"fa-chart-line\">\n                <Row>\n                    <Col md={12}>\n                        <DataGridComponent\n                            modalSize=\"lg\"\n                            canAdd={false}\n                            canEdit={false}\n                            canDelete={false}\n                            {...rest}\n                            entitySingle=\"User\"\n                            entityPlural=\"Users\"\n                            resource={`/api/v1/admin/reports`}\n                            columns={[\n                                {\n                                    dataField: 'entity',\n                                    text: 'Entity',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return <strong>{`${row['entity']}`.toUpperCase()}</strong>\n                                    },\n                                },\n                                {\n                                    dataField: 'entityAction',\n                                    text: 'Action',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return row['entityAction'].split('_').join(\" \")\n                                    },\n                                },\n                                {\n                                    dataField: 'modifiedById',\n                                    text: 'Action Taken By',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return row['modifiedById'] || '-'\n                                    },\n                                },\n                                {\n                                    dataField: 'additionalInfo',\n                                    text: 'Comments',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return `${row['additionalInfo']}`\n                                    },\n                                },\n                                {\n                                    dataField: 'createdAt',\n                                    text: 'Action Performed on',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return `${humanFriendlyDateFormat(row['createdAt'])}`\n                                    },\n                                }\n                            ]}\n                        />\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default ReportListView;\n","import httpClient from \"src/utils/httpClient\";\n\nconst getWebsiteSettings = async () => await httpClient.get(\"/api/v1/admin/settings\");\nconst saveWebsiteSetting = async (settingData) => await httpClient.put(\"/api/v1/admin/settings\", settingData);\n\nconst SettingService = {\n  getWebsiteSettings,\n  saveWebsiteSetting\n};\n\nexport default SettingService;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useMemo, useState } from \"react\";\nimport SettingService from \"src/services/SettingService\";\nimport PhotoThumb from \"src/components/PhotoThumb\";\nimport { connect } from \"react-redux\";\nimport { GlobalActions } from \"src/slices/globalSlice\";\n\nconst SettingsListView = ({\n  title = 'Configurations',\n  description = 'here you can manage configurations',\n  triggerGetSettings,\n  ...rest\n}) => {\n\n  const [settings, setSettings] = useState([])\n  const [record, setCurrentRecord] = useState(null)\n\n  const fields = useMemo(() => {\n    if (record) {\n      return settings.filter(setting => setting.id === record.id)\n    }\n    return []\n  }, [record, settings])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Configuration\"}>\n      <Box type=\"primary\" title=\"Displaying configurations\" icon=\"fa-cog\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              hideIdOnEdit={true}\n              entityPlural=\"Configurations\"\n              entitySingle=\"Configuration\"\n              canAdd={false}\n              canEdit={true}\n              canDelete={false}\n              resource={`/api/v1/admin/settings`}\n              onFormShow={(row) => {\n                setCurrentRecord(row)\n              }}\n              onDataUpdated={(data) => {\n                triggerGetSettings()\n                setSettings(data.results)\n              }}\n              columns={[\n                {\n                  dataField: 'label',\n                  text: 'Setting Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'value',\n                  text: 'Setting Value',\n                  sort: true,\n                  formatter: (c, row) => {\n                    if (row.type === 'upload') {\n                      return <PhotoThumb border={false} width={50} height={50} url={row.value} />\n                    }\n                  }\n                }\n              ]}\n              formOptions={\n                {\n                  fields\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    triggerGetSettings: async () => {\n      const data = await SettingService.getWebsiteSettings()\n      data?.success && dispatch(GlobalActions.setWebsiteSettings(data.data))\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SettingsListView);\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport { useEffect, useState } from \"react\";\nimport { SETTINGS_CONFIG } from \"src/constants/global\";\nimport SettingService from \"src/services/SettingService\";\n\nconst READ_SETTINGS = [\n    SETTINGS_CONFIG.EMAIL_SALES,\n    SETTINGS_CONFIG.LANDLINE_SALES,\n    SETTINGS_CONFIG.LANDLINE_SUPPORT,\n    SETTINGS_CONFIG.EMAIL_SUPPORT\n]\nconst ContactUsView = ({\n    title = 'Contact Us',\n    description = 'contact information',\n    ...rest\n}) => {\n    const [settings, setSettings] = useState([])\n    useEffect(() => {\n        (async () => {\n            const data = await SettingService.getWebsiteSettings()\n            if (data?.success && data?.data?.results) {\n                const _settings = (data.data.results || []).filter(setting => READ_SETTINGS.includes(setting.name))\n                setSettings(_settings)\n            }\n        })()\n    }, [])\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Contact us\"}>\n            <Box type=\"success\" title=\"Displaying contact information\" icon=\"fa-phone-alt\">\n                <Row>\n                    <Col md={12}>\n                        <table className=\"table table-bordred table-striped\">\n                            <tbody>\n                            {settings.map((setting) => {\n                                return (\n                                    <tr>\n                                        <td>{setting.label}</td>\n                                        <td>{setting.value || setting.default}</td>\n                                    </tr>\n                                );\n                            })}\n                            </tbody>\n                        </table>\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default ContactUsView;\n","import { connect } from \"react-redux\";\r\nimport UserService from \"src/services/UserService\";\r\nimport { CurrentUserActions } from \"src/slices/currentUserSlice\";\r\nimport AdminLTE, { Navbar, Sidebar, } from \"adminlte-2-react\";\r\nimport LoginForm from \"src/components/LoginForm\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { navigateToLogin } from \"src/utils/routerHelper\";\r\nimport {\r\n  BRANCH_LIST_PAGE,\r\n  LOCATION_LIST_PAGE,\r\n  NAV_ITEMS,\r\n  RANK_LIST_PAGE,\r\n  REGISTRATION_LIST_PAGE,\r\n  USER_LIST_PAGE,\r\n  DASHBOARD_ROUTE,\r\n  LOGOUT_ROUTE,\r\n  NMS_LIST_PAGE,\r\n  DEVICE_MAMAGEMENT_ROUTE,\r\n  SUPER_USER_LIST_PAGE,\r\n  ONLINE_USERS_ROUTE,\r\n  BACKUPS_LIST,\r\n  REPORTS_LIST_PAGE,\r\n  SETTINGS_PAGE,\r\n  CONTACT_PAGE,\r\n  SETTINGS_CONFIG\r\n} from \"src/constants/global\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport BranchListView from \"src/modules/branches/views/BranchListView\";\r\nimport LocationListView from \"src/modules/locations/views/LocationListView\";\r\nimport RankListView from \"src/modules/ranks/views/RankListView\";\r\nimport RegistrationListView from \"src/modules/registrations/views/RegistrationListView\";\r\nimport UserListView from \"src/modules/users/UserListView\";\r\nimport DashboardView from \"src/modules/dashboard/views/DashboardView\";\r\nimport GlobalToast from \"src/components/GlobalToast\";\r\nimport NmsDeviceListView from \"src/modules/nms-devices/views/NmsDevicesListView\";\r\nimport DeviceListView from \"src/modules/device-directory/views/DevicesListView\";\r\nimport AdminListView from \"src/modules/users/AdminListView\";\r\nimport OnLineUsersView from \"src/modules/users/OnlineUsersView\";\r\nimport BackupsListView from \"src/modules/backups/BackupsListView\";\r\nimport ReportListView from \"src/modules/reports/ReportListView\";\r\nimport SettingsListView from \"src/modules/settings/SettingsListView\";\r\nimport ContactUsView from \"src/modules/contact_us/ContactUsView\";\r\nimport { format } from \"date-fns\";\r\nimport SettingService from \"src/services/SettingService\";\r\nimport { GlobalActions } from \"src/slices/globalSlice\";\r\n\r\nconst { Entry } = Navbar\r\n\r\nconst Footer = () => {\r\n  const title = `©️ ${format(new Date(), 'yyyy')} MCIL. All Rights Reserved.`\r\n  return (\r\n    <div className=\"text-center\" style={{ color: '#444', padding: \"15px 0\", margin: 0, marginLeft: 200, background: '#eee', borderTop: 'solid 1px #ccc' }}>\r\n      <p><strong>{title}</strong></p>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Layout = ({ \r\n  triggerLogin,\r\n  triggerGetCurrentUser,\r\n  triggerGetSettings,\r\n  currentUser,\r\n  settings\r\n}) => {\r\n  const [logo, setLogo] = useState('/default_logo.png')\r\n  useEffect(() => {\r\n    triggerGetCurrentUser()\r\n    triggerGetSettings()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const l = settings.find(setting => setting.name === SETTINGS_CONFIG.LOGO)?.value || '/default_logo.png'\r\n    setLogo(l)\r\n  },[settings])\r\n\r\n  useEffect(() => {\r\n      setTimeout(() => {\r\n        const eleme = document.querySelector('a.logo')\r\n        eleme && (eleme.style.background = `url(${logo})`)\r\n      }, 200)\r\n  },[logo])\r\n\r\n  const isLoggedIn = !!currentUser\r\n  if (!isLoggedIn) {\r\n    return (\r\n      <BrowserRouter>\r\n        <GlobalToast />\r\n        <LoginForm triggerLogin={triggerLogin} />\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <GlobalToast />\r\n      <AdminLTE footer={<Footer />} theme=\"black\" title={[]}>\r\n        <Navbar.Core>\r\n          <Entry to={LOGOUT_ROUTE} labelValue=\"Logout\" icon=\"fa-power-off\" labelType=\"danger\" onClick={() => navigateToLogin()} />\r\n        </Navbar.Core>\r\n        <Sidebar.Core>\r\n          {\r\n            NAV_ITEMS.map((item, index) => {\r\n              if (item.items && item.items.length > 0) {\r\n                return (<Sidebar.Item onClick={item.onClick} key={index} icon={item.icon} text={item.title} to={item.path} color={item.color ?? 'gray'}>\r\n                  {(item.items || []).map((childItem, childIndex) => {\r\n                    return <Sidebar.Item onClick={childItem.onClick} key={`${index}-child-${childIndex}`} icon={childItem.icon} text={childItem.title} to={childItem.path} color={childItem.color ?? 'gray'} />\r\n                  })}\r\n                </Sidebar.Item>)\r\n              }\r\n              return <Sidebar.Item onClick={item.onClick} key={`${index}`} icon={item.icon} text={item.title} to={item.path} color={item.color ?? 'gray'} />\r\n            })\r\n          }\r\n        </Sidebar.Core>\r\n        <BranchListView path={BRANCH_LIST_PAGE} exact={true} />\r\n        <LocationListView path={LOCATION_LIST_PAGE} exact={true} />\r\n        <RankListView path={RANK_LIST_PAGE} exact={true} />\r\n        <RegistrationListView path={REGISTRATION_LIST_PAGE} exact={true} />\r\n        <UserListView path={USER_LIST_PAGE} exact={true} />\r\n        <DashboardView path={DASHBOARD_ROUTE} exact={true} />\r\n        <NmsDeviceListView path={NMS_LIST_PAGE} exact={true} />\r\n        <DeviceListView path={DEVICE_MAMAGEMENT_ROUTE} exact={true} />\r\n        <AdminListView path={SUPER_USER_LIST_PAGE} exact={true} />\r\n        <OnLineUsersView path={ONLINE_USERS_ROUTE} exact={true} />\r\n        <BackupsListView path={BACKUPS_LIST} exact={true} />\r\n        <ReportListView path={REPORTS_LIST_PAGE} exact={true} />\r\n        <SettingsListView path={SETTINGS_PAGE} exact={true} />\r\n        <ContactUsView path={CONTACT_PAGE} exact={true} />\r\n      </AdminLTE>\r\n    </React.Fragment>\r\n\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentUser: state.currentUserState?.currentUser || null,\r\n    settings: state.globalState?.settings || null\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    triggerLogin: async ({ username, password }, history) => {\r\n      const data = await UserService.loginUser(username, password);\r\n      data?.success && dispatch(CurrentUserActions.setUserState(data.data));\r\n    },\r\n    triggerGetCurrentUser: async () => {\r\n      const data = await UserService.getCurrentUser()\r\n      data?.success && dispatch(CurrentUserActions.setCurrentUser(data.data))\r\n    },\r\n    triggerGetSettings: async () => {\r\n      const data = await SettingService.getWebsiteSettings()\r\n      data?.success && dispatch(GlobalActions.setWebsiteSettings(data.data))\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Layout from \"./layouts\";\nimport store from \"./store/store\";\nimport { Provider } from \"react-redux\";\nimport 'react-quill/dist/quill.snow.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'src/assets/style.css'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.Fragment>\n      <Layout />\n    </React.Fragment>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","const LocalStorageHelper = {\n  store: (key, value) => {\n    if (key && value) {\n      window.localStorage.setItem(key, JSON.stringify(value));\n    }\n  },\n  get: (key) => {\n    if (key) {\n        let value = window.localStorage.getItem(key);\n        try{\n            return JSON.parse(value);\n        }catch(e){\n            return value || null\n        }\n    }\n  },\n  delete: (key) => {\n      if(key){\n         localStorage.removeItem(key);\n      }\n  }\n};\n\nexport default LocalStorageHelper\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: RegistrationReducer, actions: RegistrationActions } = createSlice(\n  {\n    name: \"registrationSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n    },\n    reducers: {\n      setRegistrations: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: UserReducer, actions: UserActions } = createSlice(\n  {\n    name: \"userSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n    },\n    reducers: {\n      setUsers: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport thunk from \"redux-thunk\";\r\nimport { RegistrationReducer } from \"src/slices/RegistrationSlice\";\r\nimport { RankReducer } from \"src/slices/RankSlice\";\r\nimport { BranchReducer } from \"src/slices/BranchSlice\";\r\nimport { LocationReducer } from \"src/slices/LocationSlice\";\r\nimport { GlobalReducer } from \"src/slices/globalSlice\";\r\nimport { CurrentUserReducer } from \"src/slices/currentUserSlice\";\r\nimport { NmsDeviceReducer } from \"src/slices/NmsDeviceSlice\";\r\nimport { DeviceReducer } from \"src/slices/DeviceSlice\";\r\nimport { UserReducer as UserManagementReducer } from \"src/slices/UserSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    globalState: GlobalReducer,\r\n    currentUserState: CurrentUserReducer,\r\n    rankState: RankReducer,\r\n    branchState: BranchReducer,\r\n    locationState: LocationReducer,\r\n    registrationState: RegistrationReducer,\r\n    nmsState: NmsDeviceReducer,\r\n    deviceState: DeviceReducer,\r\n    userState: UserManagementReducer\r\n  },\r\n  middleware: [thunk],\r\n});\r\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: RankReducer, actions: RankActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      rank: null,\n    },\n    reducers: {\n      setRanks: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: BranchReducer, actions: BranchActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      branch: null,\n    },\n    reducers: {\n      setBranches: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n"],"sourceRoot":""}