{"version":3,"sources":["constants/global.js","slices/RankSlice.js","slices/BranchSlice.js","slices/LocationSlice.js","slices/NmsDeviceSlice.js","slices/DeviceSlice.js","components/PhotoThumb.js","utils/httpClient.js","services/UploadService.js","components/EntityForm.js","utils/commonHelper.js","utils/storeHelper.js","slices/globalSlice.js","slices/currentUserSlice.js","services/UserService.js","components/LoginForm.js","utils/routerHelper.js","components/Dialog.js","components/DataGridComponent.js","modules/branches/views/BranchListView.js","modules/locations/views/LocationListView.js","modules/ranks/views/RankListView.js","services/RegistrationService.js","modules/registrations/views/RegistrationListView.js","services/CommonService.js","modules/users/UserListView.js","modules/dashboard/views/DashboardView.js","components/GlobalToast.js","modules/nms-devices/views/NmsDevicesListView.js","components/filters/LocationFilter.js","components/filters/ClearFilter.js","modules/device-directory/views/DevicesListView.js","modules/users/AdminListView.js","modules/users/OnlineUsersView.js","modules/backups/BackupsListView.js","components/filters/DateFilter.js","modules/reports/ReportListView.js","services/SettingService.js","modules/settings/SettingsListView.js","modules/contact_us/ContactUsView.js","layouts/index.js","index.js","utils/localStorageHelper.js","slices/RegistrationSlice.js","slices/UserSlice.js","store/store.js"],"names":["LOCATION_LIST_PAGE","RANK_LIST_PAGE","BRANCH_LIST_PAGE","LOGOUT_ROUTE","REGISTRATION_LIST_PAGE","NMS_LIST_PAGE","USER_LIST_PAGE","DASHBOARD_ROUTE","DEVICE_MAMAGEMENT_ROUTE","ONLINE_USERS_ROUTE","SUPER_USER_LIST_PAGE","BACKUPS_LIST","REPORTS_LIST_PAGE","SETTINGS_PAGE","CONTACT_PAGE","NAV_ITEMS","icon","title","path","color","USER_STATUSES","APPROVED","REJECTED","PENDING","DISABLED","ACTIVE","USER_ROLES","SUPERADMIN","ADMIN","USER","SETTINGS_CONFIG","LANDLINE_SALES","EMAIL_SALES","LANDLINE_SUPPORT","EMAIL_SUPPORT","LOGO","SNMP_CHECK_INTERVAL","fieldsToLabelMap","createSlice","name","initialState","listData","results","currentPage","totalResults","totalPages","rank","reducers","setRanks","state","payload","RankReducer","reducer","RankActions","actions","branch","setBranches","BranchReducer","BranchActions","_location","setLocations","LocationReducer","LocationActions","nms","setNmsDevices","NmsDeviceReducer","NmsDeviceActions","setDevices","DeviceReducer","DeviceActions","PhotoThumb","url","width","height","border","borderColor","onClick","style","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","cursor","className","httpClient","axios","create","baseURL","headers","interceptors","request","use","config","user","LocalStorageHelper","get","accessToken","response","data","success","error","errorResponse","status","errors","globalError","showGlobalModalNotification","message","hideTs","Promise","resolve","code","store","dispatch","CurrentUserActions","setUserState","reject","uploadFile","file","FormData","append","post","res","getUploadedFiles","deleteFile","id","delete","UploadService","CustomDateInput","forwardRef","ref","originalValue","disabled","text","FieldWrap","field","touched","children","formErrors","shouldShowError","type","cols","marginBottom","hideLabel","htmlFor","label","required","EntityForm","action","method","initialValues","validationSchema","fields","onSubmit","values","props","editMode","entitySingle","submitTitle","hideSubmit","length","md","enableReinitialize","formConfig","modifiedValues","Object","keys","forEach","key","undefined","setFieldValue","Date","now","map","fieldLabel","replace","ucFirst","options","object","Array","isArray","push","value","objectAsArray","as","placeholder","onChange","e","nativeEvent","target","option","setCheckBoxGroupFieldValue","existingValues","Set","checked","add","parseInt","from","backgroundColor","overflow","includes","theme","showIcon","date","format","customInput","files","accept","opacity","position","left","top","default","document","getElementById","click","autoComplete","window","scrollTo","humanFriendlyDateFormat","dateStrIso","defaultFormatStr","parseISO","formatMySql","dateStr","formatBytesToString","bytes","toFixed","convertToDate","strordate","str","charAt","toUpperCase","slice","GlobalActions","setGlobalMessage","dismissGlobalError","globalMessage","settings","snmpDeviceStatus","setWebsiteSettings","setSnmpDeviceStatus","GlobalReducer","userKEY","currentUser","location","setCurrentUser","CurrentUserReducer","loginUser","username","password","getCurrentUser","logOutUser","getAllUsers","params","rejectUser","approveUser","blockUser","patch","unblockUser","UserService","loginSchema","yup","shape","LoginForm","triggerLogin","history","_history","useHistory","paddingTop","href","setErrors","placholder","pushQueryParams","queryParams","parseQueryParams","finalParams","p","pathname","search","URLSearchParams","toString","defaultVal","v","k","Dialog","exists","show","showHeader","acceptText","cancelText","canDismiss","size","bodyPadding","zIndex","cancelDisabled","successDisabled","onSuccess","onCancel","onDismiss","tabIndex","display","LoadingOverlay","propTypes","MODE_EDIT","DataGridComponent","modalSize","keyField","entityPlural","columns","hideIdOnEdit","limit","remote","sort","filter","pagination","defaultSorted","dataField","order","showTotal","beforeSave","onTableChange","onDataUpdated","tableData","onDelete","canAdd","canDelete","canDeleteFn","row","canEdit","rowActionButtons","globalActionButtons","formOptions","resource","onFormShow","mode","actionColumnWidth","filterComponents","rest","useState","setFormErrors","record","setCurrentRecord","showFormDialog","setShowFormDialog","selectedIds","setSelectedIds","loading","setLoading","records","setRecords","fetchTableData","useCallback","result","columnsWithActions","useMemo","clms","clm","isDummyField","formatter","cellContent","actionButton","canShow","fieldsDyanmic","f","recordKey","triggerSetCurrentRecord","isAddEdit","currentRecord","find","r","useEffect","listen","Fragment","resetForm","put","baseProps","paginationFactory","page","sizePerPage","totalSize","sizePerPageList","paginationSize","_data","sortOrder","sortBy","striped","selectRow","bgColor","selectColumnStyle","onSelectAll","isSelected","selections","onSelect","hideSelectColumn","overlay","overlayFactory","spinner","styles","base","background","noDataIndication","BranchListView","description","subTitle","browserTitle","hidden","LocationListView","joinChar","level","setLevel","segments","setSegments","_level","_segments","locationId","join","_handler","split","segment","concat","email","RankListView","rejectRegistration","approveRegistration","RegistrationService","STATUSES","RegistrationListView","require","getLocationList","locations","getBranchesList","getRanksList","createDatabaseBackup","getDashboardSummary","getNmsDevicesStatus","getNotifications","CommonServerice","UserListView","branches","ranks","setRecord","setMode","CommonService","_fields","l","firstName","branchId","rankId","c","b","middleName","lastName","x","ip","port","DashboardView","NAVIGATION_CARDS","totalUsers","to","totalOnlineUsers","totalSuperUsers","totalNmsDevices","totalDevices","totalPendingRequests","summary","setSummary","card","connect","globalState","deviceStatus","setDeviceStatus","checkInterval","setCheckInterval","interval","s","setInterval","clearInterval","address","isOnline","systemName","atob","LocationFilter","setLocationId","getFilterValue","alignContent","justifyContent","alignItems","whiteSpace","ClearFilterButton","filtersToClear","clearParams","qp","clearQueryParams","DeviceListView","ClearFilter","AdminListView","role","youString","OnLineUsersView","BackupsListView","DateFilter","showPicker","setShowPicker","setState","defaultStart","subDays","defaultEnd","start","end","isDate","isBefore","startDate","endDate","minDate","subYears","maxDate","item","selection","showSelectionPreview","moveRangeOnFirstSelection","months","ranges","direction","ReportListView","getWebsiteSettings","saveWebsiteSetting","settingData","SettingService","triggerGetSettings","setSettings","setting","READ_SETTINGS","ContactUsView","_settings","Entry","Navbar","Footer","padding","margin","marginLeft","borderTop","currentUserState","triggerGetCurrentUser","logo","setLogo","notifications","setNotifications","fetchNotifications","setTimeout","eleme","querySelector","n","borderRadius","footer","Core","labelValue","labelType","route","navigateToLogin","index","items","Item","childItem","childIndex","exact","ReactDOM","render","localStorage","setItem","JSON","stringify","getItem","parse","removeItem","setRegistrations","RegistrationReducer","setUsers","UserReducer","configureStore","rankState","branchState","locationState","registrationState","nmsState","deviceState","userState","UserManagementReducer","middleware","thunk"],"mappings":"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","file":"static/js/main.c831c8b9.chunk.js","sourcesContent":["export const LOCATION_LIST_PAGE = '/admin/locations'\nexport const RANK_LIST_PAGE = '/admin/ranks'\nexport const BRANCH_LIST_PAGE = '/admin/branches'\nexport const LOGOUT_ROUTE = '/logout'\nexport const REGISTRATION_LIST_PAGE = '/admin/registrations'\nexport const NMS_LIST_PAGE = '/admin/nms-devices'\nexport const USER_LIST_PAGE = '/admin/users'\nexport const DASHBOARD_ROUTE = \"/\";\nexport const DEVICE_MAMAGEMENT_ROUTE = \"/admin/manage-devices\";\nexport const ONLINE_USERS_ROUTE = \"/admin/online-users\";\nexport const SUPER_USER_LIST_PAGE = \"/admin/super-users\";\nexport const BACKUPS_LIST = \"/admin/db-backups\";\nexport const REPORTS_LIST_PAGE = \"/admin/reports\";\nexport const SETTINGS_PAGE = \"/admin/settings\";\nexport const CONTACT_PAGE = \"/admin/contact-us\";\n\nexport const NAV_ITEMS = [\n  {\n    icon: \"fa-tachometer-alt\",\n    title: \"Dashboard\",\n    path: DASHBOARD_ROUTE\n  },\n  {\n    icon: \"fa-globe\",\n    title: \"Manage Locations\",\n\n    path: LOCATION_LIST_PAGE,\n  },\n  {\n    icon: \"fa-sort-numeric-up\",\n    title: \"Manage Ranks\",\n    path: RANK_LIST_PAGE\n  },\n  {\n    icon: \"fa-building\",\n    title: \"Manage Branches\",\n    path: BRANCH_LIST_PAGE\n  },\n  {\n    icon: \"fa-tasks\",\n    title: \"Registration Requests\",\n    path: REGISTRATION_LIST_PAGE,\n  },\n  {\n    icon: \"fa-user\",\n    title: \"Manage Users\",\n    path: USER_LIST_PAGE,\n  },\n  {\n    icon: \"fa-users\",\n    title: \"Current Users\",\n    color: \"green\",\n\n    path: ONLINE_USERS_ROUTE,\n  },\n\n  {\n    icon: \"fa-laptop\",\n    title: \"NMS\",\n    path: NMS_LIST_PAGE,\n  },\n  {\n    icon: \"fa-download\",\n    title: \"Database Backups\",\n\n    path: BACKUPS_LIST,\n  },\n  {\n    icon: \"fa-tools\",\n    title: \"Device Management\",\n\n    path: DEVICE_MAMAGEMENT_ROUTE,\n  },\n  {\n    icon: \"fa-users\",\n    title: \"CTMS - User Accounts\",\n\n    path: SUPER_USER_LIST_PAGE,\n  },\n  {\n    icon: \"fa-chart-line\",\n    title: \"Reports\",\n    path: REPORTS_LIST_PAGE,\n  },\n  {\n    icon: \"fa-cog\",\n    title: \"Configuration\",\n    path: SETTINGS_PAGE\n  },\n  {\n    icon: \"fa-phone-alt\",\n    title: \"Contact us\",\n    path: CONTACT_PAGE,\n  }\n];\n\nexport const USER_STATUSES = {\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  PENDING: 'PENDING',\n  DISABLED: 'DISABLED',\n  ACTIVE: 'ACTIVE'\n}\n\nexport const USER_ROLES = {\n  SUPERADMIN: 'SUPERADMIN',\n  ADMIN: 'ADMIN',\n  USER: 'USER',\n}\n\nexport const SETTINGS_CONFIG  = {\n  LANDLINE_SALES: 'landline_sales',\n  EMAIL_SALES: 'email_sales',\n  LANDLINE_SUPPORT: 'landline_support',\n  EMAIL_SUPPORT: 'email_support',\n  LOGO: 'logo',\n  SNMP_CHECK_INTERVAL: 'snmp_check_interval'\n}\n\n\nexport const fieldsToLabelMap = {\n  'locationId' : 'Location',\n  'branchId': 'Branch',\n  'rankId': 'Rank',\n  'firstName': 'First Name',\n  'lastName': 'Last Name',\n  'middleName': 'Middle Name',\n  'username': 'Username',\n  'ip' : 'IP'\n}","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: RankReducer, actions: RankActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      rank: null,\n    },\n    reducers: {\n      setRanks: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: BranchReducer, actions: BranchActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      branch: null,\n    },\n    reducers: {\n      setBranches: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: LocationReducer, actions: LocationActions } = createSlice(\n  {\n    name: \"locationSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      _location: null,\n    },\n    reducers: {\n      setLocations: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: NmsDeviceReducer, actions: NmsDeviceActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      nms: null,\n    },\n    reducers: {\n      setNmsDevices: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: DeviceReducer, actions: DeviceActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      nms: null,\n    },\n    reducers: {\n      setDevices: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import React from \"react\";\nconst PhotoThumb = ({\n  url = null,\n  width = 120,\n  height = 120,\n  border = 1,\n  borderColor = \"grey\",\n  onClick = () => {}\n}) => {\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        width,\n        height,\n        backgroundImage: `url(${url})`,\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"contain\",\n        backgroundPosition: 'center',\n        border: `solid ${border || 1}px ${borderColor}`,\n        cursor: \"pointer\",\n      }}\n      className=\"img-thumbnail m-2\"\n    />\n  );\n};\n\nexport default PhotoThumb;\n","import axios from \"axios\";\nimport store from \"src/store/store\";\nimport { CurrentUserActions } from \"src/slices/currentUserSlice\";\nimport LocalStorageHelper from \"./localStorageHelper\";\nimport { showGlobalModalNotification } from \"./storeHelper\";\n\nconst baseUrl = `http://localhost:28000`;\nconst httpClient = axios.create({\n  baseURL: baseUrl,\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n\n\nhttpClient.interceptors.request.use((config) => {\n  // Do something before request is sent\n  const user = LocalStorageHelper.get('currentUser');\n  config.headers['Content-type'] = `application/json`\n  config.headers['Authorization'] = `Bearer ${user?.accessToken}`\n  return config;\n});\n\nhttpClient.interceptors.response.use(\n  (response) => {\n    return { data: response.data, success: true };\n  },\n  (error) => {\n    const errorResponse = error?.response;\n    switch (errorResponse?.status) {\n      case 422:\n        const errors = errorResponse?.data ?? {}\n        const globalError = errors['global'] || null\n        if (globalError){\n          showGlobalModalNotification({\n            message: globalError,\n            success: false,\n            hideTs: 5000,\n            title: \"Error!!\"\n          })\n        }\n\n        return Promise.resolve({\n          success: false,\n          errors: errors,\n          code: 422,\n        });\n      case 401:\n        // const redirectURL = errorResponse.request.responseURL\n        store.dispatch(CurrentUserActions.setUserState(null));\n        // window.location = `/login?redirect=${encodeURIComponent(redirectURL)}`\n        return Promise.resolve({\n          success: false,\n          code: 401,\n        });\n      case 404:\n        showGlobalModalNotification({\n          message: 'Page/Resource you are trying to access, do not exist.',\n          success: false,\n          hideTs: 5000,\n          title: \"Error!!\"\n        })\n        return Promise.resolve({\n          success: false,\n          code: 404,\n        });\n      default:\n        showGlobalModalNotification({\n          message: \"Something went wrong.\",\n          success: false,\n          hideTs: 5000,\n          title: \"Error!!\"\n        })\n\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default httpClient;\n","import httpClient from \"src/utils/httpClient\";\n\nconst uploadFile = async (file) => {\n  const data = new FormData();\n  data.append(\"file\", file);\n  const res = await httpClient.post(\"/api/v1/admin/uploads\", data);\n  const url = res?.success ? res.data : null\n  return url ? `/api/v1/uploads/${url}` : null\n};\n\nconst getUploadedFiles = async () => await httpClient.get(\"/api/v1/admin/uploads\");\n\nconst deleteFile = async (id) => await httpClient.delete(`/api/v1/admin/uploads/${id}`)\n\nconst UploadService = {\n  uploadFile,\n  getUploadedFiles,\n  deleteFile\n};\n\n\nexport default UploadService;\n","import { Field, Form, Formik } from \"formik\";\nimport React, { forwardRef } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport DatePicker from \"react-datepicker\";\nimport PhotoThumb from \"./PhotoThumb\";\nimport { format } from \"date-fns\";\nimport { Alert, Button, ButtonGroup, Col, Row } from \"adminlte-2-react\";\nimport { showGlobalModalNotification } from \"src/utils/storeHelper\";\nimport UploadService from \"src/services/UploadService\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { fieldsToLabelMap } from \"src/constants/global\";\nimport { ucFirst } from \"src/utils/commonHelper\";\n\nconst CustomDateInput = forwardRef(({ onClick, originalValue }, ref) => {\n  return (\n    <ButtonGroup>\n      <Button className=\"ps-2 pe-2\" disabled text={originalValue || \"YYYY-MM-DD\"} />\n      <Button onClick={onClick} icon=\"fa-calendar\" />\n    </ButtonGroup>\n  );\n});\nconst FieldWrap = ({\n  field = {},\n  errors = {},\n  touched = {},\n  children = null,\n  formErrors = {}\n}) => {\n  const shouldShowError =\n    (errors[field.name] && touched[field.name]) ||\n    (errors[field.name] && field.type === \"richtext\") || formErrors[field.name];\n  return (\n    <Col key={field.id} className={`mb-2 col-lg-${field.cols} col-sm-12 col-md-6`}>\n      <div style={{marginBottom: 10}} className={`form-group ${shouldShowError ? 'has-error' : ''}`}>\n        {!field?.hideLabel && <label htmlFor={field.id} className=\"form-label\">\n          {field.label} {field.required && <sup className=\"text-red\">*</sup>}\n        </label>\n        }\n        <div>\n          {children}\n          {/* {shouldShowError && (\n            <p style={{fontSize: 12, fontWeight:'normal', marginBottom: 0}} className=\"text-red\">{errors[field.name] || formErrors[field.name]}</p>\n          )} */}\n        </div>\n      </div>\n    </Col>\n  );\n};\n\nconst objectAsArray = (object) => {\n  if (Array.isArray(object)) {\n    return object;\n  } else {\n    const data = [];\n    Object.keys(key => {\n      data.push({ key, value: object[key] })\n    })\n    return data;\n  }\n}\n\nconst EntityForm = ({\n  id = \"\",\n  action = \"\",\n  method = \"POST\",\n  disabled = false,\n  initialValues = {},\n  validationSchema = null,\n  fields = [],\n  onSubmit = async (values, props) => { },\n  editMode = false,\n  entitySingle = 'record',\n  submitTitle = null,\n  formErrors = {},\n  hideSubmit = false\n}) => {\n\n  if (!initialValues || fields.length < 1) {\n    return <></>;\n  }\n  return (\n    <Row>\n      <Col md={12}>\n        <Formik\n          initialValues={initialValues}\n          enableReinitialize\n          onSubmit={(values, formConfig) => {\n            const modifiedValues = {}\n            Object.keys(initialValues).forEach(key => {\n              if ((values[key] !== initialValues[key] && values[key] !== undefined) || `${key}` === \"id\") {\n                modifiedValues[key] = values[key]\n              }\n            });\n            onSubmit(modifiedValues, formConfig)\n          }}\n          validationSchema={validationSchema}\n        >\n          {({ errors, touched, values, setFieldValue }) => (\n            <Form\n              action={action}\n              id={id || Date.now()}\n              method={method}\n              disabled={disabled}\n            >\n              {Object.keys(formErrors).length > 0 && (<Row>\n                <Col className=\"col-lg-12 col-md-12\">\n                  <Alert type=\"danger\">\n                    <h4>\n                      <strong>Please note:</strong>\n                    </h4>\n                    {Object.keys(formErrors).map(field => {\n                      if (field === 'global'){\n                        return <></>\n                      }\n                      const fieldLabel = fieldsToLabelMap[field] ? fieldsToLabelMap[field] : field.replace('Id', '')\n                      return <div key={field}><strong>{ucFirst(fieldLabel)}</strong> - {formErrors[field]}</div>\n                    })}\n                  </Alert>\n                </Col>\n              </Row>)}\n              <Row>\n                {fields.map((field) => {\n                  switch (field.type) {\n                    case \"fieldset\":\n                      return (\n                        <h3 className=\"display-6 fs-6 pt-2 pb-2 fw-bold bg-secondary text-white\">{field?.title}</h3>\n                      );\n                    case \"select\":\n                      const options = objectAsArray(field?.options || [])\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}-${entitySingle}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <Field\n                            as=\"select\"\n                            className={\n                              errors[field.name] && touched[field.name]\n                                ? \"form-select rounded-0 is-invalid shadow-none form-control\"\n                                : \"form-select form-control\"\n                            }\n                            placeholder={field.placeholder || field.label}\n                            name={field.name}\n                            id={field.id}\n                            onChange={(e) => {\n                              field.onChange && field.onChange(e)\n                              setFieldValue(field.name, e.nativeEvent.target.value)\n                            }}\n                          >\n                            <option value={''}>{field.placeholder || field.label}</option>\n                            {options.map((option) => (\n                              <option\n                                key={`${option.key}-${entitySingle}`}\n                                value={option.key}\n                              >\n                                {option.value}\n                              </option>\n                            ))}\n                          </Field>\n                        </FieldWrap>\n                      );\n                    case \"textarea\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <Field\n                            as=\"textarea\"\n                            className={\n                              errors[field.name] && touched[field.name]\n                                ? \"form-control shadow-none is-invalid\"\n                                : \"form-control shadow-none\"\n                            }\n                            placeholder={field.placeholder || field.label}\n                            name={field.name}\n                            id={field.id}\n                            onChange={(e) => {\n                              field.onChange && field.onChange(e)\n                              setFieldValue(field.name, e.nativeEvent.target.value)\n                            }}\n                          />\n                        </FieldWrap>\n                      );\n                    case \"checkbox_group\":\n                      const setCheckBoxGroupFieldValue = (e) => {\n                        const existingValues = new Set(values[field.name].length > 0 ? values[field.name] : [])\n                        if (e.target.checked) {\n                          existingValues.add(parseInt(e.target.value))\n                        } else {\n                          existingValues.delete(parseInt(e.target.value))\n                        }\n                        setFieldValue(field.name, Array.from(existingValues))\n                      }\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n\n                        >\n                          <div className=\"p-3 ps-3\" style={{ height: `${field.height || 150}px`, backgroundColor: '', border: 'solid 1px #eee', overflow: 'auto' }}>\n                            {field.options.map(option => {\n                              return (\n                                <div key={option.key} className=\"form-check\">\n                                  <input\n                                    type=\"checkbox\"\n                                    className={\n                                      errors[field.name] && touched[field.name]\n                                        ? \"form-check-input shadow-none is-invalid\"\n                                        : \"form-check-input shadow-none\"\n                                    }\n                                    name={`${field.name}`}\n                                    checked={values[field.name].includes(option.key)}\n                                    id={`${field.id}-${option.key}`}\n                                    value={option.key}\n                                    onChange={setCheckBoxGroupFieldValue}\n                                  />\n                                  <label className=\"form-check-label\" htmlFor={`${field.id}-${option.key}`}>{option.value}</label>\n                                </div>\n                              )\n                            })}\n                          </div>\n                        </FieldWrap>\n                      );\n                    case \"richtext\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <ReactQuill\n                            theme=\"snow\"\n                            value={values[field.name]}\n                            onChange={(value) => setFieldValue(field.name, value)}\n                          />\n                        </FieldWrap>\n                      );\n                    case \"date\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <DatePicker\n                            showIcon\n                            name={field.name}\n                            className=\"d-flex\"\n                            onChange={(date) => {\n                              field.onChange && field.onChange(date)\n                              setFieldValue(\n                                field.name,\n                                format(date, \"yyyy-MM-dd\")\n                              )\n                            }\n                            }\n                            customInput={\n                              <CustomDateInput\n                                originalValue={values[field.name]}\n                              />\n                            }\n                          />\n                        </FieldWrap>\n                      );\n                    case \"upload\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <input onChange={async (e) => {\n                            const file = e.nativeEvent?.target?.files[0]\n                            if (!file) {\n                              showGlobalModalNotification({\n                                success: false,\n                                message: \"You've choosen any file\",\n                              })\n                              return\n                            }\n                            const url = await UploadService.uploadFile(file)\n                            if (!url) {\n                              showGlobalModalNotification({\n                                success: false,\n                                message: \"Unable to upload file, contact server admin.\"\n                              })\n                              return\n                            }\n                            setFieldValue(field.name, url)\n                          }} id=\"fileinputRef\" accept=\"image/*\" type=\"file\" name={\"file\"} style={{ opacity: 0, position: \"absolute\", left: -9999, top: -100 }} />\n                          <div className=\"d-flex flex-wrap align-items-center justify-content-start\">\n                            <PhotoThumb\n                              key={\"no-selection\"}\n                              url={values[field.name] || values[field.default]}\n                            />\n                            <Button\n                              onClick={() => {\n                                document.getElementById('fileinputRef').click();\n                              }}\n                              icon=\"fa-edit\"\n                            />\n                          </div>\n                        </FieldWrap>\n                      );\n                    case \"hidden\":\n                      return (\n                        <Field\n                          key={`field-${field.id}`}\n                          autoComplete=\"off\"\n                          name={field.name}\n                          type={\"hidden\"}\n                          id={field.id}\n                        />\n                      );\n                    default:\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <Field\n                            autoComplete=\"off\"\n                            className={\n                              errors[field.name] && touched[field.name]\n                                ? \"form-control rounded-0 shadow-none is-invalid\"\n                                : \"form-control rounded-0 shadow-none\"\n                            }\n                            placeholder={field.placeholder || field.label}\n                            name={field.name}\n                            type={field.type}\n                            id={field.id}\n                            onChange={(e) => {\n                              field.onChange && field.onChange(e)\n                              setFieldValue(field.name, e.nativeEvent.target.value)\n                            }}\n                          />\n                        </FieldWrap>\n                      );\n                  }\n                })}\n              </Row>\n              {!hideSubmit && (\n                <>\n                  <hr />\n                  <div className=\"d-flex flex-row-reverse text-right\">\n                    <button\n                      disabled={disabled}\n                      onClick={() => window.scrollTo(0, 0)}\n                      type=\"success\"\n                      className=\"btn rounded-0  btn-primary\"\n                    >\n                      {submitTitle && <span>{submitTitle}</span>}\n                      {!submitTitle && (\n                        <span>\n                          {editMode ? \"Update\" : \"Create\"} {entitySingle}\n                        </span>\n                      )}\n                    </button>\n                  </div>\n                </>\n              )}\n\n            </Form>\n          )}\n        </Formik>\n      </Col>\n    </Row>\n  );\n};\n\nexport default EntityForm;\n","import { format, isValid, parseISO } from \"date-fns\"\n\nexport const humanFriendlyDateFormat = (dateStrIso, defaultFormatStr = 'E do MMM, yyyy hh:mm a') => {\n    return format(parseISO(dateStrIso), defaultFormatStr)\n}\n\nexport const formatMySql = (dateStr) => {\n    return format(new Date(dateStr), \"yyyy-MM-dd\")\n}\n\nexport const formatBytesToString = (bytes) => {\n    if (bytes < 1024) {\n        return `${bytes} bytes`\n    }\n    if (bytes > 1024 && bytes < 1024 * 1024) {\n        return `${(bytes / 1024).toFixed(3)} KB`\n    }\n    if (bytes > 1024 * 1024 && bytes < 1024 * 1024 * 1024) {\n        return `${(bytes / (1024 * 1024)).toFixed(3)} MB`\n    }\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(3)} GB`\n}\n\nexport const formatUserName = (user) => {\n    return [user?.firstName, user?.middleName, user?.lastName].filter(x => x).join(\" \")\n}\n\nexport const convertToDate = (strordate) => {\n    if (typeof strordate === \"object\") {\n        return strordate\n    }else{\n        try{\n            return parseISO(strordate)\n        }catch(e){\n            return new Date(strordate)\n        }\n    }\n}\n\nexport const ucFirst = (str) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}","import { GlobalActions } from \"src/slices/globalSlice\"\nimport store from \"src/store/store\"\n\n\nexport const showGlobalModalNotification = ({\n    success = true,\n    title = 'Please note',\n    message,\n    hideTs = 3000\n}) => {\n    window.scrollTo(0, 0)\n    store.dispatch(GlobalActions.setGlobalMessage({\n        type: success ? 'success' : 'danger',\n        title,\n        message\n    }))\n    // setTimeout(function () {\n    //    \n    // }, hideTs)\n}\n\nexport const dismissGlobalError = () => {\n    store.dispatch(GlobalActions.setGlobalMessage({\n        type: '',\n        title: '',\n        message: ''\n    }))\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const { actions: GlobalActions, reducer: GlobalReducer } = createSlice({\r\n  name: \"globalSlice\",\r\n  initialState: {\r\n    errors: null,\r\n    globalMessage: {\r\n      title: '',\r\n      type: '',\r\n      message: ''\r\n    },\r\n    settings: [],\r\n    snmpDeviceStatus: {}\r\n  },\r\n  reducers: {\r\n    setGlobalMessage: (state, { payload }) => {\r\n      const { type, title, message } = payload\r\n      state.globalMessage = { ...state.globalError, type, title, message }\r\n    },\r\n    setWebsiteSettings: (state, { payload }) => {\r\n      const { results } = payload\r\n      state.settings = results\r\n    },\r\n    setSnmpDeviceStatus: (state, { payload }) => {\r\n      state.snmpDeviceStatus = payload\r\n    }\r\n  },\r\n});\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport LocalStorageHelper from \"../utils/localStorageHelper\";\r\n\r\nexport const userKEY = \"currentUser\";\r\nexport const { actions: CurrentUserActions, reducer: CurrentUserReducer } = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: LocalStorageHelper.get(userKEY),\r\n    currentUser: null,\r\n  },\r\n  reducers: {\r\n    setUserState: (state, { payload }) => {\r\n      payload\r\n        ? LocalStorageHelper.store(userKEY, payload)\r\n        : LocalStorageHelper.delete(userKEY);\r\n      state.user = payload;\r\n\r\n      if (payload) {\r\n                // window.location = `/login?redirect=${encodeURIComponent(redirectURL)}`\r\n        window.location = '/'\r\n      }\r\n    },\r\n    setCurrentUser: (state, {payload}) => {\r\n      state.currentUser = payload\r\n    }\r\n  },\r\n});\r\n","import httpClient from \"../utils/httpClient\";\n\nconst loginUser = async (username, password) =>\n  await httpClient.post(\"/auth/admin/login\", {\n    username,\n    password\n  });\n\nconst getCurrentUser = async () => await httpClient.get(\"/api/v1/me\");\n\nconst logOutUser = async () => await httpClient.get(\"/auth/logout\");\n\nconst getAllUsers = async (params = {}) =>\n  await httpClient.get(\"/api/v1/admin/users\", { params });\n\nconst rejectUser = async (id) => await httpClient.delete(`/api/v1/admin/users/${id}`);\nconst approveUser = async (id) => await httpClient.post(`/api/v1/admin/users/${id}`);\n\nconst blockUser = async (id) => await httpClient.patch(`/api/v1/admin/users/${id}/block`)\nconst unblockUser = async (id) => await httpClient.patch(`/api/v1/admin/users/${id}/unblock`)\n\nconst UserService = {\n  loginUser,\n  getCurrentUser,\n  logOutUser,\n  getAllUsers,\n  approveUser,\n  rejectUser,\n  blockUser,\n  unblockUser\n};\n\nexport default UserService;\n","import { Box } from \"adminlte-2-react\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { ucFirst } from \"src/utils/commonHelper\";\r\nimport * as yup from \"yup\";\r\n\r\nconst loginSchema = yup.object().shape({\r\n  username: yup.string().required(),\r\n  password: yup.string().required(),\r\n});\r\n\r\nconst LoginForm = ({ triggerLogin = async () => { }, history, ...rest }) => {\r\n  const _history = useHistory()\r\n  return (\r\n    <div className=\"login-box\" style={{ border: 'solid 1px #eee', paddingTop: 50 }}>\r\n      <div className=\"login-logo\">\r\n        <a href=\"/\">\r\n          <b>TMCS</b>\r\n          login\r\n        </a>\r\n      </div>\r\n      <div className=\"login-box-body\">\r\n        <Box type=\"primary\" title=\"Login to continue\">\r\n\r\n          <Formik\r\n            initialValues={{\r\n              username: \"\",\r\n              password: \"\",\r\n            }}\r\n            onSubmit={async (values, {setErrors}) => {\r\n              const data = await triggerLogin(values, history || _history)\r\n              if (data?.errors){\r\n                setErrors(data.errors)              \r\n              }\r\n            }}\r\n            validationSchema={loginSchema}\r\n          >\r\n            {({ errors, touched }) => (\r\n              <Form>\r\n                <div className=\"card-body\">\r\n                  <div className=\"mb-2\">\r\n                    <label htmlFor=\"email\" className=\"form-label\">\r\n                      username\r\n                    </label>\r\n                    <Field\r\n                      type=\"text\"\r\n                      autoComplete=\"off\"\r\n                      className={\r\n                        errors.username && touched.username\r\n                          ? \"form-control shadow-none is-invalid\"\r\n                          : \"form-control shadow-none\"\r\n                      }\r\n                      placholder=\"Enter username\"\r\n                      name=\"username\"\r\n                      id=\"username\"\r\n                    />\r\n                    {errors.username && touched.username && (\r\n                      <div className=\"invalid-feedback text-red\"><strong>Username</strong> - {ucFirst(errors.username)}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"mb-2\">\r\n                    <label htmlFor=\"password\" className=\"form-label\">\r\n                      Password\r\n                    </label>\r\n                    <Field\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      autoComplete=\"off\"\r\n                      className={\r\n                        errors.password && touched.password\r\n                          ? \"form-control shadow-none is-invalid\"\r\n                          : \"form-control shadow-none\"\r\n                      }\r\n                      placholder=\"Enter password\"\r\n                      id=\"password\"\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                      <div className=\"invalid-feedback\">{errors.password}</div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <hr />\r\n                <div className=\"card-footer text-center\">\r\n                  <div className=\"d-flex flex-row-reverse\">\r\n                    <button type=\"submit\" className=\"btn btn-block rounded-0  btn-primary\">\r\n                      Submit\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Box>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default LoginForm;\r\n","import { userKEY } from \"src/slices/currentUserSlice\"\nimport LocalStorageHelper from \"./localStorageHelper\"\n\nexport const pushQueryParams = (history, params = {}, append = true, replace = false) => {\n    const queryParams = parseQueryParams(history)\n    params = append ? { ...queryParams, ...params } : params\n    const finalParams = {}\n    Object.keys(params).forEach(p => {\n        if (typeof params[p] !== 'undefined' && params[p] !== 'undefined' && params[p] !== 'null' && params[p] !== null) {\n            finalParams[p] = params[p]\n        }\n    })\n    replace ? history.replace({\n        pathname: history.location.pathname,\n        search: (new URLSearchParams(finalParams)).toString()\n    }) : history.push({\n        pathname: history.location.pathname,\n        search: (new URLSearchParams(finalParams)).toString()\n    })\n}\n\nexport const clearQueryParams = (history, clearParams = []) => {\n    const queryParams = parseQueryParams(history)\n    const finalParams = {}\n    Object.keys(queryParams).forEach(qp => {\n        if (!clearParams.includes(qp)) {\n            finalParams[qp] = queryParams[qp]\n        }\n    })\n\n    history.push({\n        pathname: history.location.pathname,\n        search: (new URLSearchParams(finalParams)).toString()\n    })\n}\n\nexport const parseQueryParams = (history, key = null, defaultVal = null) => {\n    const params = {}\n    const p = new URLSearchParams(history.location.search)\n    p.forEach((v, k) => {\n        params[k] = v\n    })\n    if (key != null) {\n        return params[key] || defaultVal\n    }\n    return params\n}\n\nexport const getCurrentStateParam = (history, param = 'id') => {\n    const state = (history.location.state || {})\n    if (state && state[param]) {\n        return state[param]\n    }\n    return null\n}\n\nexport const isCurrentRoute = (history, matchingRouteName) => {\n    console.log(history, matchingRouteName)\n    return false\n}\n\nexport const navigateToPath = (history, path, state = {}, clearPrevious = false) => {\n\n    let pathname = path\n\n    Object.keys(state).forEach(key => {\n        pathname = pathname.replace(`:${key}`, state[key])\n    })\n\n    if (clearPrevious) {\n        history.replace({\n            pathname,\n            state\n        })\n    } else {\n        history.push({\n            pathname,\n            state\n        })\n    }\n}\n\nexport const navigateToHome = (history) => {\n    const params = parseQueryParams(history)\n    const path = (params['redirect'] || '/').replace(`${window.location.protocol}://${window.location.host}`, '')\n    navigateToPath(history, path.substring())\n}\n\nexport const navigateToSubPath = (history, subPath, clearPrevious = false) => {\n    const pathname = history.location.pathname + subPath\n    navigateToPath(history, pathname, clearPrevious)\n}\n\n\nexport const navigateToLogin = (route = '/login') => {\n    LocalStorageHelper.delete(userKEY)\n    window.location = route\n}\n","import { Button } from \"adminlte-2-react\";\nimport React from \"react\";\n\nconst Dialog = ({\n  children = \"\",\n  title = \"Dialog\",\n  exists = true,\n  show = true,\n  showHeader = true,\n  acceptText = null,\n  cancelText = null,\n  canDismiss = true,\n  size = \"xl\",\n  bodyPadding = 2,\n  zIndex = 1050,\n  cancelDisabled = false,\n  successDisabled = false,\n  onSuccess = () => { },\n  onCancel = () => { },\n  onDismiss = () => { },\n}) => {\n  return (\n    exists && (\n      <div\n        className={show ? 'modal fade in': 'modal fade'}\n        tabIndex=\"-1\"\n        aria-hidden={show}\n        style={{ display: show ? \"block\" : \"none\", zIndex, overflow: 'auto' }}\n      >\n        <div className={`modal-dialog modal-${size}`}>\n          <div className=\"modal-content\">\n            {showHeader && (\n              <div className=\"modal-header\">\n                <h4 className=\"modal-title\">{title}\n                  {canDismiss && (\n                    <Button\n                      type=\"button\"\n                      className=\"close\"\n                      aria-label=\"Close\"\n                      onClick={onDismiss}\n                      icon=\"fa-times\"\n                    />\n                  )}\n                </h4>\n              </div>\n            )}\n            <div className={`modal-body p-${bodyPadding}`}>\n              {children}\n            </div>\n            {(cancelText || acceptText) && (\n              <div className=\"modal-footer\">\n                {cancelText && (\n                  <button\n                    disabled={cancelDisabled}\n                    className=\"btn rounded-0  btn-default\"\n                    onClick={onCancel}\n                  >\n                    {cancelText}\n                  </button>\n                )}\n                {acceptText && (\n                  <button\n                    disabled={successDisabled}\n                    className=\"btn rounded-0  btn-primary\"\n                    onClick={onSuccess}\n                  >\n                    {acceptText}\n                  </button>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default Dialog;\n","import { Col, Row, Button, ButtonGroup } from \"adminlte-2-react\";\nimport * as yup from \"yup\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport overlayFactory from 'react-bootstrap-table2-overlay';\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\nimport LoadingOverlay from \"react-loading-overlay\"\nimport Dialog from \"./Dialog\";\nimport EntityForm from \"./EntityForm\";\nimport { showGlobalModalNotification } from \"src/utils/storeHelper\";\nimport httpClient from \"src/utils/httpClient\";\nLoadingOverlay.propTypes = undefined\n\nconst MODE_EDIT = 'edit';\nconst MODE_ADD = 'add';\n\nconst DataGridComponent = ({\n    modalSize = 'xl',\n    keyField = \"id\",\n    entitySingle = 'record',\n    entityPlural = 'records',\n    columns = [],\n    hideIdOnEdit = false,\n    data = {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        limit: 100,\n        totalPages: 1,\n    },\n    remote = {\n        sort: true,\n        filter: true,\n        pagination: true,\n    },\n    defaultSorted = [\n        { dataField: 'id', order: 'asc' }\n    ],\n    showTotal = true,\n    beforeSave = (values) => { return values },\n    onTableChange = async (params) => { },\n    onDataUpdated = async (tableData) => { },\n    onDelete = (id) => { },\n    canAdd = true,\n    canDelete = true,\n    canDeleteFn = (row) => true,\n    canEdit = true,\n    rowActionButtons = [],\n    globalActionButtons = [],\n    formOptions = {\n        fields: [],\n        validationSchema: null,\n        onSuccess: async (data) => { },\n    },\n    resource = null,\n    onFormShow = (row, mode) => {\n\n    },\n    actionColumnWidth = 200,\n    filterComponents = [],\n    ...rest\n}) => {\n    const [formErrors, setFormErrors] = useState({})\n    const [record, setCurrentRecord] = useState(null)\n    const [showFormDialog, setShowFormDialog] = useState(false)\n    const [selectedIds, setSelectedIds] = useState([])\n    const [loading, setLoading] = useState(false)\n    const [records, setRecords] = useState(data)\n    const fetchTableData = useCallback(async () => {\n        setFormErrors({})\n        if (resource) {\n            const params = parseQueryParams(rest.history)\n            const result = await httpClient.get(`${resource}`, { params })\n            if (result?.success) {\n                setRecords({\n                    results: result.data?.results || [],\n                    currentPage: result.data?.currentPage || 1,\n                    totalResults: result.data.totalResults || 0,\n                    limit: result.data?.limit || 100,\n                    totalPages: result.data?.totalPages || 1\n                })\n            } else {\n                setRecords({ ...data, results: [], totalResults: 0, limit: 100 })\n            }\n        }\n    }, [resource, data, rest.history])\n\n    const columnsWithActions = useMemo(() => {\n        const clms = columns.filter(clm => clm.dataField !== '_actions')\n        if (!(canEdit || canDelete || rowActionButtons.length > 0)) {\n            return clms;\n        }\n        clms.push({\n            dataField: '_actions',\n            isDummyField: true,\n            style: {\n                width: actionColumnWidth || 200,\n            },\n            text: 'Actions',\n            formatter: (cellContent, row) => {\n                return (\n                    <ButtonGroup>\n                        {rowActionButtons.map(actionButton => {\n                            actionButton.canShow = actionButton.canShow ? actionButton.canShow : () => true\n                            if (actionButton.canShow && actionButton.canShow(row)) {\n                                return <Button key={`action-${row.id}-${actionButton.text}`} className=\"mr-2\"\n                                    type={actionButton?.type || 'primary'}\n                                    icon={actionButton?.icon || 'gear'}\n                                    text={actionButton.text}\n                                    onClick={async () => {\n                                        await actionButton.onClick(row.id, row)\n                                        fetchTableData()\n                                    }}\n                                />\n                            }\n\n                        })}\n                        {canEdit && <Button className=\"mr-2\" type=\"primary\" text=\"Edit\" icon=\"fa-edit\" onClick={() => {\n                            pushQueryParams(rest.history, { id: row.id, mode: MODE_EDIT }, true)\n                            setCurrentRecord(row);\n                            setShowFormDialog(true)\n                            setFormErrors({})\n                        }} />}\n                        {(canDelete && canDeleteFn(row)) && <Button className=\"mr-2\" type=\"danger\" onClick={async () => {\n                            if (resource) {\n                                const data = await httpClient.delete(`${resource}/${row.id}`)\n                                if (data?.success) {\n                                    showGlobalModalNotification({\n                                        success: true,\n                                        message: `${entitySingle} successfully deleted.`\n                                    })\n                                } else {\n                                    setFormErrors(data?.errors ?? {})\n                                }\n                            } else {\n                                await onDelete(row.id);\n                            }\n                            fetchTableData()\n                        }} text=\"Delete\" icon=\"fa-trash\" />\n                        }\n\n                    </ButtonGroup>\n                )\n            },\n        })\n        return clms\n    }, [columns, canDelete, canDeleteFn, canAdd, onDelete, rowActionButtons, rest.history])\n\n    const validationSchemaDynamic = useMemo(() => {\n        return formOptions.validationSchema || yup.object().shape({})\n    }, [formOptions.validationSchema]);\n\n    const fieldsDyanmic = useMemo(() => {\n        if (record != null && record?.id){\n            return formOptions.fields.map(f => {\n                return {\n                    ...f, required: false\n                }\n            });\n        }\n        return formOptions.fields\n    }, [formOptions.fields]);\n\n    const initialValues = useMemo(() => {\n        const values = {}\n        fieldsDyanmic.forEach(field => {\n            values[field.recordKey || field.name] = record ? (record[field.recordKey] || record[field.name] || field.default) || '' : (field.default || '')\n        })\n        values['id'] = record ? record.id : null\n        return values;\n    }, [record, fieldsDyanmic]);\n\n    const triggerSetCurrentRecord = () => {\n        const params = parseQueryParams(rest.history)\n        const mode = params['mode'] || ''\n        const id = params['id'] || null\n        const isAddEdit = mode === MODE_ADD || mode === MODE_EDIT\n        const currentRecord = (records.results || []).find(r => `${r.id}` === id)\n        setCurrentRecord(currentRecord)\n        setShowFormDialog(isAddEdit)\n    }\n\n    useEffect(() => {\n        fetchTableData();\n        triggerSetCurrentRecord();\n        const unlisten = rest.history.listen((...args) => {\n            fetchTableData()\n        })\n        return unlisten\n    }, [])\n\n    useEffect(() => {\n        triggerSetCurrentRecord();\n        onDataUpdated(records);\n    }, [showFormDialog, records])\n\n    useEffect(() => {\n        onFormShow(record, parseQueryParams(rest.history, 'mode'))\n    }, [record, rest.history])\n\n    return (\n        <React.Fragment>\n            {(canAdd || canEdit) && <Dialog size={modalSize} show={showFormDialog}\n                showHeader={true}\n                title={`${record ? `Editing ${entitySingle} ${!hideIdOnEdit ? `#${record.id}` : ''}` : `Adding ${entitySingle}`}`}\n                onDismiss={() => {\n                    setShowFormDialog(false)\n                    pushQueryParams(rest.history, { mode: null, id: null }, true, true)\n                }}>\n                <EntityForm\n                    entityPlural={entityPlural}\n                    entitySingle={entitySingle}\n                    formErrors={formErrors}\n                    fields={fieldsDyanmic}\n                    initialValues={initialValues}\n                    editMode={record ? true : false}\n                    onSubmit={async (values, { resetForm }) => {\n                        window.scrollTo(0, 0);\n                        values = beforeSave(values)\n                        let data\n                        if (resource) {\n                            data = values?.id ? await httpClient.put(`${resource}/${values.id}`, values) : await httpClient.post(resource, values)\n                        } else {\n                            data = await formOptions.onSuccess(values)\n                        }\n\n                        if (data?.success) {\n                            resetForm();\n                            setCurrentRecord(null);\n                            setShowFormDialog(false);\n                            pushQueryParams(rest.history, { mode: null, id: null }, true, true)\n                            onTableChange(parseQueryParams(rest.history))\n                            fetchTableData();\n                            showGlobalModalNotification({\n                                success: true,\n                                message: `${entitySingle} successfully ${values?.id ? 'updated' : 'created'}`\n                            })\n                        } else {\n                            setFormErrors(data?.errors ?? {})\n                        }\n\n                    }}\n                />\n            </Dialog>\n            }\n            <ToolkitProvider\n                keyField={keyField}\n                data={records.results || []}\n                columns={columnsWithActions}\n            >\n                {\n                    props => (\n                        <div>\n                            <br />\n                            <Row className=\"text-left\">\n                                <Col md={12}>\n                                    {filterComponents.map(e => e)}\n                                </Col>\n                                <Col md={12} className=\"text-right\">\n                                    <Button onClick={async () => {\n                                        setLoading(true)\n                                        fetchTableData()\n                                        await onTableChange(parseQueryParams(rest.history))\n                                        setLoading(false)\n                                    }} className=\"mr-2\" type=\"primary\" disabled={loading} text={loading ? \"Loading...\" : \"Refresh\"} icon=\"fa-redo\" />\n                                    {canAdd &&\n                                        <Button className=\"mr-2\" onClick={() => {\n                                            pushQueryParams(rest.history, { mode: MODE_ADD, id: undefined }, true)\n                                            setShowFormDialog(true)\n                                            setCurrentRecord(null);\n                                        }} type=\"success\" text={`Add ${entitySingle}`} icon=\"fa-plus-circle\" />\n                                    }\n                                    {globalActionButtons.map(actionButton => {\n                                        return <Button className=\"mr-2\"\n                                            type={actionButton.type}\n                                            icon={actionButton.icon}\n                                            text={actionButton.text}\n                                            onClick={async () => {\n                                                await actionButton.onClick(selectedIds)\n                                                fetchTableData();\n                                            }}\n                                        />\n                                    })}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <hr />\n                                </Col>\n                            </Row>\n                            <BootstrapTable\n                                {...props.baseProps}\n                                remote={remote}\n                                defaultSorted={defaultSorted}\n                                \n                                pagination={records.totalPages > 1 ? paginationFactory({\n                                    page: records.currentPage || 1,\n                                    sizePerPage: records.limit || 100,\n                                    totalSize: records.totalResults || records.results.length || 0,\n                                    sizePerPageList: [100, 200, 500],\n                                    paginationSize: records.totalResults || records.results.length || 0,\n                                    showTotal,\n                                }): null}\n                                loading={loading}\n                                onTableChange={async (type, _data) => {\n                                    const params = {\n                                        sortOrder: _data['sortOrder'],\n                                        sortBy: _data['sortField'],\n                                        page: _data['page'],\n                                        limit: _data['sizePerPage'],\n                                    }\n                                    pushQueryParams(rest.history, params)\n                                    fetchTableData();\n                                    setLoading(true)\n                                    await onTableChange(params)\n                                    setLoading(false)\n                                }}\n                                striped={true}\n                                selectRow={(globalActionButtons.length || canEdit || canDelete) ? {\n                                    mode: 'checkbox',\n                                    bgColor: '#eee',\n                                    selectColumnStyle: () => {\n                                        return {\n                                            width: 20\n                                        }\n                                    },\n                                    onSelectAll: (isSelected) => {\n                                        const selections = []\n                                        if (isSelected) {\n                                            (data.results || []).forEach(r => {\n                                                selections.push(selections)\n                                            })\n                                        }\n                                        setSelectedIds(selections)\n                                    },\n                                    onSelect: (row, isSelected) => {\n                                        const selections = selectedIds.filter(id => row.id !== id)\n                                        if (isSelected) {\n                                            selections.push(row.id)\n                                        }\n                                        setSelectedIds(selections)\n                                    }\n                                } : {\n                                    mode:'ROW_SELECT_DISABLED',\n                                    hideSelectColumn: true\n                                }}\n                                overlay={overlayFactory({\n                                    spinner: true,\n                                    styles: {\n                                        overlay: (base) => ({ ...base, background: 'rgba(0, 0, 0, 0.5)', position: 'absolute' })\n                                    }\n                                })}\n                                noDataIndication={() => <h5 className=\"text-center\">Sorry no {entityPlural} currently availble</h5>} />\n                        </div>\n                    )\n                }\n            </ToolkitProvider>\n        </React.Fragment>\n\n    )\n}\n\nexport default DataGridComponent;","import * as yup from \"yup\";\nimport { BranchActions } from \"src/slices/BranchSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\n\nconst BranchListView = ({\n  title = 'Branches',\n  description = 'here you can manage branches',\n  ...rest\n}) => {\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Branch\"}>\n      <Box type=\"primary\" title=\"Displaying branches\" icon=\"fa-building\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Branches\"\n              entitySingle=\"Branch\"\n              resource={`/api/v1/admin/branches`}\n              onDataUpdated={async (tableData) => {\n                BranchActions.setBranches(tableData)\n              }}\n              defaultSorted={\n                [{ dataField: 'id', order: 'asc' }]\n              }\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Branch ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'description',\n                  text: 'Description',\n                  sort: true,\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      required: true,\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    {\n                      id: \"description\",\n                      name: \"description\",\n                      label: \"Branch Description\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    description: yup.string(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default BranchListView;\n","import * as yup from \"yup\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { LocationActions } from \"src/slices/LocationSlice\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\n\nconst LocationListView = ({\n  ...rest\n}) => {\n\n  const joinChar = ' » ';\n\n  const [level, setLevel] = useState(0)\n  const [segments, setSegments] = useState([])\n\n  const rowActionButtons = useMemo(() => {\n    if (level > 1) {\n      return []\n    }\n    return [{\n      icon: 'fa-link',\n      type: 'primary',\n      text: 'Sublocations',\n      onClick: (id, row) => {\n        const _level = level + 1\n        const _segments = [...segments, row.title]\n        setSegments(_segments)\n        setLevel(_level)\n        pushQueryParams(rest.history, { level: _level, locationId: id, segments: _segments.join(',') })\n      }\n    }]\n  }, [level, segments, rest.history])\n\n  useEffect(() => {\n    const _handler = () => {\n      const params = parseQueryParams(rest.history)\n      const segments = (params['segments'] || '').split(',').filter(segment => !!segment)\n      setLevel(parseInt(params['level'] || 0))\n      setSegments(segments)\n    }\n    _handler();\n    const unlisten = rest.history.listen(_handler)\n    return unlisten\n  }, [rest.history])\n\n  return (\n    <Content title={['Manage Locations'].concat(segments).join(joinChar)} subTitle={['here you can manage locations'].concat(segments).join(joinChar)} browserTitle={segments.join(joinChar)}>\n      <Box type=\"primary\" title={['Displaying locations'].concat(segments).join(joinChar)} icon=\"fa-globe\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              actionColumnWidth={320}\n              entityPlural={['Locations'].concat(segments).join(joinChar)}\n              entitySingle={['Location'].concat(segments).join(joinChar)}\n              resource={`/api/v1/admin/locations`}\n              onDataUpdated={async (tableData) => LocationActions.setLocations(tableData)}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Location ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'email',\n                  text: 'Email',\n                  sort: true,\n                }\n              ]}\n              rowActionButtons={rowActionButtons}\n              beforeSave={(values) => {\n                const params = parseQueryParams(rest.history)\n                values['locationId'] = params['locationId'] || null\n                return values\n              }}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      required: true,\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    \n                    {\n                      id: \"email\",\n                      name: \"email\",\n                      label: \"Location Email\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    email: yup.string().email(),\n                    description: yup.string(),\n                  })\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default LocationListView;\n","import * as yup from \"yup\";\n\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { RankActions } from \"src/slices/RankSlice\";\n\nconst RankListView = ({\n  title = 'Ranks',\n  description = 'here you can manage ranks',\n  ...rest\n}) => {\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Rank\"}>\n      <Box type=\"primary\" title=\"Displaying ranks\" icon=\"fa-sort-numeric-up\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Ranks\"\n              entitySingle=\"Rank\"\n              defaultSorted={\n                [{ dataField: 'id', order: 'asc' }]\n              }\n              resource={`/api/v1/admin/ranks`}\n              onDataUpdated={async(tableData) => {\n                RankActions.setRanks(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Rank ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'description',\n                  text: 'Description',\n                  sort: true,\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      type: \"text\",\n                      required: true,\n                      cols: 12,\n                    },\n                    {\n                      id: \"description\",\n                      name: \"description\",\n                      label: \"Rank Description\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    description: yup.string(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\nexport default RankListView;\n","import httpClient from \"src/utils/httpClient\";\n\nconst rejectRegistration = async (id) => await httpClient.delete(`/api/v1/admin/registrations/${id}`);\nconst approveRegistration = async (id) => await httpClient.post(`/api/v1/admin/registrations/${id}`);\n\nconst RegistrationService = {\n  rejectRegistration,\n  approveRegistration,\n};\n\nexport default RegistrationService;\n","import { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport RegistrationService from \"src/services/RegistrationService\";\n\nconst STATUSES = {\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  PENDING: 'PENDING'\n}\n\nconst RegistrationListView = ({\n  title = 'Registrations',\n  description = 'here you can manage registrations',\n  ...rest\n}) => {\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Registration\"}>\n      <Box type=\"primary\" title=\"Displaying registrations\" icon=\"fa-user\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              actionColumnWidth={300}\n              entitySingle=\"Registration\"\n              entityPlural=\"Registrations\"\n              resource={`/api/v1/admin/registrations`}\n              rowActionButtons={[\n                {\n                  text: 'Approve',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === STATUSES.PENDING\n                  },\n                  onClick: async (id) => {\n                    await RegistrationService.approveRegistration(id)\n                  }\n                },\n                {\n                  text: 'Reject',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === STATUSES.PENDING\n                  },\n                  onClick: async (id) => {\n                    await RegistrationService.rejectRegistration(id)\n                  }\n                }\n              ]}\n              canAdd={false}\n              canEdit={false}\n              canDelete={false}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Registration ID',\n                  hidden: true,\n                }, {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'First Name',\n                  sort: true,\n\n                },\n                {\n                  dataField: 'middleName',\n                  text: 'Middle Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'lastName',\n                  text: 'Last Name',\n                  sort: true,\n                },\n\n                {\n                  dataField: 'ip',\n                  text: 'IP',\n                },\n                {\n                  dataField: 'port',\n                  text: 'Port',\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\n\nexport default RegistrationListView;\n","const { default: httpClient } = require(\"src/utils/httpClient\");\n\nconst getLocationList = async () => {\n    const data = await httpClient.get(\"/api/v1/locations\");\n    const locations = data?.success ? data.data : []\n    return locations\n}\n\nconst getBranchesList = async () => {\n    const data = await httpClient.get(\"/api/v1/branches\");\n    return data?.success ? data.data : []\n}\n\n\nconst getRanksList = async () => {\n    const data = await httpClient.get(\"/api/v1/ranks\");\n    return data?.success ? data.data : []\n}\n\n\nconst createDatabaseBackup = async () => await httpClient.post(`/api/v1/admin/db-backups`)\nconst getDashboardSummary = async () => await httpClient.get(`/api/v1/admin/dashboard`)\nconst getNmsDevicesStatus = async () => await httpClient.get(`/api/v1/admin/nms-devices/status`)\nconst getNotifications = async () => await httpClient.get(`/api/v1/admin/notifications`)\nconst CommonServerice = {\n    getLocationList,\n    getBranchesList,\n    getRanksList,\n    createDatabaseBackup,\n    getDashboardSummary,\n    getNmsDevicesStatus,\n    getNotifications\n}\nexport default CommonServerice\n","import * as yup from \"yup\";\n\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport CommonService from \"src/services/CommonService\";\nimport UserService from \"src/services/UserService\";\nimport { USER_STATUSES } from \"src/constants/global\";\n\nconst UserListView = ({\n  title = 'Users',\n  description = 'here you can manage users',\n  ...rest\n}) => {\n\n  const [locations, setLocations] = useState([])\n  const [branches, setBranches] = useState([])\n  const [ranks, setRanks] = useState([])\n  const [record, setRecord] = useState(null)\n  const [mode, setMode] = useState(null)\n\n  useEffect(() => {\n    (async () => {\n      setLocations(await CommonService.getLocationList())\n      setBranches(await CommonService.getBranchesList())\n      setRanks(await CommonService.getRanksList())\n    })();\n  }, [])\n\n  const fields = useMemo(() => {\n    const _fields = [\n      {\n        id: \"username\",\n        name: \"username\",\n        label: \"Username\",\n        required: true,\n        placeholder: \"Enter Username\",\n        type: \"text\",\n        cols: 6,\n      },\n      {\n        id: \"password\",\n        name: \"password\",\n        required: true,\n        label: \"Password\",\n        type: \"password\",\n        cols: 6,\n      },\n      {\n        id: \"firstName\",\n        name: \"firstName\",\n        label: \"First Name\",\n        required: true,\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"middleName\",\n        name: \"middleName\",\n        label: \"Middle Name\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"lastName\",\n        name: \"lastName\",\n        label: \"Last Name\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"locationId\",\n        name: \"locationId\",\n        label: \"Location\",\n        required: true,\n        type: \"select\",\n        options: locations.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"branchId\",\n        name: \"branchId\",\n        label: \"Branch\",\n        required: true,\n        type: \"select\",\n        options: branches.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"rankId\",\n        name: \"rankId\",\n        label: \"Rank\",\n        required: true,\n        type: \"select\",\n        options: ranks.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"ip\",\n        name: \"ip\",\n        label: \"IP\",\n        type: \"text\",\n        cols: 10,\n      },\n      {\n        id: \"port\",\n        name: \"port\",\n        label: \"Port\",\n        type: \"text\",\n        cols: 2,\n      },\n      {\n        id: \"addressLine1\",\n        name: \"addressLine1\",\n        label: \"Address Line 1\",\n        type: \"textarea\",\n        cols: 6,\n      },\n      {\n        id: \"addressLine2\",\n        name: \"addressLine2\",\n        label: \"Address Line 2\",\n        type: \"textarea\",\n        cols: 6,\n      },\n    ]\n    if (record && record?.id) {\n     // return _fields.filter(field => !['password', 'username'].includes(field.name))\n    }\n    return _fields\n  }, [locations, ranks, branches, record])\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Users\"}>\n      <Box type=\"primary\" title=\"Displaying users\" icon=\"fa-user\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              actionColumnWidth={300}\n              {...rest}\n              rowActionButtons={[\n                {\n                  text: 'Block',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.ACTIVE\n                  },\n                  onClick: async (id) => {\n                    await UserService.blockUser(id)\n                  }\n                },\n                {\n                  text: 'Unblock',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.DISABLED\n                  },\n                  onClick: async (id) => {\n                    await UserService.unblockUser(id)\n                  }\n                }\n              ]}\n              entitySingle=\"User\"\n              entityPlural=\"Users\"\n              resource={`/api/v1/admin/users`}\n              onFormShow={(row, mode) => {\n                setRecord(row)\n                setMode(mode)\n              }}\n              formOptions={\n                {\n                  fields,\n                  validationSchema: yup.object().shape({\n                    username: yup.string().required(),\n                    firstName: yup.string().required(),\n                    password: yup.string().required(),\n                    locationId: yup.string().required(),\n                    branchId: yup.string().required(),\n                    rankId: yup.string().required(),\n                  }),\n                }\n              }\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'User ID',\n                  hidden: true,\n                }, {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'branchId',\n                  text: 'Branch',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return branches.find(b => `${b.id}` === `${row.branchId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'rankId',\n                  text: 'Rank',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return ranks.find(r => `${r.id}` === `${row.rankId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'locationId',\n                  text: 'Location',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return locations.find(l => `${l.id}` === `${row.locationId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n                {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    return [row.ip, row.port].filter(x => !!x).join(\":\")\n                  }\n\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default UserListView;\n","import { Box, Col, Content, Infobox2, Row } from \"adminlte-2-react\";\nimport React, { useEffect, useState } from \"react\";\nimport CommonService from \"src/services/CommonService\";\n\n\nimport {\n  REGISTRATION_LIST_PAGE,\n  USER_LIST_PAGE,\n  NMS_LIST_PAGE,\n  DEVICE_MAMAGEMENT_ROUTE,\n  SUPER_USER_LIST_PAGE,\n  ONLINE_USERS_ROUTE} from \"src/constants/global\";\n\nconst DashboardView = ({\n  title = \"System Overview\",\n  description,\n  ...rest\n}) => {\n\n  const NAVIGATION_CARDS = {\n    totalUsers: { text: \"Total Users\", icon: \"fa-users\", to: USER_LIST_PAGE, color: 'orange' },\n    totalOnlineUsers: { text: \"Total Online Users\", icon: \"fa-users\", to: ONLINE_USERS_ROUTE, color: 'teal' },\n    totalSuperUsers: { text: \"Total Super Users\", icon: \"fa-users\", to: SUPER_USER_LIST_PAGE, color: 'purple' },\n    totalNmsDevices: { text: \"Total NMS Monitored Devices\", icon: \"fa-laptop\", to: NMS_LIST_PAGE, color: 'purple' },\n    totalDevices: { text: \"Total devices in directory\", icon: \"fa-laptop\", to: DEVICE_MAMAGEMENT_ROUTE, color: 'orange' },\n    totalPendingRequests: { text: \"Pending registration requests\", icon: \"fa-tasks\", to: REGISTRATION_LIST_PAGE, color: 'teal' }\n  }\n\n  const [summary, setSummary] = useState({\n    totalUsers: 0,\n    totalOnlineUsers: 0,\n    totalSuperUsers: 0,\n    totalNmsDevices: 0,\n    totalDevices: 0,\n    totalPendingRequests: 0\n  })\n\n  useEffect(() => {\n    (async () => {\n      const data = await CommonService.getDashboardSummary()\n      data?.data && setSummary(data.data)\n    })()\n  }, [])\n\n  return (\n\n    <Content title={[title]} subTitle={description} browserTitle={title}>\n        <Row>\n          {Object.keys(NAVIGATION_CARDS).map((key) => {\n            const card = NAVIGATION_CARDS[key]\n            return (\n              <Col key={key} md={4}>\n                <Box color={card.color} type=\"success\" icon={card.icon}>\n                  <Infobox2 title={summary[key] || 0} {...card} />\n                </Box>\n              </Col>\n            );\n          })}\n        </Row>\n    </Content>\n  );\n};\n\n\nexport default DashboardView","import { Callout } from \"adminlte-2-react\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { dismissGlobalError } from \"src/utils/storeHelper\";\nimport Dialog from \"./Dialog\";\n\nconst GlobalToast = ({\n    globalMessage = {}\n}) => {\n    if (!globalMessage || !globalMessage.message) {\n        return <React.Fragment />\n    }\n    return (\n        <Dialog\n            canDismiss={true}\n            title={''}\n            size='xl'\n            show={globalMessage.message}\n            zIndex={9999}\n            onDismiss={() => {\n                dismissGlobalError();\n            }}>\n            <Callout className=\"rounded-0\" title={globalMessage.title}\n                type={globalMessage.type}>{globalMessage.message}</Callout>\n        </Dialog>\n    )\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        globalMessage: state.globalState?.globalMessage || {}\n    };\n};\n\n\nexport default connect(mapStateToProps, null)(GlobalToast);\n","import * as yup from \"yup\";\nimport { NmsDeviceActions } from \"src/slices/NmsDeviceSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useEffect, useState } from \"react\";\nimport CommonServerice from \"src/services/CommonService\";\nimport { connect } from \"react-redux\";\nimport { SETTINGS_CONFIG } from \"src/constants/global\";\n\nconst NmsDeviceListView = ({\n  title = 'Manage NMS Devices',\n  description = 'here you can manage devices',\n  settings = [],\n  ...rest\n}) => {\n  const [deviceStatus, setDeviceStatus] = useState({})\n  const [checkInterval, setCheckInterval] = useState(5000)\n\n  useEffect(() => {\n    const interval = settings.find(s => s.name === SETTINGS_CONFIG.SNMP_CHECK_INTERVAL)?.value || 5\n    setCheckInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const data = await CommonServerice.getNmsDevicesStatus()\n      data?.success && setDeviceStatus(data.data)\n    }, checkInterval * 1000)\n    return () => clearInterval(interval)\n  }, [checkInterval])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={title}>\n      <Box type=\"primary\" title=\"Displaying devices\" icon=\"fa-laptop\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Devices\"\n              entitySingle=\"Device\"\n              resource={`/api/v1/admin/nms-devices`}\n              onDataUpdated={async (tableData) => {\n                NmsDeviceActions.setNmsDevices(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Device ID',\n                  hidden: true,\n                }, {\n                  dataField: 'name',\n                  text: 'Name',\n                  sort: true,\n                }, {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    let address = 'http://'+ row['ip'] + (row['port'] ? `:${row['port']}`: '') \n                    return <a href={address}>{address}</a>\n                  }\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  formatter: (c, row) => {\n                    return deviceStatus[row.ip]?.isOnline ? <strong style={{color: '#0f0'}}>Online</strong>: <strong style={{color: '#f00'}}>Offline</strong>\n                  }\n                },\n                {\n                  dataField: 'sysName',\n                  text: 'Device System Name',\n                  width:100,\n                  formatter: (c, row) => {\n                    const str = deviceStatus[row.ip]?.systemName\n                    try{\n                      return atob(str).split(\",\").join(\"\\n\")\n                    }catch(e){\n                      return \"Unknown\"\n                    }\n                  }\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"ip\",\n                      name: \"ip\",\n                      label: \"IP\",\n                      type: \"text\",\n                      cols: 10,\n                      required: true,\n                    },\n                    {\n                      id: \"port\",\n                      name: \"port\",\n                      label: \"Port\",\n                      type: \"text\",\n                      cols: 2,\n                    },\n                    {\n                      id: \"name\",\n                      name: \"name\",\n                      label: \"Device Name\",\n                      type: \"text\",\n                      required: true,\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    ip: yup.string().required(),\n                    name: yup.string().required(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    settings: state.globalState?.settings || []\n  };\n};\n\nexport default connect(mapStateToProps, null)(NmsDeviceListView);\n","import React, { useMemo } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport CommonServerice from \"src/services/CommonService\";\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\n\nconst { default: EntityForm } = require(\"../EntityForm\")\n\nconst LocationFilter = ({\n    label = \"Filter by location\",\n    cols = 12,\n    ...rest\n}) => {\n    const [locations, setLocations] = useState([])\n    const [locationId, setLocationId] = useState(null)\n\n    const getFilterValue = () => {\n        return parseQueryParams(rest.history, 'locationId', null)\n    }\n\n    useEffect(() => {\n        (async () => {\n            setLocations(await CommonServerice.getLocationList())\n        })();\n    }, [])\n\n    useEffect(() => {\n        setLocationId(getFilterValue())\n        const unlisten = rest.history.listen((...args) => {\n            setLocationId(getFilterValue())\n        })\n        return unlisten\n    }, [])\n\n    return (\n        <div className={`col-md-${cols}`}>\n            <div style={{ display: 'flex', alignContent: 'center', justifyContent: 'center', alignItems: 'center' }}>\n                <label className=\"mr-2\" style={{ whiteSpace: 'nowrap' }}>Filter by location:</label>\n                <select\n                    className=\"form-control\"\n                    id=\"locationId\"\n                    name=\"locationId\"\n                    value={locationId || 0}\n                    onChange={(e) => {\n                        const value = e.nativeEvent.target.value\n                        pushQueryParams(rest.history, {\n                            locationId: value || null\n                        }, true)\n                    }}\n                >\n                    <option>Choose location</option>\n                    {locations.map(l => {\n                    return <option key={l.id} value={l.id}>{l.title}</option>\n                })}\n                </select>\n            </div>\n        </div>\n    )\n}\n\nexport default LocationFilter","import React, { useMemo } from \"react\";\nimport { clearQueryParams } from \"src/utils/routerHelper\";\n\nconst ClearFilterButton = ({\n    history,\n    title = 'Clear Filters',\n    filtersToClear = ['locationId', 'start', 'end'],\n    cols = 2\n}) => {\n    return (\n        <div className={`col-md-${cols}`}>\n            <span className=\"btn btn-danger\" onClick={() => {\n                clearQueryParams(history, filtersToClear)\n            }}>\n                {title}\n            </span>\n        </div>\n    )\n}\n\nexport default ClearFilterButton;","import * as yup from \"yup\";\nimport { DeviceActions } from \"src/slices/DeviceSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport CommonService from \"src/services/CommonService\";\nimport { useEffect, useState } from \"react\";\nimport LocationFilter from \"src/components/filters/LocationFilter\";\nimport ClearFilterButton from \"src/components/filters/ClearFilter\";\n\nconst DeviceListView = ({\n  title = 'Manage Devices',\n  description = 'here you can manage devices directory',\n  ...rest\n}) => {\n\n  const [locations, setLocations] = useState([])\n  useEffect(() => {\n    (async () => {\n      setLocations(await CommonService.getLocationList())\n    })();\n  }, [])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={title}>\n      <Box type=\"primary\" title=\"Displaying devices\" icon=\"fa-tools\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Devices\"\n              entitySingle=\"Device\"\n              resource={`/api/v1/admin/devices`}\n              filterComponents={[\n                <LocationFilter history={rest.history} key={'location_filter'} cols={4} />,\n                <ClearFilterButton history={rest.history} key={'clearfilter'} />\n              ]}\n              onDataUpdated={async (tableData) => {\n                DeviceActions.setDevices(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Device ID',\n                  hidden: true,\n                },{\n                  dataField: 'name',\n                  text: 'Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'locationId',\n                  text: 'Location',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return locations.find(l => `${l.id}` === `${row.locationId}`)?.title || '-'\n                  }\n                },\n                 {\n                  dataField: 'ip',\n                  text: 'IP',\n                  sort: true,\n                  formatter: (c, row) => {\n                    let address = 'http://'+ row['ip'] + (row['port'] ? `:${row['port']}`: '') \n                    return <a href={address}>{address}</a>\n                  }\n                },\n\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"ip\",\n                      name: \"ip\",\n                      label: \"IP\",\n                      type: \"text\",\n                      cols: 10,\n                      required: true,\n                    },\n                    {\n                      id: \"port\",\n                      name: \"port\",\n                      label: \"Port\",\n                      type: \"text\",\n                      cols: 2,\n                    },\n                    {\n                      id: \"name\",\n                      name: \"name\",\n                      label: \"Device Name\",\n                      type: \"text\",\n                      cols: 12,\n                      required: true,\n                    },\n                    {\n                      id: \"locationId\",\n                      name: \"locationId\",\n                      label: \"Location\",\n                      type: \"select\",\n                      required: true,\n                      options: locations.map(l => {\n                        return {\n                          key: l.id,\n                          value: l.title\n                        }\n                      }),\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    ip: yup.string().required(),\n                    name: yup.string().required(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default DeviceListView;\n","import { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport UserService from \"src/services/UserService\";\nimport { USER_ROLES, USER_STATUSES } from \"src/constants/global\";\nimport CommonServerice from \"src/services/CommonService\";\n\nconst AdminListView = ({\n  title = 'Super Users',\n  description = 'here you can manage super users',\n  currentUser,\n  ...rest\n}) => {\n\n  const [locations, setLocations] = useState([])\n\n  useEffect(() => {\n    (async () => {\n      setLocations(await CommonServerice.getLocationList())\n    })();\n  }, [])\n\n  const fields = useMemo(() => {\n    const _fields = [\n      {\n        id: \"username\",\n        name: \"username\",\n        label: \"Username\",\n        required: true,\n        placeholder: \"Enter Username\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"password\",\n        name: \"password\",\n        label: \"Password\",\n        required: true,\n        type: \"password\",\n        cols: 4,\n      },\n      {\n        id: \"role\",\n        name: \"role\",\n        label: \"Role\",\n        type: \"select\",\n        required: true,\n        cols: 4,\n        options: [USER_ROLES.ADMIN, USER_ROLES.SUPERADMIN].map(role => {\n          return {\n            key: role,\n            value: role\n          }\n        })\n      },\n      {\n        id: \"locationId\",\n        name: \"locationId\",\n        label: \"Location\",\n        required: true,\n        type: \"select\",\n        options: locations.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 3,\n      },\n      {\n        id: \"firstName\",\n        name: \"firstName\",\n        label: \"First Name\",\n        required: true,\n        type: \"text\",\n        cols: 3,\n      },\n      {\n        id: \"middleName\",\n        name: \"middleName\",\n        label: \"Middle Name\",\n        type: \"text\",\n        cols: 3,\n      },\n      {\n        id: \"lastName\",\n        name: \"lastName\",\n        label: \"Last Name\",\n        type: \"text\",\n        cols: 3,\n      },\n    ]\n    return _fields\n  }, [locations])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage CTMS Users\"}>\n      <Box type=\"primary\" title=\"Displaying CTMS users\" icon=\"fa-users\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              actionColumnWidth={280}\n              canDeleteFn={(row) =>  row?.id !== currentUser?.id}\n              {...rest}\n              rowActionButtons={[\n                {\n                  text: 'Block',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.ACTIVE && row.id !== currentUser?.id\n                  },\n                  onClick: async (id) => {\n                    await UserService.blockUser(id)\n                  }\n                },\n                {\n                  text: 'Unblock',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.DISABLED && row.id !== currentUser?.id\n                  },\n                  onClick: async (id) => {\n                    await UserService.unblockUser(id)\n                  }\n                }\n              ]}\n              entitySingle=\"Super User\"\n              entityPlural=\"Super Users\"\n              resource={`/api/v1/admin/superusers`}\n              formOptions={{\n                fields\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'User ID',\n                  hidden: true,\n                }, {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'role',\n                  text: 'Role',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    const youString = row.id === currentUser?.id ? ' (You) ': ''\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \") + youString\n                  }\n\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default AdminListView;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst OnLineUsersView = ({\n  title = 'Current Users',\n  description = 'here you can see currently active users',\n  ...rest\n}) => {\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Current Users\"}>\n      <Box type=\"success\" title=\"Displaying current users\" icon=\"fa-users\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              canAdd={false}\n              canEdit={false}\n              canDelete={false}\n              {...rest}\n              entitySingle=\"User\"\n              entityPlural=\"Users\"\n              resource={`/api/v1/admin/users/online`}\n              columns={[\n                {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n                {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    return [row.ip, row.port].filter(x => !!x).join(\":\")\n                  }\n\n                },\n                {\n                  dataField: 'lastVisited',\n                  text: 'Last Visited',\n                  formatter: (c, row) => {\n                    return humanFriendlyDateFormat(row['lastVisited'])\n                  }\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default OnLineUsersView;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport CommonService from \"src/services/CommonService\";\nimport { formatBytesToString, humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst BackupsListView = ({\n    title = 'Database backups',\n    description = 'here you can see currently active users',\n    ...rest\n}) => {\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Database backups\"}>\n            <Box type=\"success\" title=\"Displaying latest 100 backup files\" icon=\"fa-download\">\n                <Row>\n                    <Col md={12}>\n                        <DataGridComponent\n                            modalSize=\"lg\"\n                            canAdd={false}\n                            canEdit={false}\n                            canDelete={false}\n                            {...rest}\n                            entitySingle=\"Backup\"\n                            entityPlural=\"Backups\"\n                            resource={`/api/v1/admin/db-backups`}\n                            globalActionButtons={[\n                                {\n                                    text: 'Create Backup',\n                                    icon: 'fa-plus',\n                                    type: 'success',\n                                    onClick: async () => {\n                                        await CommonService.createDatabaseBackup()\n                                    }\n                                },]\n                            }\n                            columns={[\n                                {\n                                    dataField: 'filename',\n                                    text: 'Backup file name',\n                                },\n                                {\n                                    dataField: 'size',\n                                    text: 'Size',\n                                    formatter: (c, row) => {\n                                        return formatBytesToString(row['size'])\n                                    }\n                                }, {\n                                    dataField: 'createdOn',\n                                    text: 'Created',\n                                    formatter: (c, row) => {\n                                        return humanFriendlyDateFormat(row['createdOn'])\n                                    }\n                                },\n                            ]}\n                        />\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default BackupsListView;\n","import 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\nimport { isBefore, isDate, subDays, subYears } from \"date-fns\";\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { convertToDate, formatMySql } from \"src/utils/commonHelper\";\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\nimport { DateRangePicker } from 'react-date-range';\nimport { Button } from 'adminlte-2-react';\nimport Dialog from '../Dialog';\n\nconst DateFilter = ({\n    label = \"Filter by date\",\n    cols = 12,\n    ...rest\n}) => {\n    const [showPicker, setShowPicker] = useState(false)\n    const [state, setState] = useState([]);\n\n    const getFilterValue = () => {\n        const defaultStart = subDays(new Date(), 7)\n        const defaultEnd = subDays(new Date(), 7)\n        let start = parseQueryParams(rest.history, 'start', null)\n        let end = parseQueryParams(rest.history, 'end', null)\n\n        start = isDate(start) ? convertToDate(start) : defaultStart\n        end = isDate(end) ? convertToDate(end) : defaultEnd\n\n        if (!isBefore(start, end)){\n            start = subDays(end, 7)\n        }\n\n        setState([\n            {\n                startDate: start,\n                endDate: end,\n                key: 'selection'\n            }\n        ])\n    }\n\n    useEffect(() => {\n        getFilterValue();\n        const unlisten = rest.history.listen(() => {\n            getFilterValue();\n        })\n        return unlisten\n    }, [])\n\n\n    return (\n        <div className={`col-md-${cols}`}>\n            {state.length > 0 && <Button disabled text={`Showing results from ${formatMySql(state[0].startDate)} to ${formatMySql(state[0].endDate)}`} />}\n            <Button type=\"success\" onClick={() => setShowPicker(true)} icon=\"fa-calendar\" text=\"Filter by Date\" />\n            <Dialog show={showPicker} size=\"lg\" title=\"Choose dates\"\n                onDismiss={() => {\n                    setShowPicker(false)\n                }}\n             onSuccess={() => {\n                setShowPicker(false)\n                pushQueryParams(rest.history, {\n                    start: formatMySql(state[0].startDate),\n                    end: formatMySql(state[0].endDate)\n                })\n            }} acceptText=\"Search\">\n                {state.length > 0 && <DateRangePicker\n                    minDate={subYears(new Date(), 1)}\n                    maxDate={new Date()}\n                    onChange={item => {\n                        setState([item.selection])\n                    }}\n                    showSelectionPreview={true}\n                    moveRangeOnFirstSelection={false}\n                    months={2}\n                    ranges={state}\n                    direction=\"horizontal\"\n                />}\n            </Dialog>\n        </div>\n    )\n}\n\nexport default DateFilter","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport ClearFilterButton from \"src/components/filters/ClearFilter\";\nimport DateFilter from \"src/components/filters/DateFilter\";\nimport LocationFilter from \"src/components/filters/LocationFilter\";\nimport { formatUserName, humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst ReportListView = ({\n    title = 'Reports',\n    description = 'here you can see various activity by users',\n    ...rest\n}) => {\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Reports\"}>\n            <Box type=\"success\" title=\"Displaying activity reports\" icon=\"fa-chart-line\">\n                <Row>\n                    <Col md={12}>\n                        <DataGridComponent\n                            modalSize=\"lg\"\n                            canAdd={false}\n                            canEdit={false}\n                            canDelete={false}\n                            {...rest}\n                            filterComponents={[\n                                <DateFilter history={rest.history} key={'date_filter'} cols={5} />,\n                                <LocationFilter history={rest.history} key={'location_filter'} cols={4} />,\n                                <ClearFilterButton history={rest.history} cols={2} key={'clear_filter'} />\n                            ]}\n                            entitySingle=\"User\"\n                            entityPlural=\"Users\"\n                            resource={`/api/v1/admin/reports`}\n                            columns={[\n                                {\n                                    dataField: 'entity',\n                                    text: 'Entity',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return <strong>{`${row['entity']}`.toUpperCase()}</strong>\n                                    },\n                                },\n                                {\n                                    dataField: 'entityAction',\n                                    text: 'Action',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return row['entityAction'].split('_').join(\" \")\n                                    },\n                                },\n                                {\n                                    dataField: 'modifiedById',\n                                    text: 'Action Taken By',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return row['modifiedBy'] ? (row['modifiedBy']?.username || row['modifedById']) : \"-\"\n                                    },\n                                },\n                                {\n                                    dataField: 'additionalInfo',\n                                    text: 'Comments',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return `${row['additionalInfo']}`\n                                    },\n                                },\n                                {\n                                    dataField: 'createdAt',\n                                    text: 'Action Performed on',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return `${humanFriendlyDateFormat(row['createdAt'])}`\n                                    },\n                                }\n                            ]}\n                        />\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default ReportListView;\n","import httpClient from \"src/utils/httpClient\";\n\nconst getWebsiteSettings = async () => await httpClient.get(\"/api/v1/admin/settings\");\nconst saveWebsiteSetting = async (settingData) => await httpClient.put(\"/api/v1/admin/settings\", settingData);\n\nconst SettingService = {\n  getWebsiteSettings,\n  saveWebsiteSetting\n};\n\nexport default SettingService;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useMemo, useState } from \"react\";\nimport SettingService from \"src/services/SettingService\";\nimport PhotoThumb from \"src/components/PhotoThumb\";\nimport { connect } from \"react-redux\";\nimport { GlobalActions } from \"src/slices/globalSlice\";\n\nconst SettingsListView = ({\n  title = 'Configurations',\n  description = 'here you can manage configurations',\n  triggerGetSettings,\n  ...rest\n}) => {\n\n  const [settings, setSettings] = useState([])\n  const [record, setCurrentRecord] = useState(null)\n\n  const fields = useMemo(() => {\n    if (record) {\n      return settings.filter(setting => setting.id === record.id)\n    }\n    return []\n  }, [record, settings])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Configuration\"}>\n      <Box type=\"primary\" title=\"Displaying configurations\" icon=\"fa-cog\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              hideIdOnEdit={true}\n              entityPlural=\"Configurations\"\n              entitySingle=\"Configuration\"\n              canAdd={false}\n              canEdit={true}\n              canDelete={false}\n              resource={`/api/v1/admin/settings`}\n              onFormShow={(row) => {\n                setCurrentRecord(row)\n              }}\n              onDataUpdated={(data) => {\n                triggerGetSettings()\n                setSettings(data.results)\n              }}\n              columns={[\n                {\n                  dataField: 'label',\n                  text: 'Setting Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'value',\n                  text: 'Setting Value',\n                  sort: true,\n                  formatter: (c, row) => {\n                    if (row.type === 'upload') {\n                      return <PhotoThumb border={false} width={50} height={50} url={row.value} />\n                    }\n                    return row['value']\n                  }\n                }\n              ]}\n              formOptions={\n                {\n                  fields\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    triggerGetSettings: async () => {\n      const data = await SettingService.getWebsiteSettings()\n      data?.success && dispatch(GlobalActions.setWebsiteSettings(data.data))\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SettingsListView);\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport { useEffect, useState } from \"react\";\nimport { SETTINGS_CONFIG } from \"src/constants/global\";\nimport SettingService from \"src/services/SettingService\";\n\nconst READ_SETTINGS = [\n    SETTINGS_CONFIG.EMAIL_SALES,\n    SETTINGS_CONFIG.LANDLINE_SALES,\n    SETTINGS_CONFIG.LANDLINE_SUPPORT,\n    SETTINGS_CONFIG.EMAIL_SUPPORT\n]\nconst ContactUsView = ({\n    title = 'Contact Us',\n    description = 'contact information',\n    ...rest\n}) => {\n    const [settings, setSettings] = useState([])\n    useEffect(() => {\n        (async () => {\n            const data = await SettingService.getWebsiteSettings()\n            if (data?.success && data?.data?.results) {\n                const _settings = (data.data.results || []).filter(setting => READ_SETTINGS.includes(setting.name))\n                setSettings(_settings)\n            }\n        })()\n    }, [])\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Contact us\"}>\n            <Box type=\"success\" title=\"Displaying contact information\" icon=\"fa-phone-alt\">\n                <Row>\n                    <Col md={12}>\n                        <table className=\"table table-bordred table-striped\">\n                            <tbody>\n                            {settings.map((setting) => {\n                                return (\n                                    <tr>\n                                        <td>{setting.label}</td>\n                                        <td>{setting.value || setting.default}</td>\n                                    </tr>\n                                );\n                            })}\n                            </tbody>\n                        </table>\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default ContactUsView;\n","import { connect } from \"react-redux\";\r\nimport UserService from \"src/services/UserService\";\r\nimport { CurrentUserActions } from \"src/slices/currentUserSlice\";\r\nimport AdminLTE, { Alert, Button, Navbar, Sidebar, } from \"adminlte-2-react\";\r\nimport LoginForm from \"src/components/LoginForm\";\r\nimport { BrowserRouter, Link } from \"react-router-dom\";\r\nimport { navigateToLogin } from \"src/utils/routerHelper\";\r\nimport {\r\n  BRANCH_LIST_PAGE,\r\n  LOCATION_LIST_PAGE,\r\n  NAV_ITEMS,\r\n  RANK_LIST_PAGE,\r\n  REGISTRATION_LIST_PAGE,\r\n  USER_LIST_PAGE,\r\n  DASHBOARD_ROUTE,\r\n  LOGOUT_ROUTE,\r\n  NMS_LIST_PAGE,\r\n  DEVICE_MAMAGEMENT_ROUTE,\r\n  SUPER_USER_LIST_PAGE,\r\n  ONLINE_USERS_ROUTE,\r\n  BACKUPS_LIST,\r\n  REPORTS_LIST_PAGE,\r\n  SETTINGS_PAGE,\r\n  CONTACT_PAGE,\r\n  SETTINGS_CONFIG\r\n} from \"src/constants/global\";\r\n\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport BranchListView from \"src/modules/branches/views/BranchListView\";\r\nimport LocationListView from \"src/modules/locations/views/LocationListView\";\r\nimport RankListView from \"src/modules/ranks/views/RankListView\";\r\nimport RegistrationListView from \"src/modules/registrations/views/RegistrationListView\";\r\nimport UserListView from \"src/modules/users/UserListView\";\r\nimport DashboardView from \"src/modules/dashboard/views/DashboardView\";\r\nimport GlobalToast from \"src/components/GlobalToast\";\r\nimport NmsDeviceListView from \"src/modules/nms-devices/views/NmsDevicesListView\";\r\nimport DeviceListView from \"src/modules/device-directory/views/DevicesListView\";\r\nimport AdminListView from \"src/modules/users/AdminListView\";\r\nimport OnLineUsersView from \"src/modules/users/OnlineUsersView\";\r\nimport BackupsListView from \"src/modules/backups/BackupsListView\";\r\nimport ReportListView from \"src/modules/reports/ReportListView\";\r\nimport SettingsListView from \"src/modules/settings/SettingsListView\";\r\nimport ContactUsView from \"src/modules/contact_us/ContactUsView\";\r\nimport { format } from \"date-fns\";\r\nimport SettingService from \"src/services/SettingService\";\r\nimport { GlobalActions } from \"src/slices/globalSlice\";\r\nimport CommonServerice from \"src/services/CommonService\";\r\n\r\nconst { Entry } = Navbar\r\n\r\nconst Footer = () => {\r\n  const title = `©️ ${format(new Date(), 'yyyy')} MCIL. All Rights Reserved.`\r\n  return (\r\n    <div className=\"text-center\" style={{ color: '#444', padding: \"15px 0\", margin: 0, marginLeft: 200, background: '#eee', borderTop: 'solid 1px #ccc' }}>\r\n      <p><strong>{title}</strong></p>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Layout = ({ \r\n  triggerLogin,\r\n  triggerGetCurrentUser,\r\n  triggerGetSettings,\r\n  currentUser,\r\n  settings\r\n}) => {\r\n  const [logo, setLogo] = useState('/default_logo.png')\r\n  const [notifications, setNotifications] = useState([])\r\n\r\n  const fetchNotifications = useCallback(async() => {\r\n    const data = await CommonServerice.getNotifications()\r\n    data?.success && setNotifications(data.data ?? [])\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    triggerGetCurrentUser()\r\n    triggerGetSettings()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const l = settings.find(setting => setting.name === SETTINGS_CONFIG.LOGO)?.value || '/default_logo.png'\r\n    setLogo(l)\r\n  },[settings])\r\n\r\n  useEffect(() => {\r\n      setTimeout(() => {\r\n        const eleme = document.querySelector('a.logo')\r\n        eleme && (eleme.style.background = `url(${logo})`)\r\n      }, 200)\r\n  },[logo])\r\n\r\n  useEffect(() => {\r\n    (async() => {\r\n      await fetchNotifications()\r\n    })()\r\n    const interval = setInterval(fetchNotifications, 20000)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  const isLoggedIn = !!currentUser\r\n  if (!isLoggedIn) {\r\n    return (\r\n      <BrowserRouter>\r\n        <GlobalToast />\r\n        <LoginForm triggerLogin={triggerLogin} />\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      {notifications.length > 0 && notifications.map(n => {\r\n        return (\r\n          <div key={n.message} className=\"notification-alert-box\">\r\n            <Alert title={n.message} icon={`fa-bell`} style={{ borderRadius: '0 !important' }} type={n.type} >\r\n              <a className=\"visit\" href={n.path} title={\"View details\"} >View details</a>\r\n            </Alert>\r\n          </div>\r\n        )\r\n      })}\r\n      <GlobalToast />\r\n      <AdminLTE footer={<Footer />} theme=\"black\" title={[]}>\r\n        <Navbar.Core>\r\n          <Entry to={LOGOUT_ROUTE} labelValue=\"Logout\" icon=\"fa-power-off\" labelType=\"danger\" onClick={() => navigateToLogin()} />\r\n        </Navbar.Core>\r\n        <Sidebar.Core>\r\n          {\r\n            NAV_ITEMS.map((item, index) => {\r\n              if (item.items && item.items.length > 0) {\r\n                return (<Sidebar.Item onClick={item.onClick} key={index} icon={item.icon} text={item.title} to={item.path} color={item.color ?? 'gray'}>\r\n                  {(item.items || []).map((childItem, childIndex) => {\r\n                    return <Sidebar.Item onClick={childItem.onClick} key={`${index}-child-${childIndex}`} icon={childItem.icon} text={childItem.title} to={childItem.path} color={childItem.color ?? 'gray'} />\r\n                  })}\r\n                </Sidebar.Item>)\r\n              }\r\n              return <Sidebar.Item onClick={item.onClick} key={`${index}`} icon={item.icon} text={item.title} to={item.path} color={item.color ?? 'gray'} />\r\n            })\r\n          }\r\n        </Sidebar.Core>\r\n        <BranchListView currentUser={currentUser} path={BRANCH_LIST_PAGE} exact={true} />\r\n        <LocationListView currentUser={currentUser} path={LOCATION_LIST_PAGE} exact={true} />\r\n        <RankListView currentUser={currentUser} path={RANK_LIST_PAGE} exact={true} />\r\n        <RegistrationListView currentUser={currentUser} path={REGISTRATION_LIST_PAGE} exact={true} />\r\n        <UserListView currentUser={currentUser} path={USER_LIST_PAGE} exact={true} />\r\n        <DashboardView currentUser={currentUser} path={DASHBOARD_ROUTE} exact={true} />\r\n        <NmsDeviceListView currentUser={currentUser} path={NMS_LIST_PAGE} exact={true} />\r\n        <DeviceListView currentUser={currentUser} path={DEVICE_MAMAGEMENT_ROUTE} exact={true} />\r\n        <AdminListView currentUser={currentUser} path={SUPER_USER_LIST_PAGE} exact={true} />\r\n        <OnLineUsersView currentUser={currentUser} path={ONLINE_USERS_ROUTE} exact={true} />\r\n        <BackupsListView currentUser={currentUser} path={BACKUPS_LIST} exact={true} />\r\n        <ReportListView currentUser={currentUser} path={REPORTS_LIST_PAGE} exact={true} />\r\n        <SettingsListView currentUser={currentUser} path={SETTINGS_PAGE} exact={true} />\r\n        <ContactUsView currentUser={currentUser} path={CONTACT_PAGE} exact={true} />\r\n      </AdminLTE>\r\n    </React.Fragment>\r\n\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentUser: state.currentUserState?.currentUser || null,\r\n    settings: state.globalState?.settings || null\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    triggerLogin: async ({ username, password }, history) => {\r\n      const data = await UserService.loginUser(username, password);\r\n      data?.success && dispatch(CurrentUserActions.setUserState(data.data));\r\n      return data;\r\n    },\r\n    triggerGetCurrentUser: async () => {\r\n      const data = await UserService.getCurrentUser()\r\n      data?.success && dispatch(CurrentUserActions.setCurrentUser(data.data))\r\n    },\r\n    triggerGetSettings: async () => {\r\n      const data = await SettingService.getWebsiteSettings()\r\n      data?.success && dispatch(GlobalActions.setWebsiteSettings(data.data))\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Layout from \"./layouts\";\nimport store from \"./store/store\";\nimport { Provider } from \"react-redux\";\nimport 'react-quill/dist/quill.snow.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'src/assets/style.css'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.Fragment>\n      <Layout />\n    </React.Fragment>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","const LocalStorageHelper = {\n  store: (key, value) => {\n    if (key && value) {\n      window.localStorage.setItem(key, JSON.stringify(value));\n    }\n  },\n  get: (key) => {\n    if (key) {\n        let value = window.localStorage.getItem(key);\n        try{\n            return JSON.parse(value);\n        }catch(e){\n            return value || null\n        }\n    }\n  },\n  delete: (key) => {\n      if(key){\n         localStorage.removeItem(key);\n      }\n  }\n};\n\nexport default LocalStorageHelper\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: RegistrationReducer, actions: RegistrationActions } = createSlice(\n  {\n    name: \"registrationSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n    },\n    reducers: {\n      setRegistrations: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: UserReducer, actions: UserActions } = createSlice(\n  {\n    name: \"userSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n    },\n    reducers: {\n      setUsers: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport thunk from \"redux-thunk\";\r\nimport { RegistrationReducer } from \"src/slices/RegistrationSlice\";\r\nimport { RankReducer } from \"src/slices/RankSlice\";\r\nimport { BranchReducer } from \"src/slices/BranchSlice\";\r\nimport { LocationReducer } from \"src/slices/LocationSlice\";\r\nimport { GlobalReducer } from \"src/slices/globalSlice\";\r\nimport { CurrentUserReducer } from \"src/slices/currentUserSlice\";\r\nimport { NmsDeviceReducer } from \"src/slices/NmsDeviceSlice\";\r\nimport { DeviceReducer } from \"src/slices/DeviceSlice\";\r\nimport { UserReducer as UserManagementReducer } from \"src/slices/UserSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    globalState: GlobalReducer,\r\n    currentUserState: CurrentUserReducer,\r\n    rankState: RankReducer,\r\n    branchState: BranchReducer,\r\n    locationState: LocationReducer,\r\n    registrationState: RegistrationReducer,\r\n    nmsState: NmsDeviceReducer,\r\n    deviceState: DeviceReducer,\r\n    userState: UserManagementReducer\r\n  },\r\n  middleware: [thunk],\r\n});\r\n"],"sourceRoot":""}