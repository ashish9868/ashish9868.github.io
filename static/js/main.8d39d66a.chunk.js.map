{"version":3,"sources":["constants/global.js","slices/RankSlice.js","slices/BranchSlice.js","slices/LocationSlice.js","slices/NmsDeviceSlice.js","slices/DeviceSlice.js","utils/httpClient.js","utils/commonHelper.js","slices/globalSlice.js","utils/storeHelper.js","services/UserService.js","components/LoginForm.js","utils/routerHelper.js","components/Dialog.js","services/CommonService.js","components/DataGridComponent.js","modules/branches/views/BranchListView.js","modules/locations/LocationTitleComponent.js","modules/locations/views/LocationListView.js","modules/ranks/views/RankListView.js","services/RegistrationService.js","modules/registrations/views/RegistrationListView.js","modules/users/UserListView.js","modules/dashboard/views/DashboardView.js","components/GlobalToast.js","components/filters/LocationFilter.js","components/filters/ClearFilter.js","modules/nms-devices/views/NmsDevicesListView.js","modules/device-directory/views/DevicesListView.js","modules/users/OnlineUsersView.js","modules/backups/BackupsListView.js","components/filters/DateFilter.js","modules/reports/ReportListView.js","services/SettingService.js","modules/settings/SettingsListView.js","modules/contact_us/ContactUsView.js","components/GlobalNotifications.js","modules/users/DormantUsersView.js","layouts/index.js","index.js","utils/localStorageHelper.js","slices/RegistrationSlice.js","slices/UserSlice.js","store/store.js","components/PhotoThumb.js","services/UploadService.js","components/EntityForm.js"],"names":["CURRENT_USER_KEY","LOCATION_LIST_PAGE","RANK_LIST_PAGE","BRANCH_LIST_PAGE","LOGOUT_ROUTE","REGISTRATION_LIST_PAGE","NMS_LIST_PAGE","USER_LIST_PAGE","DASHBOARD_ROUTE","DEVICE_MAMAGEMENT_ROUTE","ONLINE_USERS_ROUTE","SUPER_USER_LIST_PAGE","BACKUPS_LIST","REPORTS_LIST_PAGE","SETTINGS_PAGE","CONTACT_PAGE","DORMANT_USERS_PAGE","NAV_ITEMS","icon","title","path","color","USER_STATUSES","APPROVED","REJECTED","PENDING","DISABLED","ACTIVE","USER_STATUS_INFO","COLOR","TEXT","USER_ROLES","ADMIN","USER","SETTINGS_CONFIG","LANDLINE_SALES","EMAIL_SALES","LANDLINE_SUPPORT","EMAIL_SUPPORT","LOGO","SNMP_CHECK_INTERVAL","fieldsToLabelMap","createSlice","name","initialState","listData","results","currentPage","totalResults","totalPages","rank","reducers","setRanks","state","payload","RankReducer","reducer","RankActions","actions","branch","setBranches","BranchReducer","BranchActions","_location","setLocations","LocationReducer","LocationActions","nms","setNmsDevices","NmsDeviceReducer","NmsDeviceActions","setDevices","DeviceReducer","DeviceActions","httpClient","axios","create","baseURL","headers","interceptors","request","use","config","user","LocalStorageHelper","get","accessToken","response","data","success","error","errorResponse","status","errors","globalError","showGlobalModalNotification","message","hideTs","Promise","resolve","code","store","dispatch","GlobalActions","setUserState","reject","humanFriendlyDateFormat","dateStrIso","defaultFormatStr","format","parseISO","formatMySql","dateStr","Date","formatBytesToString","bytes","toFixed","formatUserName","firstName","middleName","lastName","filter","x","join","convertToDate","strordate","e","ucFirst","str","charAt","toUpperCase","slice","globalMessage","type","settings","notifications","snmpDeviceStatus","currentUser","setGlobalMessage","setWebsiteSettings","setSnmpDeviceStatus","setNotifications","delete","window","location","setCurrentUser","GlobalReducer","scrollTo","setTimeout","dismissGlobalError","loginUser","username","password","post","getCurrentUser","logOutUser","getAllUsers","params","rejectUser","id","approveUser","blockUser","patch","unblockUser","updatePassword","confirmPassword","UserService","loginSchema","yup","shape","required","LoginForm","triggerLogin","history","_history","useHistory","className","src","style","border","marginBottom","paddingTop","href","paddingLeft","initialValues","onSubmit","values","setErrors","validationSchema","touched","htmlFor","autoComplete","placholder","pushQueryParams","append","replace","queryParams","parseQueryParams","finalParams","Object","keys","forEach","p","pathname","search","URLSearchParams","toString","push","key","defaultVal","v","k","Dialog","children","exists","show","showHeader","acceptText","cancelText","canDismiss","size","bodyPadding","zIndex","cancelDisabled","successDisabled","onSuccess","onCancel","onDismiss","tabIndex","display","overflow","onClick","disabled","require","default","getLocationList","locations","getBranchesList","getRanksList","getSubLocations","locationId","createDatabaseBackup","getDashboardSummary","getNmsDevicesStatus","getNotifications","CommonService","LoadingOverlay","propTypes","undefined","MODE_EDIT","deleteRecord","resource","entitySingle","setFormErrors","onDelete","DataGridComponent","modalSize","keyField","entityPlural","columns","hideIdOnEdit","limit","remote","sort","pagination","defaultSorted","dataField","order","showTotal","beforeSave","onTableChange","onDataUpdated","tableData","canAdd","canDelete","canDeleteFn","row","canEdit","rowActionButtons","globalActionButtons","formOptions","fields","onFormShow","mode","onRefresh","actionColumnWidth","filterComponents","confirmDelete","rest","useState","formErrors","record","setCurrentRecord","showFormDialog","setShowFormDialog","showConfirmDialog","setShowConfirmDialog","idToDelete","setIdToDelete","selectedIds","loading","setLoading","records","setRecords","fetchTableData","useCallback","result","columnsWithActions","useMemo","clms","clm","length","isDummyField","width","text","formatter","cellContent","map","actionButton","canShow","buildText","fieldsDyanmic","f","field","recordKey","triggerSetCurrentRecord","isAddEdit","currentRecord","find","r","useEffect","listen","Fragment","EntityForm","editMode","resetForm","put","props","md","baseProps","paginationFactory","page","sizePerPage","totalSize","sizePerPageList","paginationSize","_data","sortOrder","sortBy","striped","overlay","overlayFactory","spinner","styles","base","background","position","noDataIndication","BranchListView","description","subTitle","browserTitle","hidden","label","placeholder","cols","LocationTitleComponent","ref","useRef","sublocations","setSubLocations","current","then","padding","LocationListView","joinChar","level","setLevel","segments","setSegments","_level","_segments","_handler","split","segment","parseInt","concat","c","email","RankListView","rejectRegistration","approveRegistration","RegistrationService","STATUSES","RegistrationListView","UserListView","branches","ranks","setRecord","showPasswordDialog","setShowPasswordDialog","allowedUserRolesToCreate","_fields","options","role","value","l","document","getElementById","click","s","b","branchId","rankId","ip","port","DashboardView","NAVIGATION_CARDS","totalUsers","to","totalOnlineUsers","totalSuperUsers","totalDormantUsers","totalNmsDevices","totalDevices","totalPendingRequests","totalDistricts","totalRemotes","summary","setSummary","card","connect","globalState","closable","LocationFilter","setLocationId","getFilterValue","alignContent","justifyContent","alignItems","whiteSpace","onChange","nativeEvent","target","ClearFilterButton","filtersToClear","clearParams","qp","includes","clearQueryParams","deviceStatus","setDeviceStatus","checkInterval","setCheckInterval","interval","setInterval","clearInterval","ClearFilter","address","online","isOnline","PhotoThumb","url","image","height","systemName","atob","DeviceListView","OnLineUsersView","BackupsListView","DateFilter","defaultDaysSelected","showPicker","setShowPicker","setDateStr","setState","defaultStart","defaultEnd","subDays","start","end","isDate","startDate","endDate","onclick","container","querySelector","contains","minDate","subYears","maxDate","item","selection","showSelectionPreview","moveRangeOnFirstSelection","ranges","ReportListView","locationTitle","getWebsiteSettings","saveWebsiteSetting","settingData","SettingService","triggerGetSettings","setSettings","setting","READ_SETTINGS","ContactUsView","_settings","triggerFetchNotifications","onFetch","n","borderRadius","DormantUsersView","Entry","Navbar","Footer","margin","marginLeft","borderTop","triggerGetCurrentUser","footer","theme","Core","labelValue","labelType","route","navigateToLogin","index","items","Item","childItem","childIndex","lastLogin","exact","ReactDOM","render","localStorage","setItem","JSON","stringify","getItem","parse","removeItem","setRegistrations","RegistrationReducer","setUsers","UserReducer","configureStore","rankState","branchState","locationState","registrationState","nmsState","deviceState","userState","UserManagementReducer","middleware","thunk","borderColor","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","cursor","uploadFile","file","FormData","res","getUploadedFiles","deleteFile","UploadService","CustomDateInput","forwardRef","originalValue","FieldWrap","shouldShowError","hideLabel","action","method","submitTitle","hideSubmit","enableReinitialize","formConfig","modifiedValues","setFieldValue","now","fieldLabel","object","Array","isArray","objectAsArray","as","option","setCheckBoxGroupFieldValue","existingValues","Set","checked","add","from","backgroundColor","showIcon","date","customInput","files","accept","opacity","left","top"],"mappings":"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","file":"static/js/main.8d39d66a.chunk.js","sourcesContent":["export const CURRENT_USER_KEY = 'currentUser'\n\n\nexport const LOCATION_LIST_PAGE = '/admin/locations'\nexport const RANK_LIST_PAGE = '/admin/ranks'\nexport const BRANCH_LIST_PAGE = '/admin/branches'\nexport const LOGOUT_ROUTE = '/logout'\nexport const REGISTRATION_LIST_PAGE = '/admin/registrations'\nexport const NMS_LIST_PAGE = '/admin/nms-devices'\nexport const USER_LIST_PAGE = '/admin/users'\nexport const DASHBOARD_ROUTE = \"/\";\nexport const DEVICE_MAMAGEMENT_ROUTE = \"/admin/manage-devices\";\nexport const ONLINE_USERS_ROUTE = \"/admin/online-users\";\nexport const SUPER_USER_LIST_PAGE = \"/admin/super-users\";\nexport const BACKUPS_LIST = \"/admin/db-backups\";\nexport const REPORTS_LIST_PAGE = \"/admin/reports\";\nexport const SETTINGS_PAGE = \"/admin/settings\";\nexport const CONTACT_PAGE = \"/admin/contact-us\";\nexport const DORMANT_USERS_PAGE = \"/admin/dormant-users\";\n\nexport const NAV_ITEMS = [\n  {\n    icon: \"fa-tachometer-alt\",\n    title: \"Dashboard\",\n    path: DASHBOARD_ROUTE\n  },\n  {\n    icon: \"fa-globe\",\n    title: \"Manage Locations\",\n\n    path: LOCATION_LIST_PAGE,\n  },\n  {\n    icon: \"fa-sort-numeric-up\",\n    title: \"Manage Ranks\",\n    path: RANK_LIST_PAGE\n  },\n  {\n    icon: \"fa-building\",\n    title: \"Manage Branches\",\n    path: BRANCH_LIST_PAGE\n  },\n  {\n    icon: \"fa-tasks\",\n    title: \"Registration Requests\",\n    path: REGISTRATION_LIST_PAGE,\n  },\n  {\n    icon: \"fa-users\",\n    title: \"Manage Users\",\n    path: USER_LIST_PAGE,\n  },\n  {\n    icon: \"fa-users\",\n    title: \"Current Users\",\n    color: \"green\",\n\n    path: ONLINE_USERS_ROUTE,\n  },\n  {\n    icon: \"fa-users\",\n    title: \"Dormant Users\",\n    color: \"red\",\n    path: DORMANT_USERS_PAGE\n  },\n  {\n    icon: \"fa-laptop\",\n    title: \"NMS\",\n    path: NMS_LIST_PAGE,\n  },\n  {\n    icon: \"fa-download\",\n    title: \"Database Backups\",\n\n    path: BACKUPS_LIST,\n  },\n  {\n    icon: \"fa-tools\",\n    title: \"Command, Control & Management\",\n\n    path: DEVICE_MAMAGEMENT_ROUTE,\n  },\n  {\n    icon: \"fa-chart-line\",\n    title: \"Reports\",\n    path: REPORTS_LIST_PAGE,\n  },\n  {\n    icon: \"fa-cog\",\n    title: \"Configuration\",\n    path: SETTINGS_PAGE\n  },\n  {\n    icon: \"fa-phone-alt\",\n    title: \"Contact us\",\n    path: CONTACT_PAGE,\n  }\n];\n\nexport const USER_STATUSES = {\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  PENDING: 'PENDING',\n  DISABLED: 'DISABLED',\n  ACTIVE: 'ACTIVE'\n}\n\nexport const USER_STATUS_INFO = {\n  ACTIVE: {\n    COLOR: 'green',\n    TEXT: 'Active users are those who can login into application.'\n  },\n  APPROVED: {\n    COLOR: 'orange',\n    TEXT: 'Approved users are those who registered via client application and approved by Admin.'\n  },\n  DISABLED: {\n    COLOR: 'red',\n    TEXT: 'Disabled/Blocked users are those who are blocked by Admin and can\\'t login into application.'\n  }\n}\n\nexport const USER_ROLES = {\n  ADMIN: 'ADMIN',\n  USER: 'USER',\n}\n\nexport const SETTINGS_CONFIG  = {\n  LANDLINE_SALES: 'landline_sales',\n  EMAIL_SALES: 'email_sales',\n  LANDLINE_SUPPORT: 'landline_support',\n  EMAIL_SUPPORT: 'email_support',\n  LOGO: 'logo',\n  SNMP_CHECK_INTERVAL: 'snmp_check_interval'\n}\n\n\nexport const fieldsToLabelMap = {\n  'locationId' : 'Location',\n  'branchId': 'Branch',\n  'rankId': 'Rank',\n  'firstName': 'First Name',\n  'lastName': 'Last Name',\n  'middleName': 'Middle Name',\n  'username': 'Username',\n  'ip' : 'IP'\n}","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: RankReducer, actions: RankActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      rank: null,\n    },\n    reducers: {\n      setRanks: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: BranchReducer, actions: BranchActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      branch: null,\n    },\n    reducers: {\n      setBranches: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: LocationReducer, actions: LocationActions } = createSlice(\n  {\n    name: \"locationSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      _location: null,\n    },\n    reducers: {\n      setLocations: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: NmsDeviceReducer, actions: NmsDeviceActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      nms: null,\n    },\n    reducers: {\n      setNmsDevices: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: DeviceReducer, actions: DeviceActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      nms: null,\n    },\n    reducers: {\n      setDevices: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import axios from \"axios\";\nimport { GlobalActions } from \"src/slices/globalSlice\";\nimport store from \"src/store/store\";\nimport LocalStorageHelper from \"./localStorageHelper\";\nimport { showGlobalModalNotification } from \"./storeHelper\";\n\nconst baseUrl = `http://localhost:28000`;\nconst httpClient = axios.create({\n  baseURL: baseUrl,\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n\n\nhttpClient.interceptors.request.use((config) => {\n  // Do something before request is sent\n  const user = LocalStorageHelper.get('currentUser');\n  config.headers['Content-type'] = `application/json`\n  config.headers['Authorization'] = `Bearer ${user?.accessToken}`\n  return config;\n});\n\nhttpClient.interceptors.response.use(\n  (response) => {\n    return { data: response.data, success: true };\n  },\n  (error) => {\n    const errorResponse = error?.response;\n    switch (errorResponse?.status) {\n      case 422:\n        const errors = errorResponse?.data ?? {}\n        const globalError = errors['global'] || null\n        if (globalError){\n          showGlobalModalNotification({\n            message: globalError,\n            success: false,\n            hideTs: 5000,\n            title: \"Error!!\"\n          })\n        }\n\n        return Promise.resolve({\n          success: false,\n          errors: errors,\n          code: 422,\n        });\n      case 401:\n        // const redirectURL = errorResponse.request.responseURL\n        store.dispatch(GlobalActions.setUserState(null));\n        // window.location = `/login?redirect=${encodeURIComponent(redirectURL)}`\n        return Promise.resolve({\n          success: false,\n          code: 401,\n        });\n      case 404:\n        showGlobalModalNotification({\n          message: 'Page/Resource you are trying to access, do not exist.',\n          success: false,\n          hideTs: 5000,\n          title: \"Error!!\"\n        })\n        return Promise.resolve({\n          success: false,\n          code: 404,\n        });\n      default:\n        showGlobalModalNotification({\n          message: \"Something went wrong.\",\n          success: false,\n          hideTs: 5000,\n          title: \"Error!!\"\n        })\n\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default httpClient;\n","import { format, isValid, parseISO } from \"date-fns\"\n\nexport const humanFriendlyDateFormat = (dateStrIso, defaultFormatStr = 'E do MMM, yyyy hh:mm a') => {\n    return format(parseISO(dateStrIso), defaultFormatStr)\n}\n\nexport const formatMySql = (dateStr) => {\n    return format(new Date(dateStr), \"yyyy-MM-dd\")\n}\n\nexport const formatBytesToString = (bytes) => {\n    if (bytes < 1024) {\n        return `${bytes} bytes`\n    }\n    if (bytes > 1024 && bytes < 1024 * 1024) {\n        return `${(bytes / 1024).toFixed(3)} KB`\n    }\n    if (bytes > 1024 * 1024 && bytes < 1024 * 1024 * 1024) {\n        return `${(bytes / (1024 * 1024)).toFixed(3)} MB`\n    }\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(3)} GB`\n}\n\nexport const formatUserName = (user) => {\n    return [user?.firstName, user?.middleName, user?.lastName].filter(x => x).join(\" \")\n}\n\nexport const convertToDate = (strordate) => {\n    if (typeof strordate === \"object\") {\n        return strordate\n    }else{\n        try{\n            return parseISO(strordate)\n        }catch(e){\n            return new Date(strordate)\n        }\n    }\n}\n\nexport const ucFirst = (str) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { CURRENT_USER_KEY } from \"src/constants/global\";\r\nimport LocalStorageHelper from \"src/utils/localStorageHelper\";\r\n\r\nexport const { actions: GlobalActions, reducer: GlobalReducer } = createSlice({\r\n  name: \"globalSlice\",\r\n  initialState: {\r\n    errors: null,\r\n    globalMessage: {\r\n      title: '',\r\n      type: '',\r\n      message: ''\r\n    },\r\n    settings: [],\r\n    notifications: [],\r\n    snmpDeviceStatus: {},\r\n    user: LocalStorageHelper.get(CURRENT_USER_KEY),\r\n    currentUser: null,\r\n  },\r\n  reducers: {\r\n    setGlobalMessage: (state, { payload }) => {\r\n      const { type, title, message } = payload\r\n      state.globalMessage = { ...state.globalError, type, title, message }\r\n    },\r\n    setWebsiteSettings: (state, { payload }) => {\r\n      const { results } = payload\r\n      state.settings = results\r\n    },\r\n    setSnmpDeviceStatus: (state, { payload }) => {\r\n      state.snmpDeviceStatus = payload\r\n    },\r\n    setNotifications: (state, { payload }) => {\r\n      state.notifications = payload\r\n    },\r\n    setUserState: (state, { payload }) => {\r\n      payload\r\n        ? LocalStorageHelper.store(CURRENT_USER_KEY, payload)\r\n        : LocalStorageHelper.delete(CURRENT_USER_KEY);\r\n      state.user = payload;\r\n\r\n      if (payload) {\r\n        window.location = '/'\r\n      }\r\n    },\r\n    setCurrentUser: (state, {payload}) => {\r\n      state.currentUser = payload\r\n    }\r\n  },\r\n});\r\n","import { GlobalActions } from \"src/slices/globalSlice\"\nimport store from \"src/store/store\"\n\n\nexport const showGlobalModalNotification = ({\n    success = true,\n    title = 'Please note',\n    message,\n    hideTs = 5000\n}) => {\n    window.scrollTo(0, 0)\n    store.dispatch(GlobalActions.setGlobalMessage({\n        type: success ? 'success' : 'danger',\n        title,\n        message\n    }))\n    setTimeout(function () {\n       dismissGlobalError()\n    }, hideTs)\n}\n\nexport const dismissGlobalError = () => {\n    store.dispatch(GlobalActions.setGlobalMessage({\n        type: '',\n        title: '',\n        message: ''\n    }))\n}","import httpClient from \"../utils/httpClient\";\n\nconst loginUser = async (username, password) =>\n  await httpClient.post(\"/auth/admin/login\", {\n    username,\n    password\n  });\n\nconst getCurrentUser = async () => await httpClient.get(\"/api/v1/me\");\n\nconst logOutUser = async () => await httpClient.get(\"/auth/logout\");\n\nconst getAllUsers = async (params = {}) =>\n  await httpClient.get(\"/api/v1/admin/users\", { params });\n\nconst rejectUser = async (id) => await httpClient.delete(`/api/v1/admin/users/${id}`);\nconst approveUser = async (id) => await httpClient.post(`/api/v1/admin/users/${id}`);\n\nconst blockUser = async (id) => await httpClient.patch(`/api/v1/admin/users/${id}/block`)\nconst unblockUser = async (id) => await httpClient.patch(`/api/v1/admin/users/${id}/unblock`)\n\nconst updatePassword = async (id, password, confirmPassword) => await httpClient.patch(`/api/v1/admin/users/${id}/password`, {\n  password: password || '',\n  confirmPassword: confirmPassword || ''\n})\n\nconst UserService = {\n  loginUser,\n  getCurrentUser,\n  logOutUser,\n  getAllUsers,\n  approveUser,\n  rejectUser,\n  blockUser,\n  unblockUser,\n  updatePassword\n};\n\nexport default UserService;\n","import { Box } from \"adminlte-2-react\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { ucFirst } from \"src/utils/commonHelper\";\r\nimport * as yup from \"yup\";\r\n\r\nconst loginSchema = yup.object().shape({\r\n  username: yup.string().required(),\r\n  password: yup.string().required(),\r\n});\r\n\r\nconst LoginForm = ({ triggerLogin = async () => { }, history, ...rest }) => {\r\n  const _history = useHistory()\r\n  return (\r\n    <>\r\n      <div className=\"fixed-logo-area\">\r\n        <img className=\"leftLogo\" src=\"/dp_logo.png\" />\r\n        <img className=\"rightLogo\" src=\"/dp_logo.png\" />\r\n      </div>\r\n      <div className=\"login-box\" style={{ border: 'solid 1px #eee', marginBottom: '0 !important', paddingTop: 50 }}>\r\n        <div className=\"login-logo\">\r\n          <a href=\"/\">\r\n            <b>TMCS</b>\r\n            <span style={{ paddingLeft: 5 }}>Login</span>\r\n          </a>\r\n        </div>\r\n        <div className=\"login-box-body\">\r\n          <Box type=\"primary\" title=\"Login to continue\">\r\n\r\n            <Formik\r\n              initialValues={{\r\n                username: \"\",\r\n                password: \"\",\r\n              }}\r\n              onSubmit={async (values, { setErrors }) => {\r\n                const data = await triggerLogin(values, history || _history)\r\n                if (data?.errors) {\r\n                  setErrors(data.errors)\r\n                }\r\n              }}\r\n              validationSchema={loginSchema}\r\n            >\r\n              {({ errors, touched }) => (\r\n                <Form>\r\n                  <div className=\"card-body\">\r\n                    <div className=\"mb-2\">\r\n                      <label htmlFor=\"email\" className=\"form-label\">\r\n                        Username\r\n                      </label>\r\n                      <Field\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        className={\r\n                          errors.username && touched.username\r\n                            ? \"form-control shadow-none is-invalid\"\r\n                            : \"form-control shadow-none\"\r\n                        }\r\n                        placholder=\"Enter Username\"\r\n                        name=\"username\"\r\n                        id=\"username\"\r\n                      />\r\n                      {errors.username && touched.username && (\r\n                        <div className=\"invalid-feedback text-red\"><strong>Username</strong> - {ucFirst(errors.username)}</div>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"mb-2\">\r\n                      <label htmlFor=\"password\" className=\"form-label\">\r\n                        Password\r\n                      </label>\r\n                      <Field\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        autoComplete=\"off\"\r\n                        className={\r\n                          errors.password && touched.password\r\n                            ? \"form-control shadow-none is-invalid\"\r\n                            : \"form-control shadow-none\"\r\n                        }\r\n                        placholder=\"Enter password\"\r\n                        id=\"password\"\r\n                      />\r\n                      {errors.password && touched.password && (\r\n                        <div className=\"invalid-feedback\">{errors.password}</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <hr />\r\n                  <div className=\"card-footer text-center\">\r\n                    <div className=\"d-flex flex-row-reverse\">\r\n                      <button type=\"submit\" className=\"btn btn-block rounded-0  btn-primary\">\r\n                        Submit\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </Box>\r\n        </div>\r\n      </div>\r\n      <div className=\"loginFooter login-box\">\r\n        <div>\r\n          <img className=\"footerLogo\" src=\"/default_logo.png\" /><br />\r\n          <h4>Mobile Communications India Private Limited.</h4>\r\n          <p>A-16, (Front Side), Naraina Industrial Area, Phase II<br />New Delhi - 110028,\r\n            Email: <a href=\"mailto:contact@mobilecom.in\">contact@mobilecom.in</a>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default LoginForm;\r\n","import { CURRENT_USER_KEY } from \"src/constants/global\"\nimport LocalStorageHelper from \"./localStorageHelper\"\n\nexport const pushQueryParams = (history, params = {}, append = true, replace = false) => {\n    const queryParams = parseQueryParams(history)\n    params = append ? { ...queryParams, ...params } : params\n    const finalParams = {}\n    Object.keys(params).forEach(p => {\n        if (typeof params[p] !== 'undefined' && params[p] !== 'undefined' && params[p] !== 'null' && params[p] !== null) {\n            finalParams[p] = params[p]\n        }\n    })\n    replace ? history.replace({\n        pathname: history.location.pathname,\n        search: (new URLSearchParams(finalParams)).toString()\n    }) : history.push({\n        pathname: history.location.pathname,\n        search: (new URLSearchParams(finalParams)).toString()\n    })\n}\n\nexport const clearQueryParams = (history, clearParams = []) => {\n    const queryParams = parseQueryParams(history)\n    const finalParams = {}\n    Object.keys(queryParams).forEach(qp => {\n        if (!clearParams.includes(qp)) {\n            finalParams[qp] = queryParams[qp]\n        }\n    })\n\n    history.push({\n        pathname: history.location.pathname,\n        search: (new URLSearchParams(finalParams)).toString()\n    })\n}\n\nexport const parseQueryParams = (history, key = null, defaultVal = null) => {\n    const params = {}\n    const p = new URLSearchParams(history.location.search)\n    p.forEach((v, k) => {\n        params[k] = v\n    })\n    if (key != null) {\n        return params[key] || defaultVal\n    }\n    return params\n}\n\nexport const getCurrentStateParam = (history, param = 'id') => {\n    const state = (history.location.state || {})\n    if (state && state[param]) {\n        return state[param]\n    }\n    return null\n}\n\nexport const isCurrentRoute = (history, matchingRouteName) => {\n    console.log(history, matchingRouteName)\n    return false\n}\n\nexport const navigateToPath = (history, path, state = {}, clearPrevious = false) => {\n\n    let pathname = path\n\n    Object.keys(state).forEach(key => {\n        pathname = pathname.replace(`:${key}`, state[key])\n    })\n\n    if (clearPrevious) {\n        history.replace({\n            pathname,\n            state\n        })\n    } else {\n        history.push({\n            pathname,\n            state\n        })\n    }\n}\n\nexport const navigateToHome = (history) => {\n    const params = parseQueryParams(history)\n    const path = (params['redirect'] || '/').replace(`${window.location.protocol}://${window.location.host}`, '')\n    navigateToPath(history, path.substring())\n}\n\nexport const navigateToSubPath = (history, subPath, clearPrevious = false) => {\n    const pathname = history.location.pathname + subPath\n    navigateToPath(history, pathname, clearPrevious)\n}\n\n\nexport const navigateToLogin = (route = '/login') => {\n    LocalStorageHelper.delete(CURRENT_USER_KEY)\n    window.location = route\n}\n","import { Button } from \"adminlte-2-react\";\nimport React from \"react\";\n\nconst Dialog = ({\n  children = \"\",\n  title = \"Dialog\",\n  exists = true,\n  show = true,\n  showHeader = true,\n  acceptText = null,\n  cancelText = null,\n  canDismiss = true,\n  size = \"xl\",\n  bodyPadding = 2,\n  zIndex = 1050,\n  cancelDisabled = false,\n  successDisabled = false,\n  onSuccess = () => { },\n  onCancel = () => { },\n  onDismiss = () => { },\n}) => {\n  return (\n    exists && (\n      <div\n        className={show ? 'modal fade in': 'modal fade'}\n        tabIndex=\"-1\"\n        aria-hidden={show}\n        style={{ display: show ? \"block\" : \"none\", zIndex, overflow: 'auto' }}\n      >\n        <div className={`modal-dialog modal-${size}`}>\n          <div className=\"modal-content\">\n            {showHeader && (\n              <div className=\"modal-header\">\n                <h4 className=\"modal-title\">{title}\n                  {canDismiss && (\n                    <Button\n                      type=\"button\"\n                      className=\"close\"\n                      aria-label=\"Close\"\n                      onClick={onDismiss}\n                      icon=\"fa-times\"\n                    />\n                  )}\n                </h4>\n              </div>\n            )}\n            <div className={`modal-body p-${bodyPadding}`}>\n              {children}\n            </div>\n            {(cancelText || acceptText) && (\n              <div className=\"modal-footer\">\n                {cancelText && (\n                  <button\n                    disabled={cancelDisabled}\n                    className=\"btn rounded-0  btn-default\"\n                    onClick={onCancel}\n                  >\n                    {cancelText}\n                  </button>\n                )}\n                {acceptText && (\n                  <button\n                    disabled={successDisabled}\n                    className=\"btn rounded-0  btn-primary\"\n                    onClick={onSuccess}\n                  >\n                    {acceptText}\n                  </button>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default Dialog;\n","const { default: httpClient } = require(\"src/utils/httpClient\");\n\nconst getLocationList = async () => {\n    const data = await httpClient.get(\"/api/v1/locations\");\n    const locations = data?.success ? data.data : []\n    return locations\n}\n\nconst getBranchesList = async () => {\n    const data = await httpClient.get(\"/api/v1/branches\");\n    return data?.success ? data.data : []\n}\n\n\nconst getRanksList = async () => {\n    const data = await httpClient.get(\"/api/v1/ranks\");\n    return data?.success ? data.data : []\n}\n\nconst getSubLocations = async (locationId) => {\n    if (locationId && locationId > 0){\n        const data = await httpClient.get(`/api/v1/admin/locations?locationId=${locationId}`);\n        if (data?.success) {\n            return data.data.results;\n        }    \n    }\n    return []\n}\n\n\nconst createDatabaseBackup = async () => await httpClient.post(`/api/v1/admin/db-backups`)\nconst getDashboardSummary = async () => await httpClient.get(`/api/v1/admin/dashboard`)\nconst getNmsDevicesStatus = async () => await httpClient.get(`/api/v1/admin/nms-devices/status`)\nconst getNotifications = async () => await httpClient.get(`/api/v1/admin/notifications`)\nconst CommonService = {\n    getLocationList,\n    getBranchesList,\n    getRanksList,\n    createDatabaseBackup,\n    getDashboardSummary,\n    getNmsDevicesStatus,\n    getNotifications,\n    getSubLocations\n}\nexport default CommonService\n","import { Col, Row, Button, ButtonGroup, Box } from \"adminlte-2-react\";\nimport * as yup from \"yup\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport overlayFactory from 'react-bootstrap-table2-overlay';\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\nimport LoadingOverlay from \"react-loading-overlay\"\nimport Dialog from \"./Dialog\";\nimport EntityForm from \"./EntityForm\";\nimport { showGlobalModalNotification } from \"src/utils/storeHelper\";\nimport httpClient from \"src/utils/httpClient\";\nimport CommonService from \"src/services/CommonService\";\nimport { GlobalActions } from \"src/slices/globalSlice\";\nimport { connect } from \"react-redux\";\nLoadingOverlay.propTypes = undefined\n\nexport const MODE_EDIT = 'edit';\nexport const MODE_ADD = 'add';\n\n\nconst deleteRecord = async (resource, id, entitySingle, setFormErrors, onDelete) => {\n    if (resource && id) {\n        const data = await httpClient.delete(`${resource}/${id}`)\n        if (data?.success) {\n            showGlobalModalNotification({\n                success: true,\n                message: `${entitySingle} successfully deleted.`\n            })\n        } else {\n            setFormErrors(data?.errors ?? {})\n        }\n    } else {\n        await onDelete(id);\n    }\n}\n\nconst DataGridComponent = ({\n    modalSize = 'xl',\n    keyField = \"id\",\n    entitySingle = 'record',\n    entityPlural = 'records',\n    columns = [],\n    hideIdOnEdit = false,\n    data = {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        limit: 100,\n        totalPages: 1,\n    },\n    remote = {\n        sort: true,\n        filter: true,\n        pagination: true,\n    },\n    defaultSorted = [\n        { dataField: 'id', order: 'asc' }\n    ],\n    showTotal = true,\n    beforeSave = (values) => { return values },\n    onTableChange = async (params) => { },\n    onDataUpdated = async (tableData) => { },\n    onDelete = (id) => { },\n    canAdd = true,\n    canDelete = true,\n    canDeleteFn = (row) => true,\n    canEdit = true,\n    rowActionButtons = [],\n    globalActionButtons = [],\n    formOptions = {\n        fields: [],\n        validationSchema: null,\n        onSuccess: async (data) => { },\n    },\n    resource = null,\n    onFormShow = (row, mode) => {\n\n    },\n    onRefresh = () => {},\n    actionColumnWidth = 200,\n    filterComponents = [],\n    confirmDelete = true,\n    ...rest\n}) => {\n    const [formErrors, setFormErrors] = useState({})\n    const [record, setCurrentRecord] = useState(null)\n    const [showFormDialog, setShowFormDialog] = useState(false)\n    const [showConfirmDialog, setShowConfirmDialog] = useState(false)\n    const [idToDelete, setIdToDelete] = useState(0)\n    const [selectedIds, setSelectedIds] = useState([])\n    const [loading, setLoading] = useState(false)\n    const [records, setRecords] = useState(data)\n    const fetchTableData = useCallback(async () => {\n        setFormErrors({})\n        if (resource) {\n            const params = parseQueryParams(rest.history)\n            const result = await httpClient.get(`${resource}`, { params })\n            if (result?.success) {\n                setRecords({\n                    results: result.data?.results || [],\n                    currentPage: result.data?.currentPage || 1,\n                    totalResults: result.data.totalResults || 0,\n                    limit: result.data?.limit || 100,\n                    totalPages: result.data?.totalPages || 1\n                })\n            } else {\n                setRecords({ ...data, results: [], totalResults: 0, limit: 100 })\n            }\n        }\n    }, [resource, data, rest.history])\n\n    const columnsWithActions = useMemo(() => {\n        const clms = columns.filter(clm => clm.dataField !== '_actions')\n        if (!(canEdit || canDelete || rowActionButtons.length > 0)) {\n            return clms;\n        }\n        clms.push({\n            dataField: '_actions',\n            isDummyField: true,\n            style: {\n                width: actionColumnWidth || 200,\n            },\n            text: 'Actions',\n            formatter: (cellContent, row) => {\n                return (\n                    <ButtonGroup>\n                        {rowActionButtons.map(actionButton => {\n                            actionButton.canShow = actionButton.canShow ? actionButton.canShow : () => true\n                            if (actionButton.canShow && actionButton.canShow(row)) {\n                                if (actionButton.buildText){\n                                    actionButton.text = actionButton.buildText(row)\n                                }\n                                return <Button key={`action-${row.id}-${actionButton.text}`} className=\"mr-2 btn-sm\"\n                                    type={actionButton?.type || 'primary'}\n                                    icon={actionButton?.icon || 'gear'}\n                                    text={actionButton.text}\n                                    onClick={async () => {\n                                        await actionButton.onClick(row.id, row)\n                                        fetchTableData()\n                                    }}\n                                />\n                            }\n\n                        })}\n                        {canEdit && <Button className=\"mr-2 btn-sm\" type=\"primary\" text=\"Edit\" icon=\"fa-edit\" onClick={() => {\n                            pushQueryParams(rest.history, { id: row.id, mode: MODE_EDIT }, true)\n                            setCurrentRecord(row);\n                            setShowFormDialog(true)\n                            setFormErrors({})\n                        }} />}\n                        {(canDelete && canDeleteFn(row)) && <Button className=\"mr-2 btn-sm\" type=\"danger\" onClick={ async () => {\n                            setIdToDelete(row.id)\n                            if (confirmDelete) {\n                                setShowConfirmDialog(true)\n                            }else{\n                                await deleteRecord(resource, idToDelete, entitySingle, setFormErrors, onDelete)\n                                setIdToDelete(0)\n                                fetchTableData();\n                            }\n                        }} text=\"Delete\" icon=\"fa-trash\" />}\n\n                    </ButtonGroup>\n                )\n            },\n        })\n        return clms\n    }, [columns, canDelete, canDeleteFn, canAdd, onDelete, rowActionButtons, rest.history])\n\n    const fieldsDyanmic = useMemo(() => {\n        if (record != null && record?.id){\n            return formOptions.fields.map(f => {\n                return {\n                    ...f, required: false\n                }\n            });\n        }\n        return formOptions.fields\n    }, [formOptions.fields]);\n\n    const initialValues = useMemo(() => {\n        const values = {}\n        fieldsDyanmic.forEach(field => {\n            values[field.recordKey || field.name] = record ? (record[field.recordKey] || record[field.name] || field.default) || '' : (field.default || '')\n        })\n        values['id'] = record ? record.id : null\n        return values;\n    }, [record, fieldsDyanmic]);\n\n    const triggerSetCurrentRecord = () => {\n        const params = parseQueryParams(rest.history)\n        const mode = params['mode'] || ''\n        const id = params['id'] || null\n        const isAddEdit = mode === MODE_ADD || mode === MODE_EDIT\n        const currentRecord = (records.results || []).find(r => `${r.id}` === id)\n        setCurrentRecord(currentRecord)\n        setShowFormDialog(isAddEdit)\n    }\n\n    useEffect(() => {\n        fetchTableData();\n        triggerSetCurrentRecord();\n        const unlisten = rest.history.listen((...args) => {\n            fetchTableData()\n        })\n        return unlisten\n    }, [])\n\n    useEffect(() => {\n        triggerSetCurrentRecord();\n        onDataUpdated(records);\n    }, [showFormDialog, records])\n\n    useEffect(() => {\n        onFormShow(record, parseQueryParams(rest.history, 'mode'))\n    }, [record, rest.history])\n\n    return (\n        <React.Fragment>\n            <Dialog \n                show={showConfirmDialog}\n                title=\"Are you sure??\"\n                onCancel={() => {\n                    setShowConfirmDialog(false)\n                }}\n                onDismiss={() => {\n                    setShowConfirmDialog(false)\n                }}\n                acceptText={\"Yes Continue\"}\n                cancelText={\"Cancel\"}\n                onSuccess={async () => {\n                    setShowConfirmDialog(false)\n                    await deleteRecord(resource, idToDelete, entitySingle, setFormErrors, onDelete)\n                    setIdToDelete(0)\n                    fetchTableData();\n                }}\n            >\n                <p className=\"text-red\">Deleting this record will delete all the related data</p>\n            </Dialog>\n            {(canAdd || canEdit) && <Dialog size={modalSize} show={showFormDialog}\n                showHeader={true}\n                title={`${record ? `Editing ${entitySingle} ${!hideIdOnEdit ? `#${record.id}` : ''}` : `Adding ${entitySingle}`}`}\n                onDismiss={() => {\n                    setShowFormDialog(false)\n                    pushQueryParams(rest.history, { mode: null, id: null }, true, true)\n                }}>\n                <EntityForm\n                    entityPlural={entityPlural}\n                    entitySingle={entitySingle}\n                    formErrors={formErrors}\n                    fields={fieldsDyanmic}\n                    initialValues={initialValues}\n                    editMode={record ? true : false}\n                    onSubmit={async (values, { resetForm }) => {\n                        window.scrollTo(0, 0);\n                        values = beforeSave(values)\n                        let data\n                        if (resource) {\n                            data = values?.id ? await httpClient.put(`${resource}/${values.id}`, values) : await httpClient.post(resource, values)\n                        } else {\n                            data = await formOptions.onSuccess(values)\n                        }\n\n                        if (data?.success) {\n                            resetForm();\n                            setCurrentRecord(null);\n                            setShowFormDialog(false);\n                            pushQueryParams(rest.history, { mode: null, id: null }, true, true)\n                            onTableChange(parseQueryParams(rest.history))\n                            showGlobalModalNotification({\n                                success: true,\n                                message: `${entitySingle} successfully ${values?.id ? 'updated' : 'created'}`\n                            })\n                        } else {\n                            setFormErrors(data?.errors ?? {})\n                        }\n\n                    }}\n                />\n            </Dialog>\n            }\n            <ToolkitProvider\n                keyField={keyField}\n                data={records.results || []}\n                columns={columnsWithActions}\n            >\n                {\n                    props => (\n                        <div>\n                            <br />\n                            <Row className=\"text-left\">\n                                {filterComponents.length > 0 &&  <Col className=\"filtersSection\" md={12}>\n                                    <Box type=\"default\" title=\"\">\n                                        {filterComponents.map(e => e)}\n                                    </Box>\n                                </Col>\n                                }\n\n                                <Col md={12} className=\"text-right\">\n                                    <Button onClick={async () => {\n                                        setLoading(true)\n                                        fetchTableData()\n                                        await onTableChange(parseQueryParams(rest.history))\n                                        setLoading(false)\n                                    }} className=\"mr-2 btn-sm\" id=\"btnRefresh\" type=\"primary\" disabled={loading} text={loading ? \"Loading...\" : \"Refresh\"} icon=\"fa-redo\" />\n                                    {canAdd &&\n                                        <Button className=\"mr-2 btn-sm\" onClick={() => {\n                                            pushQueryParams(rest.history, { mode: MODE_ADD, id: undefined }, true)\n                                            setShowFormDialog(true)\n                                            setCurrentRecord(null);\n                                            onRefresh();\n                                        }} type=\"success\" text={`Add ${entitySingle}`} icon=\"fa-plus-circle\" />\n                                    }\n                                    {globalActionButtons.map(actionButton => {\n                                        return <Button className=\"mr-2 btn-sm\"\n                                            key={actionButton.text}\n                                            type={actionButton.type}\n                                            icon={actionButton.icon}\n                                            text={actionButton.text}\n                                            onClick={async () => {\n                                                await actionButton.onClick(selectedIds)\n                                                fetchTableData();\n                                            }}\n                                        />\n                                    })}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <hr />\n                                </Col>\n                            </Row>\n                            <BootstrapTable\n                                {...props.baseProps}\n                                remote={remote}\n                                defaultSorted={defaultSorted}\n                                \n                                pagination={records.totalPages > 1 ? paginationFactory({\n                                    page: records.currentPage || 1,\n                                    sizePerPage: records.limit || 100,\n                                    totalSize: records.totalResults || records.results.length || 0,\n                                    sizePerPageList: [100, 200, 500],\n                                    paginationSize: records.totalResults || records.results.length || 0,\n                                    showTotal,\n                                }): null}\n                                loading={loading}\n                                onTableChange={async (type, _data) => {\n                                    const params = {\n                                        sortOrder: _data['sortOrder'],\n                                        sortBy: _data['sortField'],\n                                        page: _data['page'],\n                                        limit: _data['sizePerPage'],\n                                    }\n                                    pushQueryParams(rest.history, params)\n                                    setLoading(true)\n                                    await onTableChange(params)\n                                    setLoading(false)\n                                }}\n                                striped={true}\n                                // selectRow={(globalActionButtons.length || canEdit || canDelete) ? {\n                                //     mode: 'checkbox',\n                                //     bgColor: '#eee',\n                                //     selectColumnStyle: () => {\n                                //         return {\n                                //             width: 20\n                                //         }\n                                //     },\n                                //     onSelectAll: (isSelected) => {\n                                //         const selections = []\n                                //         if (isSelected) {\n                                //             (data.results || []).forEach(r => {\n                                //                 selections.push(selections)\n                                //             })\n                                //         }\n                                //         setSelectedIds(selections)\n                                //     },\n                                //     onSelect: (row, isSelected) => {\n                                //         const selections = selectedIds.filter(id => row.id !== id)\n                                //         if (isSelected) {\n                                //             selections.push(row.id)\n                                //         }\n                                //         setSelectedIds(selections)\n                                //     }\n                                // } : {\n                                //     mode:'ROW_SELECT_DISABLED',\n                                //     hideSelectColumn: true\n                                // }}\n                                overlay={overlayFactory({\n                                    spinner: true,\n                                    styles: {\n                                        overlay: (base) => ({ ...base, background: 'rgba(0, 0, 0, 0.5)', position: 'absolute' })\n                                    }\n                                })}\n                                noDataIndication={() => <h5 className=\"text-center\">Sorry no {entityPlural} currently availble</h5>} />\n                        </div>\n                    )\n                }\n            </ToolkitProvider>\n        </React.Fragment>\n\n    )\n}\n\nexport default DataGridComponent","import * as yup from \"yup\";\nimport { BranchActions } from \"src/slices/BranchSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\n\nconst BranchListView = ({\n  title = 'Branches',\n  description = 'here you can manage branches',\n  ...rest\n}) => {\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Branch\"}>\n      <Box type=\"primary\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Branches\"\n              entitySingle=\"Branch\"\n              resource={`/api/v1/admin/branches`}\n              onDataUpdated={async (tableData) => {\n                BranchActions.setBranches(tableData)\n              }}\n              defaultSorted={\n                [{ dataField: 'id', order: 'asc' }]\n              }\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Branch ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'description',\n                  text: 'Description',\n                  sort: true,\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      required: true,\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    {\n                      id: \"description\",\n                      name: \"description\",\n                      label: \"Branch Description\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    description: yup.string(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default BranchListView;\n","import { Badge } from \"adminlte-2-react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport CommonService from \"src/services/CommonService\";\n\nconst LocationTitleComponent = ({\n    row\n}) => {\n    const ref = useRef();\n    const [sublocations, setSubLocations] = useState([])\n\n    useEffect(() => {\n        ref.current = true\n        CommonService.getSubLocations(row?.id).then(locations => {\n            if (ref.current){\n                setSubLocations(locations)\n            }\n        })\n        return () => { ref.current = false }\n    }, [])\n\n    return (\n        <>\n            <span style={{ padding: 5 }}>{row.title}</span>\n            {sublocations.length > 0 && <Badge color=\"green\" text={`${sublocations.length} subLocation${sublocations.length > 1 ? 's':''}`} />}\n        </>\n    )\n}\n\nexport default LocationTitleComponent;","import * as yup from \"yup\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { LocationActions } from \"src/slices/LocationSlice\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\nimport LocationTitleComponent from \"../LocationTitleComponent\";\n\nconst LocationListView = ({\n  ...rest\n}) => {\n\n  const joinChar = ' » ';\n\n  const [level, setLevel] = useState(0)\n  const [segments, setSegments] = useState([])\n\n  const rowActionButtons = useMemo(() => {\n    if (level > 1) {\n      return []\n    }\n    return [{\n      icon: 'fa-link',\n      type: 'primary',\n      text: 'Sublocations',\n      onClick: (id, row) => {\n        const _level = level + 1\n        const _segments = [...segments, row.title]\n        setSegments(_segments)\n        setLevel(_level)\n        pushQueryParams(rest.history, { level: _level, locationId: id, segments: _segments.join(',') })\n      }\n    }]\n  }, [level, segments, rest.history])\n\n  useEffect(() => {\n    const _handler = () => {\n      const params = parseQueryParams(rest.history)\n      const segments = (params['segments'] || '').split(',').filter(segment => !!segment)\n      setLevel(parseInt(params['level'] || 0))\n      setSegments(segments)\n    }\n    _handler();\n    const unlisten = rest.history.listen(_handler)\n    return unlisten\n  }, [rest.history])\n\n  return (\n    <Content title={['Manage Locations'].concat(segments).join(joinChar)} subTitle={['here you can manage locations'].concat(segments).join(joinChar)} browserTitle={segments.join(joinChar)}>\n      <Box type=\"primary\" title={['Displaying locations'].concat(segments).join(joinChar)} icon=\"fa-globe\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              actionColumnWidth={320}\n              entityPlural={['Locations'].concat(segments).join(joinChar)}\n              entitySingle={['Location'].concat(segments).join(joinChar)}\n              resource={`/api/v1/admin/locations`}\n              onDataUpdated={async (tableData) => LocationActions.setLocations(tableData)}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Location ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return <LocationTitleComponent row={row} />\n                  }\n                },\n                {\n                  dataField: 'email',\n                  text: 'Email',\n                },\n                {\n                  dataField: 'polnetInterface',\n                  text: 'Polnet Interface'\n                },\n                {\n                  dataField: 'polnetIP',\n                  text: 'Polnet IP',\n                },\n              ]}\n              rowActionButtons={rowActionButtons}\n              beforeSave={(values) => {\n                const params = parseQueryParams(rest.history)\n                values['locationId'] = params['locationId'] || null\n                return values\n              }}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      required: true,\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    \n                    {\n                      id: \"email\",\n                      name: \"email\",\n                      label: \"Location Email\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n\n                    {\n                      id: \"polnetInterface\",\n                      name: \"polnetInterface\",\n                      label: \"Polnet Interface\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    {\n                      id: \"polnetIP\",\n                      name: \"polnetIP\",\n                      label: \"Polnet IP\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    email: yup.string().email(),\n                    description: yup.string(),\n                  })\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default LocationListView;\n","import * as yup from \"yup\";\n\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { RankActions } from \"src/slices/RankSlice\";\n\nconst RankListView = ({\n  title = 'Ranks',\n  description = 'here you can manage ranks',\n  ...rest\n}) => {\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Rank\"}>\n      <Box type=\"primary\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Ranks\"\n              entitySingle=\"Rank\"\n              defaultSorted={\n                [{ dataField: 'id', order: 'asc' }]\n              }\n              resource={`/api/v1/admin/ranks`}\n              onDataUpdated={async(tableData) => {\n                RankActions.setRanks(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Rank ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'description',\n                  text: 'Description',\n                  sort: true,\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      type: \"text\",\n                      required: true,\n                      cols: 12,\n                    },\n                    {\n                      id: \"description\",\n                      name: \"description\",\n                      label: \"Rank Description\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    description: yup.string(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\nexport default RankListView;\n","import httpClient from \"src/utils/httpClient\";\n\nconst rejectRegistration = async (id) => await httpClient.delete(`/api/v1/admin/registrations/${id}`);\nconst approveRegistration = async (id) => await httpClient.post(`/api/v1/admin/registrations/${id}`);\n\nconst RegistrationService = {\n  rejectRegistration,\n  approveRegistration,\n};\n\nexport default RegistrationService;\n","import { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport { useEffect } from \"react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport CommonService from \"src/services/CommonService\";\nimport RegistrationService from \"src/services/RegistrationService\";\nimport { GlobalActions } from \"src/slices/globalSlice\";\n\nconst STATUSES = {\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  PENDING: 'PENDING'\n}\n\nconst RegistrationListView = ({\n  title = 'Registrations',\n  description = 'here you can manage registrations',\n  ...rest\n}) => {\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Registration\"}>\n      <Box type=\"primary\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              actionColumnWidth={300}\n              entitySingle=\"Registration\"\n              entityPlural=\"Registrations\"\n              resource={`/api/v1/admin/registrations`}\n              rowActionButtons={[\n                {\n                  text: 'Approve',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === STATUSES.PENDING\n                  },\n                  onClick: async (id) => {\n                    await RegistrationService.approveRegistration(id)\n                  }\n                },\n                {\n                  text: 'Reject',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === STATUSES.PENDING\n                  },\n                  onClick: async (id) => {\n                    await RegistrationService.rejectRegistration(id)\n                  }\n                }\n              ]}\n              canAdd={false}\n              canEdit={false}\n              canDelete={false}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Registration ID',\n                  hidden: true,\n                }, {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'First Name',\n                  sort: true,\n\n                },\n                {\n                  dataField: 'middleName',\n                  text: 'Middle Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'lastName',\n                  text: 'Last Name',\n                  sort: true,\n                },\n\n                {\n                  dataField: 'ip',\n                  text: 'IP',\n                },\n                {\n                  dataField: 'port',\n                  text: 'Port',\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\n\nexport default RegistrationListView;\n","import { Alert, Badge, Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport CommonService from \"src/services/CommonService\";\nimport UserService from \"src/services/UserService\";\nimport { USER_ROLES, USER_STATUSES, USER_STATUS_INFO } from \"src/constants/global\";\nimport Dialog from \"src/components/Dialog\";\nimport EntityForm from \"src/components/EntityForm\";\nimport { showGlobalModalNotification } from \"src/utils/storeHelper\";\n\n\nconst resource = `/api/v1/admin/users`\n\nconst UserListView = ({\n  currentUser,\n  title = 'Users',\n  description = 'here you can manage users',\n  ...rest\n}) => {\n\n  const [locations, setLocations] = useState([])\n  const [branches, setBranches] = useState([])\n  const [ranks, setRanks] = useState([])\n  const [record, setRecord] = useState(null)\n  const [showPasswordDialog, setShowPasswordDialog] = useState(false)\n  const [formErrors, setFormErrors] = useState({})\n\n  const allowedUserRolesToCreate = useMemo(() => {\n    return [USER_ROLES.USER, USER_ROLES.ADMIN];\n  }, [currentUser])\n\n  useEffect(() => {\n    (async () => {\n      setLocations(await CommonService.getLocationList())\n      setBranches(await CommonService.getBranchesList())\n      setRanks(await CommonService.getRanksList())\n    })();\n  }, [])\n\n  const fields = useMemo(() => {\n    const _fields = [\n      {\n        id: \"username\",\n        name: \"username\",\n        label: \"Username\",\n        required: true,\n        placeholder: \"Enter Username\",\n        type: \"text\",\n        cols: 12,\n      },\n      {\n        id: \"role\",\n        name: \"role\",\n        label: \"User Role\",\n        type: \"radio_group\",\n        required: true,\n        default: USER_ROLES.USER,\n        cols: 12,\n        options: allowedUserRolesToCreate.map(role => {\n          return {\n            key: role,\n            value: role\n          }\n        })\n      },\n      {\n        id: \"firstName\",\n        name: \"firstName\",\n        label: \"First Name\",\n        required: true,\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"middleName\",\n        name: \"middleName\",\n        label: \"Middle Name\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"lastName\",\n        name: \"lastName\",\n        label: \"Last Name\",\n        type: \"text\",\n        cols: 4,\n      },\n      \n      {\n        id: \"locationId\",\n        name: \"locationId\",\n        label: \"Location\",\n        required: true,\n        type: \"select\",\n        options: locations.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"branchId\",\n        name: \"branchId\",\n        label: \"Branch\",\n        required: true,\n        type: \"select\",\n        options: branches.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"rankId\",\n        name: \"rankId\",\n        label: \"Rank\",\n        required: true,\n        type: \"select\",\n        options: ranks.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"ip\",\n        name: \"ip\",\n        label: \"IP\",\n        type: \"text\",\n        cols: 10,\n      },\n      {\n        id: \"port\",\n        name: \"port\",\n        label: \"Port\",\n        type: \"text\",\n        cols: 2,\n      },\n      {\n        id: \"addressLine1\",\n        name: \"addressLine1\",\n        label: \"Address Line 1\",\n        type: \"textarea\",\n        cols: 6,\n      },\n      {\n        id: \"addressLine2\",\n        name: \"addressLine2\",\n        label: \"Address Line 2\",\n        type: \"textarea\",\n        cols: 6,\n      },\n    ]\n    if (record && record?.id) {\n      // return _fields.filter(field => !['password', 'username'].includes(field.name))\n    }\n\n    return _fields\n  }, [locations, ranks, branches, record, allowedUserRolesToCreate])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Users\"}>\n      {record?.id && (\n        <Dialog\n          title={`Updating password #${record.id}`}\n          show={showPasswordDialog}\n          onDismiss={() => {\n            setShowPasswordDialog(false)\n          }}\n        >\n          <>\n          {record.status === USER_STATUSES.APPROVED && (\n            <p className=\"text-danger\">\n              <strong>Please Note:*</strong>\n              &nbsp;Setting password for approved users will activate the user (they can login).\n              <hr />\n            </p>\n          )}\n          <EntityForm\n            entitySingle={'Password'}\n            initialValues={{\n              password: '',\n              confirmPassword: '',\n            }}\n            formErrors={formErrors}\n            fields={[\n              {\n                id: \"password\",\n                name: \"password\",\n                label: \"Password\",\n                type: \"password\",\n                required: true,\n                cols: 12,\n              },\n              {\n                id: \"confirmPassword\",\n                name: \"confirmPassword\",\n                label: \"Confirm Password\",\n                type: \"password\",\n                required: true,\n                cols: 12,\n              },\n            ]}\n            editMode\n            onSubmit={async (values, { resetForm }) => {\n              window.scrollTo(0, 0);\n              const { password, confirmPassword } = values\n              const data = await UserService.updatePassword(record.id, password, confirmPassword)\n              if (data?.success) {\n                resetForm();\n                setRecord(null);\n                setShowPasswordDialog(false);\n                showGlobalModalNotification({\n                  success: true,\n                  message: `Password successfully updated`\n                })\n                document.getElementById('btnRefresh')?.click()\n              } else {\n                setFormErrors(data?.errors ?? {})\n              }\n            }}\n          />\n          </>\n        </Dialog>\n      )}\n      <Box type=\"primary\" title=\"\">\n        <Row>\n          <Col md={12}>\n            {Object.keys(USER_STATUS_INFO).map(s => (\n              <p>\n                <span style={{width: 75, display: 'inline-block'}}><Badge color={USER_STATUS_INFO[s].COLOR} text={s} /></span> : <strong>{USER_STATUS_INFO[s].TEXT}</strong>\n              </p>\n            ))}\n\n            <DataGridComponent\n              modalSize=\"lg\"\n              actionColumnWidth={420}\n              {...rest}\n              canAdd={true}\n              canDeleteFn={(row) => row?.id !== currentUser?.id}\n              beforeSave={(values) => {\n                if (!values['role']){\n                  values['role'] = USER_ROLES.USER\n                }\n                return values;\n              }}\n              rowActionButtons={[\n                {\n                  buildText: (row) => {\n                    return row?.status === USER_STATUSES.APPROVED ? 'Create Password'  : 'Update Password'\n                  },\n                  icon: 'fa-key',\n                  type: 'primary',\n                  onClick: async (id, row) => {\n                    setRecord(row)\n                    setShowPasswordDialog(true)\n                  }\n                },\n                {\n                  text: 'Block',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.ACTIVE && currentUser.id !== row.id\n                  },\n                  onClick: async (id) => {\n                    await UserService.blockUser(id)\n                  }\n                },\n                {\n                  text: 'Unblock',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.DISABLED\n                  },\n                  onClick: async (id) => {\n                    await UserService.unblockUser(id)\n                  }\n                }\n              ]}\n              entitySingle={\"User\"}\n              entityPlural=\"Users\"\n              resource={resource}\n              onFormShow={(row, mode) => {\n                setRecord(row)\n              }}\n              formOptions={\n                {\n                  fields,\n                }\n              }\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'User ID',\n                  hidden: true,\n                }, {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'role',\n                  text: 'Role',\n                  sort: true\n                },\n                {\n                  dataField: 'branchId',\n                  text: 'Branch',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return branches.find(b => `${b.id}` === `${row.branchId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'rankId',\n                  text: 'Rank',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return ranks.find(r => `${r.id}` === `${row.rankId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'locationId',\n                  text: 'Location',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return locations.find(l => `${l.id}` === `${row.locationId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return <Badge text={row.status} color={row.status === USER_STATUSES.ACTIVE ? 'green': 'orange'} />\n                  }\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n                {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    return [row.ip, row.port].filter(x => !!x).join(\":\")\n                  }\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default UserListView;\n","import { Box, Col, Content, Infobox2, Row } from \"adminlte-2-react\";\nimport React, { useEffect, useState } from \"react\";\nimport CommonService from \"src/services/CommonService\";\n\n\nimport {\n  REGISTRATION_LIST_PAGE,\n  USER_LIST_PAGE,\n  NMS_LIST_PAGE,\n  DEVICE_MAMAGEMENT_ROUTE,\n  SUPER_USER_LIST_PAGE,\n  ONLINE_USERS_ROUTE,\n  LOCATION_LIST_PAGE} from \"src/constants/global\";\n\nconst DashboardView = ({\n  title = \"System Overview\",\n  description,\n  ...rest\n}) => {\n\n  const NAVIGATION_CARDS = {\n    totalUsers: { text: \"Total Users\", icon: \"fa-users\", to: USER_LIST_PAGE, color: 'orange' },\n    totalOnlineUsers: { text: \"Total Online Users\", icon: \"fa-users\", to: ONLINE_USERS_ROUTE, color: 'teal' },\n    totalSuperUsers: { text: \"Total Admin Users\", icon: \"fa-users\", to: SUPER_USER_LIST_PAGE, color: 'purple' },\n    totalDormantUsers: { text: \"Total Dormant Users\", icon: \"fa-users\", to: SUPER_USER_LIST_PAGE, color: 'red' },\n    totalNmsDevices: { text: \"Total NMS Monitored Devices\", icon: \"fa-laptop\", to: NMS_LIST_PAGE, color: 'purple' },\n    totalDevices: { text: \"Total devices in directory\", icon: \"fa-laptop\", to: DEVICE_MAMAGEMENT_ROUTE, color: 'orange' },\n    totalPendingRequests: { text: \"Pending registration requests\", icon: \"fa-tasks\", to: REGISTRATION_LIST_PAGE, color: 'teal' },\n    totalDistricts: {text: \"Total Districts\", icon: \"fa-map-marker-alt\", to: LOCATION_LIST_PAGE, color: 'purple'},\n    totalRemotes: {text: \"Total Remotes\", icon: \"fa-map-marker-alt\", to: LOCATION_LIST_PAGE, color: 'teal'}\n  }\n\n  const [summary, setSummary] = useState({\n    totalUsers: 0,\n    totalOnlineUsers: 0,\n    totalSuperUsers: 0,\n    totalNmsDevices: 0,\n    totalDevices: 0,\n    totalPendingRequests: 0\n  })\n\n  useEffect(() => {\n    (async () => {\n      const data = await CommonService.getDashboardSummary()\n      data?.data && setSummary(data.data)\n    })()\n  }, [])\n\n  return (\n\n    <Content title={[title]} subTitle={description} browserTitle={title}>\n        <Row>\n          {Object.keys(NAVIGATION_CARDS).map((key) => {\n            const card = NAVIGATION_CARDS[key]\n            return (\n              <Col key={key} md={4}>\n                <Box color={card.color} type=\"success\" icon={card.icon}>\n                  <Infobox2 title={summary[key] || 0} {...card} />\n                </Box>\n              </Col>\n            );\n          })}\n        </Row>\n    </Content>\n  );\n};\n\n\nexport default DashboardView","import { Alert, Callout } from \"adminlte-2-react\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { dismissGlobalError } from \"src/utils/storeHelper\";\nimport Dialog from \"./Dialog\";\n\nconst GlobalToast = ({\n    globalMessage = {}\n}) => {\n    if (!globalMessage || !globalMessage.message) {\n        return <React.Fragment />\n    }\n    return (\n        <div className=\"globalAlert\">\n            <Alert\n                closable={true}\n                title={globalMessage.title}\n                size='xl'\n                show={globalMessage.message}\n                zIndex={9999}\n                type={globalMessage.type}\n                onDismiss={() => {\n                    dismissGlobalError();\n                }}>\n                <p>{globalMessage.message}</p>\n            </Alert>\n        </div>\n    )\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        globalMessage: state.globalState?.globalMessage || {}\n    };\n};\n\n\nexport default connect(mapStateToProps, null)(GlobalToast);\n","import React, { useMemo } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport CommonService from \"src/services/CommonService\";\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\n\nconst { default: EntityForm } = require(\"../EntityForm\")\n\nconst LocationFilter = ({\n    label = \"Filter by location\",\n    cols = 12,\n    ...rest\n}) => {\n    const [locations, setLocations] = useState([])\n    const [locationId, setLocationId] = useState(null)\n\n    const getFilterValue = () => {\n        return parseQueryParams(rest.history, 'locationId', null)\n    }\n\n    useEffect(() => {\n        (async () => {\n            setLocations(await CommonService.getLocationList())\n        })();\n    }, [])\n\n    useEffect(() => {\n        setLocationId(getFilterValue())\n        const unlisten = rest.history.listen((...args) => {\n            setLocationId(getFilterValue())\n        })\n        return unlisten\n    }, [])\n\n    return (\n        <div className={`col-md-${cols}`}>\n            <div style={{ display: 'flex', alignContent: 'center', justifyContent: 'center', alignItems: 'center' }}>\n                <label className=\"mr-2\" style={{ whiteSpace: 'nowrap' }}>Filter by location:</label>\n                <select\n                    className=\"form-control\"\n                    id=\"locationId\"\n                    name=\"locationId\"\n                    value={locationId || 0}\n                    onChange={(e) => {\n                        const value = e.nativeEvent.target.value\n                        pushQueryParams(rest.history, {\n                            locationId: value || null\n                        }, true)\n                    }}\n                >\n                    <option>Choose location</option>\n                    {locations.map(l => {\n                    return <option key={l.id} value={l.id}>{l.title}</option>\n                })}\n                </select>\n            </div>\n        </div>\n    )\n}\n\nexport default LocationFilter","import React, { useMemo } from \"react\";\nimport { clearQueryParams } from \"src/utils/routerHelper\";\n\nconst ClearFilterButton = ({\n    history,\n    title = 'Clear Filters',\n    filtersToClear = ['locationId', 'start', 'end'],\n    cols = 2\n}) => {\n    return (\n        <div className={`col-md-${cols}`}>\n            <span className=\"btn btn-danger\" onClick={() => {\n                clearQueryParams(history, filtersToClear)\n            }}>\n                {title}\n            </span>\n        </div>\n    )\n}\n\nexport default ClearFilterButton;","import * as yup from \"yup\";\nimport { NmsDeviceActions } from \"src/slices/NmsDeviceSlice\";\nimport { Box, Button, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useEffect, useState } from \"react\";\nimport CommonService from \"src/services/CommonService\";\nimport { connect } from \"react-redux\";\nimport { SETTINGS_CONFIG } from \"src/constants/global\";\nimport LocationFilter from \"src/components/filters/LocationFilter\";\nimport ClearFilterButton from \"src/components/filters/ClearFilter\";\nimport PhotoThumb from \"src/components/PhotoThumb\";\n\nconst NmsDeviceListView = ({\n  title = 'Manage NMS Devices',\n  description = 'here you can manage devices',\n  settings = [],\n  ...rest\n}) => {\n  const [deviceStatus, setDeviceStatus] = useState({})\n  const [checkInterval, setCheckInterval] = useState(5000)\n\n  useEffect(() => {\n    const interval = settings.find(s => s.name === SETTINGS_CONFIG.SNMP_CHECK_INTERVAL)?.value || 5\n    setCheckInterval(interval)\n  }, [])\n\n  const [locations, setLocations] = useState([])\n  useEffect(() => {\n    (async () => {\n      setLocations(await CommonService.getLocationList())\n    })();\n  }, [])\n\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const data = await CommonService.getNmsDevicesStatus()\n      data?.success && setDeviceStatus(data.data)\n    }, checkInterval * 1000)\n    return () => clearInterval(interval)\n  }, [checkInterval])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={title}>\n      <Box type=\"primary\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"NMS Devices\"\n              entitySingle=\"NMS Device\"\n              resource={`/api/v1/admin/nms-devices`}\n              onDataUpdated={async (tableData) => {\n                NmsDeviceActions.setNmsDevices(tableData)\n              }}\n              filterComponents={[\n                <LocationFilter history={rest.history} key={'location_filter'} cols={4} />,\n                <ClearFilterButton history={rest.history} key={'clearfilter'} />\n              ]}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Device ID',\n                  hidden: true,\n                }, {\n                  dataField: 'name',\n                  text: 'Name',\n                  sort: true,\n                }, \n                \n                {\n                  dataField: 'locationId',\n                  text: 'Location',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return locations.find(l => `${l.id}` === `${row.locationId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    let address = 'http://'+ row['ip'] + (row['port'] ? `:${row['port']}`: '') \n                    return <a target=\"_blank\" href={address}>{address}</a>\n                  }\n                },\n                {\n                  dataField: \"image\",\n                  text: \"\",\n                  formatter: (c, row) => {\n                    const online = deviceStatus[row.ip]?.isOnline\n                    return (\n                      <>\n                        <div className=\"deviceStatusSection text-center\">\n                          <PhotoThumb url={row.image} width={100} height={50} />\n                            {online && <Button type=\"success\" icon=\"fa-check\" />}\n                            {!online && <Button type=\"danger\" icon=\"fa-times\" />}\n                          <strong className=\"text-center\" style={{ color: online ? '#0f0' : '#f00' }}>{online ? 'Online' : 'Offline'}</strong>\n                        </div>\n                      </>\n                    );\n                  }\n                },\n                {\n                  dataField: 'sysName',\n                  text: 'Device System Name',\n                  width:100,\n                  formatter: (c, row) => {\n                    const str = deviceStatus[row.ip]?.systemName\n                    try{\n                      return atob(str).split(\",\").join(\"\\n\")\n                    }catch(e){\n                      return \"Unknown\"\n                    }\n                  }\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"ip\",\n                      name: \"ip\",\n                      label: \"IP\",\n                      type: \"text\",\n                      cols: 10,\n                      required: true,\n                    },\n                    {\n                      id: \"port\",\n                      name: \"port\",\n                      label: \"Port\",\n                      type: \"text\",\n                      cols: 2,\n                    },\n                    {\n                      id: \"name\",\n                      name: \"name\",\n                      label: \"Device Name\",\n                      type: \"text\",\n                      required: true,\n                      cols: 12,\n                    },\n                    {\n                      id: \"image\",\n                      name: \"image\",\n                      label: \"Device Icon/Image\",\n                      type: \"upload\",\n                      required: true,\n                      cols: 12,\n                    },\n                    {\n                      id: \"locationId\",\n                      name: \"locationId\",\n                      label: \"Location\",\n                      type: \"select\",\n                      required: true,\n                      options: locations.map(l => {\n                        return {\n                          key: l.id,\n                          value: l.title\n                        }\n                      }),\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    ip: yup.string().required(),\n                    name: yup.string().required(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    settings: state.globalState?.settings || []\n  };\n};\n\nexport default connect(mapStateToProps, null)(NmsDeviceListView);\n","import * as yup from \"yup\";\nimport { DeviceActions } from \"src/slices/DeviceSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport CommonService from \"src/services/CommonService\";\nimport { useEffect, useState } from \"react\";\nimport LocationFilter from \"src/components/filters/LocationFilter\";\nimport ClearFilterButton from \"src/components/filters/ClearFilter\";\n\nconst DeviceListView = ({\n  title = 'Manage Devices',\n  description = 'here you can manage devices directory',\n  ...rest\n}) => {\n\n  const [locations, setLocations] = useState([])\n  useEffect(() => {\n    (async () => {\n      setLocations(await CommonService.getLocationList())\n    })();\n  }, [])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={title}>\n      <Box type=\"primary\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Devices\"\n              entitySingle=\"Device\"\n              resource={`/api/v1/admin/devices`}\n              filterComponents={[\n                <LocationFilter history={rest.history} key={'location_filter'} cols={4} />,\n                <ClearFilterButton history={rest.history} key={'clearfilter'} />\n              ]}\n              onDataUpdated={async (tableData) => {\n                DeviceActions.setDevices(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Device ID',\n                  hidden: true,\n                },{\n                  dataField: 'name',\n                  text: 'Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'locationId',\n                  text: 'Location',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return locations.find(l => `${l.id}` === `${row.locationId}`)?.title || '-'\n                  }\n                },\n                 {\n                  dataField: 'ip',\n                  text: 'IP',\n                  sort: true,\n                  formatter: (c, row) => {\n                    let address = 'http://'+ row['ip'] + (row['port'] ? `:${row['port']}`: '') \n                    return <a target=\"_blank\" href={address}>{address}</a>\n                  }\n                },\n\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"ip\",\n                      name: \"ip\",\n                      label: \"IP\",\n                      type: \"text\",\n                      cols: 10,\n                      required: true,\n                    },\n                    {\n                      id: \"port\",\n                      name: \"port\",\n                      label: \"Port\",\n                      type: \"text\",\n                      cols: 2,\n                    },\n                    {\n                      id: \"name\",\n                      name: \"name\",\n                      label: \"Device Name\",\n                      type: \"text\",\n                      cols: 12,\n                      required: true,\n                    },\n                    {\n                      id: \"locationId\",\n                      name: \"locationId\",\n                      label: \"Location\",\n                      type: \"select\",\n                      required: true,\n                      options: locations.map(l => {\n                        return {\n                          key: l.id,\n                          value: l.title\n                        }\n                      }),\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    ip: yup.string().required(),\n                    name: yup.string().required(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default DeviceListView;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst OnLineUsersView = ({\n  title = 'Current Users',\n  description = 'here you can see currently active users',\n  ...rest\n}) => {\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Current Users\"}>\n      <Box type=\"success\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              canAdd={false}\n              canEdit={false}\n              canDelete={false}\n              {...rest}\n              entitySingle=\"User\"\n              entityPlural=\"Users\"\n              resource={`/api/v1/admin/users/online`}\n              columns={[\n                {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n                {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    return [row.ip, row.port].filter(x => !!x).join(\":\")\n                  }\n\n                },\n                {\n                  dataField: 'lastVisited',\n                  text: 'Last Visited',\n                  formatter: (c, row) => {\n                    return humanFriendlyDateFormat(row['lastVisited'])\n                  }\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default OnLineUsersView;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport CommonService from \"src/services/CommonService\";\nimport { formatBytesToString, humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst BackupsListView = ({\n    title = 'Database backups',\n    description = 'here you can see currently active users',\n    ...rest\n}) => {\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Database backups (latest 100 backups)\"}>\n            <Box type=\"success\">\n                <Row>\n                    <Col md={12}>\n                        <DataGridComponent\n                            modalSize=\"lg\"\n                            canAdd={false}\n                            canEdit={false}\n                            canDelete={false}\n                            {...rest}\n                            entitySingle=\"Backup\"\n                            entityPlural=\"Backups\"\n                            resource={`/api/v1/admin/db-backups`}\n                            globalActionButtons={[\n                                {\n                                    text: 'Create Backup',\n                                    icon: 'fa-plus',\n                                    type: 'success',\n                                    onClick: async () => {\n                                        await CommonService.createDatabaseBackup()\n                                    }\n                                },]\n                            }\n                            columns={[\n                                {\n                                    dataField: 'filename',\n                                    text: 'Backup file name',\n                                },\n                                {\n                                    dataField: 'size',\n                                    text: 'Size',\n                                    formatter: (c, row) => {\n                                        return formatBytesToString(row['size'])\n                                    }\n                                }, {\n                                    dataField: 'createdOn',\n                                    text: 'Created',\n                                    formatter: (c, row) => {\n                                        return humanFriendlyDateFormat(row['createdOn'])\n                                    }\n                                },\n                            ]}\n                        />\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default BackupsListView;\n","import 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\nimport { isBefore, isDate, subDays, subYears } from \"date-fns\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { useState } from \"react\";\nimport { convertToDate, formatMySql } from \"src/utils/commonHelper\";\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\nimport { DateRange } from 'react-date-range';\nimport { Button } from 'adminlte-2-react';\nimport Dialog from '../Dialog';\n\nconst DateFilter = ({\n    label = \"Filter by date\",\n    cols = 12,\n    defaultDaysSelected = 10,\n    ...rest\n}) => {\n    const [showPicker, setShowPicker] = useState(false)\n    const [dateStr, setDateStr] = useState(`Previous ${defaultDaysSelected} days`)\n    const [state, setState] = useState([]);\n\n    const getFilterValue = () => {\n        const defaultStart = new Date()\n        const defaultEnd = subDays(new Date(), defaultDaysSelected)\n        let start = parseQueryParams(rest.history, 'start', null)\n        let end = parseQueryParams(rest.history, 'end', null)\n\n        if (!start || !end) {\n            setDateStr(`Previous ${defaultDaysSelected} days`)\n        }\n\n        start = isDate(start) ? convertToDate(start) : defaultStart\n        end = isDate(end) ? convertToDate(end) : defaultEnd\n\n        setState([\n            {\n                startDate: start,\n                endDate: end,\n                key: 'selection'\n            }\n        ])\n    }\n\n    const setDatesValue = (item) => {\n        setState([item.selection])\n        const { startDate, endDate } = item.selection\n        if (startDate && endDate) {\n            setDateStr(`${formatMySql(startDate)} to ${formatMySql(endDate)}`)\n        }\n    }\n\n    useEffect(() => {\n        getFilterValue();\n        const unlisten = rest.history.listen(() => {\n            getFilterValue();\n        })\n        return unlisten\n    }, [])\n\n    useEffect(() => {\n        document.onclick = function (e) {\n            const container = document.querySelector('.datePickerComponent-active')\n            if (container && !container.contains(e.target)){\n                setShowPicker(false)\n            }\n        }\n    }, [])\n\n    return (\n        <div className={`datePickerComponent${showPicker ? '-active': ''} col-md-${cols}`}>\n            <Button disabled text={`Showing results from ${dateStr}`} />\n            <Button type=\"success\" onClick={() => setShowPicker(true)} icon=\"fa-calendar\" text=\"Filter by Date\" />\n            <div className={`datePicketContainer ${showPicker ? '' : 'hidden'}`}>\n                {state.length > 0 && <DateRange\n                    minDate={subYears(new Date(), 1)}\n                    maxDate={new Date()}\n                    onChange={setDatesValue}\n                    showSelectionPreview={false}\n                    moveRangeOnFirstSelection={false}\n                    ranges={state}\n                />}\n                <Button onClick={() => {\n                    setShowPicker(false)\n                    pushQueryParams(rest.history, {\n                        start: formatMySql(state[0].startDate),\n                        end: formatMySql(state[0].endDate)\n                    })\n\n                }} className=\"filterByDates\" type=\"success\" text=\"Filter results\" />\n            </div>\n        </div>\n    )\n}\n\nexport default DateFilter","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport ClearFilterButton from \"src/components/filters/ClearFilter\";\nimport DateFilter from \"src/components/filters/DateFilter\";\nimport LocationFilter from \"src/components/filters/LocationFilter\";\nimport { formatUserName } from \"src/utils/commonHelper\";\nimport { humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst ReportListView = ({\n    title = 'Reports',\n    description = 'here you can see various activity by users',\n    ...rest\n}) => {\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Reports\"}>\n            <Box type=\"success\">\n                <Row>\n                    <Col md={12}>\n                        <DataGridComponent\n                            modalSize=\"lg\"\n                            canAdd={false}\n                            canEdit={false}\n                            canDelete={false}\n                            {...rest}\n                            filterComponents={[\n                                <DateFilter history={rest.history} key={'date_filter'} cols={5} />,\n                                <LocationFilter history={rest.history} key={'location_filter'} cols={4} />,\n                                <ClearFilterButton history={rest.history} cols={2} key={'clear_filter'} />\n                            ]}\n                            entitySingle=\"Report\"\n                            entityPlural=\"Reports\"\n                            resource={`/api/v1/admin/reports`}\n                            columns={[\n                                {\n                                    dataField: 'entity',\n                                    text: 'Entity',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return <strong>{`${row['entity']}`.toUpperCase()}</strong>\n                                    },\n                                },\n                                {\n                                    dataField: 'entityAction',\n                                    text: 'Action',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return row['entityAction'].split('_').join(\" \")\n                                    },\n                                },\n                                {\n                                    dataField: 'modifiedById',\n                                    text: 'Action Taken By',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return `${row['modifiedByName']} - ${row['modifiedByUserName'] || 'unknown'}`\n                                    },\n                                },\n                                {\n                                    dataField: 'userLocationId',\n                                    text: 'User Location',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return row.locationTitle\n                                    },\n                                },\n                                {\n                                    dataField: 'additionalInfo',\n                                    text: 'Log',\n                                    sort: false,\n                                    formatter: (c, row) => {\n                                        return `${row['additionalInfo']}`\n                                    },\n                                },\n                                {\n                                    dataField: 'createdAt',\n                                    text: 'Action Performed on',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return `${humanFriendlyDateFormat(row['createdAt'])}`\n                                    },\n                                }\n                            ]}\n                            globalActionButtons={[\n                                {\n                                    text: 'Export filtered Records',\n                                    icon: 'fa-download',\n                                    type: 'success',\n                                    onClick: async () => {\n                                    }\n                                },\n                                {\n                                    text: 'Export All Records',\n                                    icon: 'fa-download',\n                                    type: 'success',\n                                    onClick: async () => {\n                                    }\n                                },\n                            ]}\n                        />\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default ReportListView;\n","import httpClient from \"src/utils/httpClient\";\n\nconst getWebsiteSettings = async () => await httpClient.get(\"/api/v1/admin/settings\");\nconst saveWebsiteSetting = async (settingData) => await httpClient.put(\"/api/v1/admin/settings\", settingData);\n\nconst SettingService = {\n  getWebsiteSettings,\n  saveWebsiteSetting\n};\n\nexport default SettingService;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useMemo, useState } from \"react\";\nimport SettingService from \"src/services/SettingService\";\nimport PhotoThumb from \"src/components/PhotoThumb\";\nimport { connect } from \"react-redux\";\nimport { GlobalActions } from \"src/slices/globalSlice\";\n\nconst SettingsListView = ({\n  title = 'Configurations',\n  description = 'here you can manage configurations',\n  triggerGetSettings,\n  ...rest\n}) => {\n\n  const [settings, setSettings] = useState([])\n  const [record, setCurrentRecord] = useState(null)\n\n  const fields = useMemo(() => {\n    if (record) {\n      return settings.filter(setting => setting.id === record.id)\n    }\n    return []\n  }, [record, settings])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Configuration\"}>\n      <Box type=\"primary\" title=\"\" icon=\"fa-cogx\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              hideIdOnEdit={true}\n              entityPlural=\"Configurations\"\n              entitySingle=\"Configuration\"\n              canAdd={false}\n              canEdit={true}\n              canDelete={false}\n              resource={`/api/v1/admin/settings`}\n              onFormShow={(row) => {\n                setCurrentRecord(row)\n              }}\n              onDataUpdated={(data) => {\n                triggerGetSettings()\n                setSettings(data.results)\n              }}\n              columns={[\n                {\n                  dataField: 'label',\n                  text: 'Setting Name',\n                  sort: false,\n                },\n                {\n                  dataField: 'value',\n                  text: 'Setting Value',\n                  sort: false,\n                  formatter: (c, row) => {\n                    if (row.type === 'upload') {\n                      return <PhotoThumb border={false} width={50} height={50} url={row.value} />\n                    }\n                    return row['value']\n                  }\n                }\n              ]}\n              formOptions={\n                {\n                  fields\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    triggerGetSettings: async () => {\n      const data = await SettingService.getWebsiteSettings()\n      data?.success && dispatch(GlobalActions.setWebsiteSettings(data.data))\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SettingsListView);\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport { useEffect, useState } from \"react\";\nimport { SETTINGS_CONFIG } from \"src/constants/global\";\nimport SettingService from \"src/services/SettingService\";\n\nconst READ_SETTINGS = [\n    SETTINGS_CONFIG.EMAIL_SALES,\n    SETTINGS_CONFIG.LANDLINE_SALES,\n    SETTINGS_CONFIG.LANDLINE_SUPPORT,\n    SETTINGS_CONFIG.EMAIL_SUPPORT\n]\nconst ContactUsView = ({\n    title = 'Contact Us',\n    description = 'contact information',\n    ...rest\n}) => {\n    const [settings, setSettings] = useState([])\n    useEffect(() => {\n        (async () => {\n            const data = await SettingService.getWebsiteSettings()\n            if (data?.success && data?.data?.results) {\n                const _settings = (data.data.results || []).filter(setting => READ_SETTINGS.includes(setting.name))\n                setSettings(_settings)\n            }\n        })()\n    }, [])\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Contact us\"}>\n            <Box type=\"success\">\n                <Row>\n                    <Col md={12}>\n                        <table className=\"table table-bordred table-striped\">\n                            <tbody>\n                            {settings.map((setting) => {\n                                return (\n                                    <tr>\n                                        <td>{setting.label}</td>\n                                        <td>{setting.value || setting.default}</td>\n                                    </tr>\n                                );\n                            })}\n                            </tbody>\n                        </table>\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default ContactUsView;\n","import { Alert } from \"adminlte-2-react\"\nimport { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport CommonService from \"src/services/CommonService\"\n\nconst triggerFetchNotifications = async (onFetch = (notifications) => { }) => {\n    const data = await CommonService.getNotifications()\n    return data?.success ? onFetch(data.data) : []\n}\n\nconst GlobalNotifications = ({\n    currentUser,\n}) => {\n    const [notifications, setNotifications] = useState([])\n\n    useEffect(() => {\n        triggerFetchNotifications(setNotifications)\n    }, [currentUser])\n\n    useEffect(() => {\n        const interval = setInterval(() => triggerFetchNotifications(setNotifications), 2000)\n        return () => clearInterval(interval)\n    }, [currentUser])\n    if (!notifications || notifications.length < 1 || !currentUser || !currentUser?.id) {\n        return <></>\n    }\n    return (\n        <div className=\"notification-alert-box\">\n            {\n                notifications.length > 0 && notifications.map(n => {\n                    return (\n                        <Alert key={n.message} title={n.message} icon={`fa-bell`} style={{ borderRadius: '0 !important' }} type={n.type} >\n                            <a className=\"visit\" href={n.path} title={\"View details\"} >View details</a>\n                        </Alert>\n                    )\n                })\n            }\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        currentUser: state.globalState?.currentUser || null,\n    };\n};\n\n\n\nexport default connect(mapStateToProps, null)(GlobalNotifications);\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst DormantUsersView = ({\n  title = 'Dormant/Inactive Users',\n  description = 'here you can see users those haven\\'t logged in from 30 or more days',\n  ...rest\n}) => {\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={title}>\n      <Box type=\"success\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              canAdd={false}\n              canEdit={false}\n              canDelete={false}\n              {...rest}\n              entitySingle=\"User\"\n              entityPlural=\"Users\"\n              resource={`/api/v1/admin/users/dormant`}\n              columns={[\n                {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n                {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    return [row.ip, row.port].filter(x => !!x).join(\":\")\n                  }\n                },\n                {\n                  dataField: 'lastVisited',\n                  text: 'Last Visited',\n                  formatter: (c, row) => {\n                    return humanFriendlyDateFormat(row['lastVisited'])\n                  }\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default DormantUsersView;\n","import { connect } from \"react-redux\";\r\nimport UserService from \"src/services/UserService\";\r\nimport AdminLTE, { Alert, Navbar, Sidebar, } from \"adminlte-2-react\";\r\nimport LoginForm from \"src/components/LoginForm\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { navigateToLogin } from \"src/utils/routerHelper\";\r\nimport {\r\n  BRANCH_LIST_PAGE,\r\n  LOCATION_LIST_PAGE,\r\n  NAV_ITEMS,\r\n  RANK_LIST_PAGE,\r\n  REGISTRATION_LIST_PAGE,\r\n  USER_LIST_PAGE,\r\n  DASHBOARD_ROUTE,\r\n  LOGOUT_ROUTE,\r\n  NMS_LIST_PAGE,\r\n  DEVICE_MAMAGEMENT_ROUTE,\r\n  ONLINE_USERS_ROUTE,\r\n  BACKUPS_LIST,\r\n  REPORTS_LIST_PAGE,\r\n  SETTINGS_PAGE,\r\n  CONTACT_PAGE,\r\n  SETTINGS_CONFIG,\r\n  DORMANT_USERS_PAGE\r\n} from \"src/constants/global\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport BranchListView from \"src/modules/branches/views/BranchListView\";\r\nimport LocationListView from \"src/modules/locations/views/LocationListView\";\r\nimport RankListView from \"src/modules/ranks/views/RankListView\";\r\nimport RegistrationListView from \"src/modules/registrations/views/RegistrationListView\";\r\nimport UserListView from \"src/modules/users/UserListView\";\r\nimport DashboardView from \"src/modules/dashboard/views/DashboardView\";\r\nimport GlobalToast from \"src/components/GlobalToast\";\r\nimport NmsDeviceListView from \"src/modules/nms-devices/views/NmsDevicesListView\";\r\nimport DeviceListView from \"src/modules/device-directory/views/DevicesListView\";\r\nimport OnLineUsersView from \"src/modules/users/OnlineUsersView\";\r\nimport BackupsListView from \"src/modules/backups/BackupsListView\";\r\nimport ReportListView from \"src/modules/reports/ReportListView\";\r\nimport SettingsListView from \"src/modules/settings/SettingsListView\";\r\nimport ContactUsView from \"src/modules/contact_us/ContactUsView\";\r\nimport { format } from \"date-fns\";\r\nimport SettingService from \"src/services/SettingService\";\r\nimport { GlobalActions } from \"src/slices/globalSlice\";\r\nimport CommonService from \"src/services/CommonService\";\r\nimport { formatUserName, humanFriendlyDateFormat } from \"src/utils/commonHelper\";\r\nimport GlobalNotifications from \"src/components/GlobalNotifications\";\r\nimport DormantUsersView from \"src/modules/users/DormantUsersView\";\r\n\r\nconst { Entry } = Navbar\r\n\r\nconst Footer = () => {\r\n  const title = `©️ ${format(new Date(), 'yyyy')} MCIL. All Rights Reserved.`\r\n  return (\r\n    <div className=\"text-center\" style={{ color: '#444', padding: \"15px 0\", margin: 0, marginLeft: 200, background: '#eee', borderTop: 'solid 1px #ccc' }}>\r\n      <p><strong>{title}</strong></p>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Layout = ({ \r\n  triggerLogin,\r\n  triggerGetCurrentUser,\r\n  currentUser,\r\n}) => {\r\n\r\n  useEffect(() => {\r\n    triggerGetCurrentUser()\r\n  }, [])\r\n\r\n  const isLoggedIn = !!currentUser\r\n  if (!isLoggedIn) {\r\n    return (\r\n      <BrowserRouter>\r\n        <GlobalToast />\r\n        <LoginForm triggerLogin={triggerLogin} />\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <GlobalNotifications currentUser={currentUser} />\r\n      <GlobalToast />\r\n      <AdminLTE footer={<Footer />} theme=\"black\" title={[]}>\r\n        <Navbar.Core>\r\n          <Entry to={LOGOUT_ROUTE} labelValue=\"Logout\" icon=\"fa-power-off\" labelType=\"danger\" onClick={() => navigateToLogin()} />\r\n        </Navbar.Core>\r\n        <Sidebar.Core>\r\n          <a className=\"logo\" href=\"/\">\r\n            <img src=\"/dp_logo.png\" style={{width: '100%', padding: '30px 50px', height: 'inherit', background: '#fff'}} />\r\n          </a>\r\n          {\r\n            NAV_ITEMS.map((item, index) => {\r\n              if (item.items && item.items.length > 0) {\r\n                return (<Sidebar.Item onClick={item.onClick} key={index} icon={item.icon} text={item.title} to={item.path} color={item.color ?? 'gray'}>\r\n                  {(item.items || []).map((childItem, childIndex) => {\r\n                    return <Sidebar.Item onClick={childItem.onClick} key={`${index}-child-${childIndex}`} icon={childItem.icon} text={childItem.title} to={childItem.path} color={childItem.color ?? 'gray'} />\r\n                  })}\r\n                </Sidebar.Item>)\r\n              }\r\n              return <Sidebar.Item onClick={item.onClick} key={`${index}`} icon={item.icon} text={item.title} to={item.path} color={item.color ?? 'gray'} />\r\n            })\r\n          }\r\n          <div className=\"userLoggedInInfo\" text=\"Admin\" >\r\n            <p>{formatUserName(currentUser)}<br />\r\n              <span>{humanFriendlyDateFormat(currentUser.lastLogin, 'dd-MM-yyyy hh:mm a')}</span>\r\n            </p>\r\n          </div>\r\n        </Sidebar.Core>\r\n        <BranchListView currentUser={currentUser} path={BRANCH_LIST_PAGE} exact={true} />\r\n        <LocationListView currentUser={currentUser} path={LOCATION_LIST_PAGE} exact={true} />\r\n        <RankListView currentUser={currentUser} path={RANK_LIST_PAGE} exact={true} />\r\n        <RegistrationListView currentUser={currentUser} path={REGISTRATION_LIST_PAGE} exact={true} />\r\n        <UserListView currentUser={currentUser} path={USER_LIST_PAGE} exact={true} />\r\n        <DashboardView currentUser={currentUser} path={DASHBOARD_ROUTE} exact={true} />\r\n        <NmsDeviceListView currentUser={currentUser} path={NMS_LIST_PAGE} exact={true} />\r\n        <DeviceListView currentUser={currentUser} path={DEVICE_MAMAGEMENT_ROUTE} exact={true} />\r\n        <OnLineUsersView currentUser={currentUser} path={ONLINE_USERS_ROUTE} exact={true} />\r\n        <DormantUsersView currentUser={currentUser} path={DORMANT_USERS_PAGE} exact={true} />\r\n        <BackupsListView currentUser={currentUser} path={BACKUPS_LIST} exact={true} />\r\n        <ReportListView currentUser={currentUser} path={REPORTS_LIST_PAGE} exact={true} />\r\n        <SettingsListView currentUser={currentUser} path={SETTINGS_PAGE} exact={true} />\r\n        <ContactUsView currentUser={currentUser} path={CONTACT_PAGE} exact={true} />\r\n      </AdminLTE>\r\n    </React.Fragment>\r\n\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentUser: state.globalState?.currentUser || null,\r\n    settings: state.globalState?.settings || null,\r\n    notifications: state.globalState?.notifications || []\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    triggerLogin: async ({ username, password }, history) => {\r\n      const data = await UserService.loginUser(username, password);\r\n      data?.success && dispatch(GlobalActions.setUserState(data.data));\r\n      return data;\r\n    },\r\n    triggerGetCurrentUser: async () => {\r\n      const data = await UserService.getCurrentUser()\r\n      data?.success && dispatch(GlobalActions.setCurrentUser(data.data))\r\n      if (data?.success){\r\n        const data = await SettingService.getWebsiteSettings()\r\n        data?.success && dispatch(GlobalActions.setWebsiteSettings(data.data))  \r\n      }\r\n    },\r\n    triggerFetchNotifications: async (user) => {\r\n      if (!user){\r\n        return\r\n      }\r\n      const data = await CommonService.getNotifications()\r\n      data?.success && dispatch(GlobalActions.setNotifications(data.data ?? []))  \r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Layout from \"./layouts\";\nimport store from \"./store/store\";\nimport { Provider } from \"react-redux\";\nimport 'react-quill/dist/quill.snow.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'src/assets/style.css'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.Fragment>\n      <Layout />\n    </React.Fragment>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","const LocalStorageHelper = {\n  store: (key, value) => {\n    if (key && value) {\n      window.localStorage.setItem(key, JSON.stringify(value));\n    }\n  },\n  get: (key) => {\n    if (key) {\n        let value = window.localStorage.getItem(key);\n        try{\n            return JSON.parse(value);\n        }catch(e){\n            return value || null\n        }\n    }\n  },\n  delete: (key) => {\n      if(key){\n         localStorage.removeItem(key);\n      }\n  }\n};\n\nexport default LocalStorageHelper\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: RegistrationReducer, actions: RegistrationActions } = createSlice(\n  {\n    name: \"registrationSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n    },\n    reducers: {\n      setRegistrations: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: UserReducer, actions: UserActions } = createSlice(\n  {\n    name: \"userSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n    },\n    reducers: {\n      setUsers: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport thunk from \"redux-thunk\";\r\nimport { RegistrationReducer } from \"src/slices/RegistrationSlice\";\r\nimport { RankReducer } from \"src/slices/RankSlice\";\r\nimport { BranchReducer } from \"src/slices/BranchSlice\";\r\nimport { LocationReducer } from \"src/slices/LocationSlice\";\r\nimport { GlobalReducer } from \"src/slices/globalSlice\";\r\nimport { NmsDeviceReducer } from \"src/slices/NmsDeviceSlice\";\r\nimport { DeviceReducer } from \"src/slices/DeviceSlice\";\r\nimport { UserReducer as UserManagementReducer } from \"src/slices/UserSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    globalState: GlobalReducer,\r\n    rankState: RankReducer,\r\n    branchState: BranchReducer,\r\n    locationState: LocationReducer,\r\n    registrationState: RegistrationReducer,\r\n    nmsState: NmsDeviceReducer,\r\n    deviceState: DeviceReducer,\r\n    userState: UserManagementReducer\r\n  },\r\n  middleware: [thunk],\r\n});\r\n","import React from \"react\";\nconst PhotoThumb = ({\n  url = null,\n  width = 120,\n  height = 120,\n  border = 1,\n  borderColor = \"grey\",\n  onClick = () => {}\n}) => {\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        width,\n        height,\n        backgroundImage: `url(${url})`,\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"contain\",\n        backgroundPosition: 'center',\n        border: `solid ${border || 1}px ${borderColor}`,\n        cursor: \"pointer\",\n      }}\n      className=\"img-thumbnail m-2\"\n    />\n  );\n};\n\nexport default PhotoThumb;\n","import httpClient from \"src/utils/httpClient\";\n\nconst uploadFile = async (file) => {\n  const data = new FormData();\n  data.append(\"file\", file);\n  const res = await httpClient.post(\"/api/v1/admin/uploads\", data);\n  const url = res?.success ? res.data : null\n  return url ? `/api/v1/uploads/${url}` : null\n};\n\nconst getUploadedFiles = async () => await httpClient.get(\"/api/v1/admin/uploads\");\n\nconst deleteFile = async (id) => await httpClient.delete(`/api/v1/admin/uploads/${id}`)\n\nconst UploadService = {\n  uploadFile,\n  getUploadedFiles,\n  deleteFile\n};\n\n\nexport default UploadService;\n","import { Field, Form, Formik } from \"formik\";\nimport React, { forwardRef } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport DatePicker from \"react-datepicker\";\nimport PhotoThumb from \"./PhotoThumb\";\nimport { format } from \"date-fns\";\nimport { Alert, Button, ButtonGroup, Col, Row } from \"adminlte-2-react\";\nimport { showGlobalModalNotification } from \"src/utils/storeHelper\";\nimport UploadService from \"src/services/UploadService\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { fieldsToLabelMap } from \"src/constants/global\";\nimport { ucFirst } from \"src/utils/commonHelper\";\n\nconst CustomDateInput = forwardRef(({ onClick, originalValue }, ref) => {\n  return (\n    <ButtonGroup>\n      <Button className=\"ps-2 pe-2\" disabled text={originalValue || \"YYYY-MM-DD\"} />\n      <Button onClick={onClick} icon=\"fa-calendar\" />\n    </ButtonGroup>\n  );\n});\nconst FieldWrap = ({\n  field = {},\n  errors = {},\n  touched = {},\n  children = null,\n  formErrors = {}\n}) => {\n  const shouldShowError =\n    (errors[field.name] && touched[field.name]) ||\n    (errors[field.name] && field.type === \"richtext\") || formErrors[field.name];\n  return (\n    <Col key={field.id} className={`mb-2 field-row col-md-${field.cols}`}>\n      <div style={{marginBottom: 10}} className={`form-group ${shouldShowError ? 'has-error' : ''}`}>\n        {!field?.hideLabel && <label htmlFor={field.id} className=\"form-label\">\n          {field.label} {field.required && <sup className=\"text-red\">*</sup>}\n        </label>\n        }\n        <div>\n          {children}\n          {/* {shouldShowError && (\n            <p style={{fontSize: 12, fontWeight:'normal', marginBottom: 0}} className=\"text-red\">{errors[field.name] || formErrors[field.name]}</p>\n          )} */}\n        </div>\n      </div>\n    </Col>\n  );\n};\n\nconst objectAsArray = (object) => {\n  if (Array.isArray(object)) {\n    return object;\n  } else {\n    const data = [];\n    Object.keys(key => {\n      data.push({ key, value: object[key] })\n    })\n    return data;\n  }\n}\n\nconst EntityForm = ({\n  id = \"\",\n  action = \"\",\n  method = \"POST\",\n  disabled = false,\n  initialValues = {},\n  validationSchema = null,\n  fields = [],\n  onSubmit = async (values, props) => { },\n  editMode = false,\n  entitySingle = 'record',\n  submitTitle = null,\n  formErrors = {},\n  hideSubmit = false\n}) => {\n\n  if (!initialValues || fields.length < 1) {\n    return <></>;\n  }\n  return (\n    <Row>\n      <Col md={12}>\n        <Formik\n          initialValues={initialValues}\n          enableReinitialize\n          onSubmit={(values, formConfig) => {\n            const modifiedValues = {}\n            Object.keys(initialValues).forEach(key => {\n              if ((values[key] !== initialValues[key] && values[key] !== undefined) || `${key}` === \"id\") {\n                modifiedValues[key] = values[key]\n              }\n            });\n            onSubmit(modifiedValues, formConfig)\n          }}\n          validationSchema={validationSchema}\n        >\n          {({ errors, touched, values, setFieldValue }) => (\n            <Form\n              action={action}\n              id={id || Date.now()}\n              method={method}\n              disabled={disabled}\n            >\n              {Object.keys(formErrors).length > 0 && (<Row>\n                <Col className=\"col-lg-12 col-md-12\">\n                  <Alert type=\"danger\">\n                    <h4>\n                      <strong>Please note:</strong>\n                    </h4>\n                    {Object.keys(formErrors).map(field => {\n                      if (field === 'global'){\n                        return <></>\n                      }\n                      const fieldLabel = fieldsToLabelMap[field] ? fieldsToLabelMap[field] : field.replace('Id', '')\n                      return <div key={field}><strong>{ucFirst(fieldLabel)}</strong> - {formErrors[field]}</div>\n                    })}\n                  </Alert>\n                </Col>\n              </Row>)}\n              <Row>\n                {fields.map((field) => {\n                  switch (field.type) {\n                    case \"fieldset\":\n                      return (\n                        <h3 className=\"display-6 fs-6 pt-2 pb-2 fw-bold bg-secondary text-white\">{field?.title}</h3>\n                      );\n                    case \"select\":\n                      const options = objectAsArray(field?.options || [])\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}-${entitySingle}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <Field\n                            as=\"select\"\n                            className={\n                              errors[field.name] && touched[field.name]\n                                ? \"form-select rounded-0 is-invalid shadow-none form-control\"\n                                : \"form-select form-control\"\n                            }\n                            placeholder={field.placeholder || field.label}\n                            name={field.name}\n                            id={field.id}\n                            onChange={(e) => {\n                              field.onChange && field.onChange(e)\n                              setFieldValue(field.name, e.nativeEvent.target.value)\n                            }}\n                          >\n                            <option value={''}>Choose {field.placeholder || field.label}</option>\n                            {options.map((option) => (\n                              <option\n                                key={`${option.key}-${entitySingle}`}\n                                value={option.key}\n                              >\n                                {option.value}\n                              </option>\n                            ))}\n                          </Field>\n                        </FieldWrap>\n                      );\n                    case \"textarea\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <Field\n                            as=\"textarea\"\n                            className={\n                              errors[field.name] && touched[field.name]\n                                ? \"form-control shadow-none is-invalid\"\n                                : \"form-control shadow-none\"\n                            }\n                            placeholder={field.placeholder || field.label}\n                            name={field.name}\n                            id={field.id}\n                            onChange={(e) => {\n                              field.onChange && field.onChange(e)\n                              setFieldValue(field.name, e.nativeEvent.target.value)\n                            }}\n                          />\n                        </FieldWrap>\n                      );\n                    case \"checkbox_group\":\n                      const setCheckBoxGroupFieldValue = (e) => {\n                        const existingValues = new Set(values[field.name].length > 0 ? values[field.name] : [])\n                        if (e.target.checked) {\n                          existingValues.add(parseInt(e.target.value))\n                        } else {\n                          existingValues.delete(parseInt(e.target.value))\n                        }\n                        setFieldValue(field.name, Array.from(existingValues))\n                      }\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n\n                        >\n                          <div className=\"p-3 ps-3\" style={{ height: `${field.height || 150}px`, backgroundColor: '', border: 'solid 1px #eee', overflow: 'auto' }}>\n                            {field.options.map(option => {\n                              return (\n                                <div key={option.key} className=\"form-check\">\n                                  <input\n                                    type=\"checkbox\"\n                                    className={\n                                      errors[field.name] && touched[field.name]\n                                        ? \"form-check-input shadow-none is-invalid\"\n                                        : \"form-check-input shadow-none\"\n                                    }\n                                    name={`${field.name}`}\n                                    checked={values[field.name].includes(option.key)}\n                                    id={`${field.id}-${option.key}`}\n                                    value={option.key}\n                                    onChange={setCheckBoxGroupFieldValue}\n                                  />\n                                  <label className=\"form-check-label\" htmlFor={`${field.id}-${option.key}`}>{option.value}</label>\n                                </div>\n                              )\n                            })}\n                          </div>\n                        </FieldWrap>\n                      );\n                    case \"richtext\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <ReactQuill\n                            theme=\"snow\"\n                            value={values[field.name]}\n                            onChange={(value) => setFieldValue(field.name, value)}\n                          />\n                        </FieldWrap>\n                      );\n                    case \"date\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <DatePicker\n                            showIcon\n                            name={field.name}\n                            className=\"d-flex\"\n                            onChange={(date) => {\n                              field.onChange && field.onChange(date)\n                              setFieldValue(\n                                field.name,\n                                format(date, \"yyyy-MM-dd\")\n                              )\n                            }\n                            }\n                            customInput={\n                              <CustomDateInput\n                                originalValue={values[field.name]}\n                              />\n                            }\n                          />\n                        </FieldWrap>\n                      );\n                    case \"upload\":\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <input onChange={async (e) => {\n                            const file = e.nativeEvent?.target?.files[0]\n                            if (!file) {\n                              showGlobalModalNotification({\n                                success: false,\n                                message: \"You've choosen any file\",\n                              })\n                              return\n                            }\n                            const url = await UploadService.uploadFile(file)\n                            if (!url) {\n                              showGlobalModalNotification({\n                                success: false,\n                                message: \"Unable to upload file, contact server admin.\"\n                              })\n                              return\n                            }\n                            setFieldValue(field.name, `${url}`)\n                          }} id=\"fileinputRef\" accept=\"image/*\" type=\"file\" name={\"file\"} style={{ opacity: 0, position: \"absolute\", left: -9999, top: -100 }} />\n                          <div className=\"d-flex flex-wrap align-items-center justify-content-start\">\n                            <PhotoThumb\n                              key={\"no-selection\"}\n                              url={values[field.name] || values[field.default]}\n                            />\n                            <Button\n                              onClick={() => {\n                                document.getElementById('fileinputRef').click();\n                              }}\n                              icon=\"fa-edit\"\n                            />\n                          </div>\n                        </FieldWrap>\n                      );\n                    case \"hidden\":\n                      return (\n                        <Field\n                          key={`field-${field.id}`}\n                          autoComplete=\"off\"\n                          name={field.name}\n                          type={\"hidden\"}\n                          id={field.id}\n                        />\n                      );\n                    case \"radio_group\":\n                        return (\n                          <div className=\"checkboxGroup\">\n                          <FieldWrap\n                            key={`field-${field.id}`}\n                            {...{ field, errors, touched }}\n                            formErrors={formErrors}\n  \n                          >\n                              {field.options.map(option => {\n                                return (\n                                  <div key={option.key} className=\"form-check\">\n                                    <input\n                                      type=\"radio\"\n                                      className={\n                                        errors[field.name] && touched[field.name]\n                                          ? \"form-check-input shadow-none is-invalid\"\n                                          : \"form-check-input shadow-none\"\n                                      }\n                                      name={`${field.name}`}\n                                      checked={values[field.name].includes(option.key)}\n                                      id={`${field.id}-${option.key}`}\n                                      value={option.key}\n                                      onChange={(e) => setFieldValue(field.name, e.target.value)}\n                                    />\n                                    <label className=\"form-check-label ml-2\" htmlFor={`${field.id}-${option.key}`}>{option.value}</label>\n                                  </div>\n                                )\n                              })}\n                          </FieldWrap>\n                          </div>\n                        );\n                      default:\n                      return (\n                        <FieldWrap\n                          key={`field-${field.id}`}\n                          {...{ field, errors, touched }}\n                          formErrors={formErrors}\n                        >\n                          <Field\n                            autoComplete=\"off\"\n                            className={\n                              errors[field.name] && touched[field.name]\n                                ? \"form-control rounded-0 shadow-none is-invalid\"\n                                : \"form-control rounded-0 shadow-none\"\n                            }\n                            placeholder={field.placeholder || field.label}\n                            name={field.name}\n                            type={field.type}\n                            id={field.id}\n                            onChange={(e) => {\n                              field.onChange && field.onChange(e)\n                              setFieldValue(field.name, e.nativeEvent.target.value)\n                            }}\n                          />\n                        </FieldWrap>\n                      );\n                  }\n                })}\n              </Row>\n              {!hideSubmit && (\n                <>\n                  <hr />\n                  <div className=\"d-flex flex-row-reverse text-right\">\n                    <button\n                      disabled={disabled}\n                      onClick={() => window.scrollTo(0, 0)}\n                      type=\"success\"\n                      className=\"btn rounded-0  btn-primary\"\n                    >\n                      {submitTitle && <span>{submitTitle}</span>}\n                      {!submitTitle && (\n                        <span>\n                          {editMode ? \"Update\" : \"Create\"} {entitySingle}\n                        </span>\n                      )}\n                    </button>\n                  </div>\n                </>\n              )}\n\n            </Form>\n          )}\n        </Formik>\n      </Col>\n    </Row>\n  );\n};\n\nexport default EntityForm;\n"],"sourceRoot":""}