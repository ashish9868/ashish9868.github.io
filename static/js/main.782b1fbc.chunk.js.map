{"version":3,"sources":["slices/LocationSlice.js","slices/NmsDeviceSlice.js","slices/DeviceSlice.js","utils/httpClient.js","utils/storeHelper.js","slices/currentUserSlice.js","services/UserService.js","components/LoginForm.js","utils/routerHelper.js","constants/global.js","components/Dialog.js","components/PhotoThumb.js","components/EntityForm.js","components/DataGridComponent.js","modules/branches/views/BranchListView.js","modules/locations/views/LocationListView.js","modules/ranks/views/RankListView.js","services/RegistrationService.js","modules/registrations/views/RegistrationListView.js","services/CommonService.js","modules/users/UserListView.js","modules/dashboard/views/DashboardView.js","components/GlobalToast.js","modules/nms-devices/views/NmsDevicesListView.js","modules/device-directory/views/DevicesListView.js","modules/users/AdminListView.js","utils/commonHelper.js","modules/users/OnlineUsersView.js","modules/backups/BackupsListView.js","modules/reports/ReportListView.js","modules/settings/SettingsListView.js","layouts/index.js","index.js","utils/localStorageHelper.js","slices/RegistrationSlice.js","slices/UserSlice.js","store/store.js","slices/globalSlice.js","slices/RankSlice.js","slices/BranchSlice.js"],"names":["createSlice","name","initialState","listData","results","currentPage","totalResults","totalPages","_location","reducers","setLocations","state","payload","LocationReducer","reducer","LocationActions","actions","nms","setNmsDevices","NmsDeviceReducer","NmsDeviceActions","setDevices","DeviceReducer","DeviceActions","httpClient","axios","create","baseURL","headers","interceptors","request","use","config","user","LocalStorageHelper","get","accessToken","response","data","success","error","errorResponse","status","errors","globalError","showGlobalModalNotification","message","hideTs","title","Promise","resolve","code","redirectURL","responseURL","store","dispatch","CurrentUserActions","setUserState","window","location","encodeURIComponent","reject","scrollTo","GlobalActions","setGlobalMessage","type","dismissGlobalError","userKEY","delete","CurrentUserReducer","loginUser","username","password","post","getCurrentUser","logOutUser","getAllUsers","params","rejectUser","id","approveUser","blockUser","patch","unblockUser","UserService","loginSchema","yup","shape","required","LoginForm","triggerLogin","history","_history","useHistory","useState","formErrors","setFormErrors","className","style","border","paddingTop","href","initialValues","onSubmit","values","validationSchema","initialErrors","touched","htmlFor","autoComplete","placholder","pushQueryParams","append","replace","queryParams","parseQueryParams","finalParams","Object","keys","forEach","p","pathname","search","URLSearchParams","toString","push","key","defaultVal","v","k","LOCATION_LIST_PAGE","RANK_LIST_PAGE","BRANCH_LIST_PAGE","REGISTRATION_LIST_PAGE","NMS_LIST_PAGE","USER_LIST_PAGE","DEVICE_MAMAGEMENT_ROUTE","ONLINE_USERS_ROUTE","SUPER_USER_LIST_PAGE","BACKUPS_LIST","REPORTS_LIST_PAGE","SETTINGS_PAGE","NAV_ITEMS","icon","path","color","USER_STATUSES","USER_ROLES","SUPERADMIN","ADMIN","USER","Dialog","children","exists","show","showHeader","acceptText","cancelText","canDismiss","size","bodyPadding","zIndex","cancelDisabled","successDisabled","onSuccess","onCancel","onDismiss","tabIndex","display","overflow","onClick","disabled","PhotoThumb","url","width","height","borderColor","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","cursor","CustomDateInput","forwardRef","ref","originalValue","FieldWrap","field","shouldShowError","cols","label","EntityForm","action","method","fields","props","editMode","entitySingle","submitTitle","length","md","enableReinitialize","formConfig","modifiedValues","undefined","setFieldValue","Date","now","map","options","object","Array","isArray","value","objectAsArray","as","placeholder","option","setCheckBoxGroupFieldValue","e","existingValues","Set","target","checked","add","parseInt","from","backgroundColor","includes","onChange","theme","date","format","customInput","console","log","opacity","position","left","top","file","document","getElementById","click","LoadingOverlay","propTypes","MODE_EDIT","DataGridComponent","modalSize","keyField","entityPlural","columns","hideIdOnEdit","limit","remote","sort","filter","pagination","defaultSorted","dataField","order","showTotal","beforeSave","onTableChange","onDataUpdated","tableData","onDelete","canAdd","canDelete","canEdit","rowActionButtons","globalActionButtons","formOptions","resource","onFormShow","row","mode","actionColumnWidth","rest","record","setCurrentRecord","showFormDialog","setShowFormDialog","selectedIds","setSelectedIds","loading","setLoading","records","setRecords","fetchTableData","useCallback","result","columnsWithActions","useMemo","clms","clm","isDummyField","text","formatter","cellContent","actionButton","canShow","fieldsDyanmic","recordKey","default","triggerSetCurrentRecord","isAddEdit","currentRecord","find","r","useEffect","unlisten","listen","Fragment","resetForm","put","baseProps","paginationFactory","page","sizePerPage","totalSize","sizePerPageList","paginationSize","filterFactory","_data","sortOrder","sortBy","striped","selectRow","bgColor","selectColumnStyle","onSelectAll","isSelected","selections","onSelect","hideSelectColumn","overlay","overlayFactory","spinner","styles","base","background","noDataIndication","BranchListView","description","subTitle","browserTitle","BranchActions","setBranches","hidden","LocationListView","joinChar","level","setLevel","segments","setSegments","_level","_segments","locationId","join","_handler","split","segment","concat","email","RankListView","RankActions","setRanks","rejectRegistration","approveRegistration","RegistrationService","STATUSES","RegistrationListView","require","getLocationList","locations","getBranchesList","getRanksList","createDatabaseBackup","getDashboardSummary","CommonServerice","UserListView","branches","ranks","setRecord","setMode","CommonService","_fields","l","firstName","branchId","rankId","c","b","middleName","lastName","x","ip","port","DashboardView","NAVIGATION_CARDS","totalUsers","to","totalOnlineUsers","totalSuperUsers","totalNmsDevices","totalDevices","totalPendingRequests","summary","setSummary","card","connect","globalMessage","globalState","NmsDeviceListView","DeviceListView","AdminListView","role","humanFriendlyDateFormat","dateStrIso","defaultFormatStr","parseISO","OnLineUsersView","BackupsListView","bytes","toFixed","ReportListView","toUpperCase","SettingsListView","settings","setSettings","setting","Entry","Navbar","currentUser","currentUserState","Core","labelType","route","navigateToLogin","item","index","items","Item","childItem","childIndex","exact","ReactDOM","render","localStorage","setItem","JSON","stringify","getItem","parse","removeItem","setRegistrations","RegistrationReducer","setUsers","UserReducer","configureStore","GlobalReducer","rankState","RankReducer","branchState","BranchReducer","locationState","registrationState","nmsState","deviceState","userState","UserManagementReducer","middleware","thunk","fileManagerContext","context","setFileManagerContext","rank","branch"],"mappings":"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","file":"static/js/main.782b1fbc.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: LocationReducer, actions: LocationActions } = createSlice(\n  {\n    name: \"locationSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      _location: null,\n    },\n    reducers: {\n      setLocations: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: NmsDeviceReducer, actions: NmsDeviceActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      nms: null,\n    },\n    reducers: {\n      setNmsDevices: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: DeviceReducer, actions: DeviceActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      nms: null,\n    },\n    reducers: {\n      setDevices: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import axios from \"axios\";\nimport store from \"src/store/store\";\nimport { CurrentUserActions } from \"src/slices/currentUserSlice\";\nimport LocalStorageHelper from \"./localStorageHelper\";\nimport { showGlobalModalNotification } from \"./storeHelper\";\n\nconst baseUrl = `/`;\nconst httpClient = axios.create({\n  baseURL: baseUrl,\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n\n\nhttpClient.interceptors.request.use((config) => {\n  // Do something before request is sent\n  const user = LocalStorageHelper.get('currentUser');\n  config.headers['Content-type'] = `application/json`\n  config.headers['Authorization'] = `Bearer ${user?.accessToken}`\n  return config;\n});\n\nhttpClient.interceptors.response.use(\n  (response) => {\n    return { data: response.data, success: true };\n  },\n  (error) => {\n    const errorResponse = error?.response;\n    switch (errorResponse?.status) {\n      case 422:\n        const errors = errorResponse?.data ?? {}\n        const globalError = errors['global'] || null\n        if (globalError){\n          showGlobalModalNotification({\n            message: globalError,\n            success: false,\n            hideTs: 5000,\n            title: \"Error!!\"\n          })\n        }\n        return Promise.resolve({\n          success: false,\n          errors: errors,\n          code: 422,\n        });\n      case 401:\n        const redirectURL = errorResponse.request.responseURL\n        store.dispatch(CurrentUserActions.setUserState(null));\n        window.location = `/login?redirect=${encodeURIComponent(redirectURL)}`\n        return Promise.resolve({\n          success: false,\n          code: 401,\n        });\n      case 404:\n        showGlobalModalNotification({\n          message: 'Page/Resource you are trying to access, do not exist.',\n          success: false,\n          hideTs: 5000,\n          title: \"Error!!\"\n        })\n        return Promise.resolve({\n          success: false,\n          code: 404,\n        });\n      default:\n        showGlobalModalNotification({\n          message: \"Something went wrong.\",\n          success: false,\n          hideTs: 5000,\n          title: \"Error!!\"\n        })\n\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default httpClient;\n","import { GlobalActions } from \"src/slices/globalSlice\"\nimport store from \"src/store/store\"\n\n\nexport const showGlobalModalNotification = ({\n    success = true,\n    title = 'Please note',\n    message,\n    hideTs = 3000\n}) => {\n    window.scrollTo(0, 0)\n    store.dispatch(GlobalActions.setGlobalMessage({\n        type: success ? 'success' : 'danger',\n        title,\n        message\n    }))\n    // setTimeout(function () {\n    //    \n    // }, hideTs)\n}\n\nexport const dismissGlobalError = () => {\n    store.dispatch(GlobalActions.setGlobalMessage({\n        type: '',\n        title: '',\n        message: ''\n    }))\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport LocalStorageHelper from \"../utils/localStorageHelper\";\r\n\r\nexport const userKEY = \"currentUser\";\r\nexport const { actions: CurrentUserActions, reducer: CurrentUserReducer } = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: LocalStorageHelper.get(userKEY),\r\n  },\r\n  reducers: {\r\n    setUserState: (state, { payload }) => {\r\n      payload\r\n        ? LocalStorageHelper.store(userKEY, payload)\r\n        : LocalStorageHelper.delete(userKEY);\r\n      state.user = payload;\r\n    },\r\n  },\r\n});\r\n","import httpClient from \"../utils/httpClient\";\n\nconst loginUser = async (username, password) =>\n  await httpClient.post(\"/auth/login\", {\n    username,\n    password\n  });\n\nconst getCurrentUser = async () => await httpClient.get(\"/api/v1/me\");\n\nconst logOutUser = async () => await httpClient.get(\"/auth/logout\");\n\nconst getAllUsers = async (params = {}) =>\n  await httpClient.get(\"/api/v1/admin/users\", { params });\n\nconst rejectUser = async (id) => await httpClient.delete(`/api/v1/admin/users/${id}`);\nconst approveUser = async (id) => await httpClient.post(`/api/v1/admin/users/${id}`);\n\nconst blockUser = async (id) => await httpClient.patch(`/api/v1/admin/users/${id}/block`)\nconst unblockUser = async (id) => await httpClient.patch(`/api/v1/admin/users/${id}/unblock`)\n\nconst UserService = {\n  loginUser,\n  getCurrentUser,\n  logOutUser,\n  getAllUsers,\n  approveUser,\n  rejectUser,\n  blockUser,\n  unblockUser\n};\n\nexport default UserService;\n","import { Box } from \"adminlte-2-react\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport * as yup from \"yup\";\r\n\r\nconst loginSchema = yup.object().shape({\r\n  username: yup.string().required(),\r\n  password: yup.string().required(),\r\n});\r\n\r\nconst LoginForm = ({ triggerLogin = async () => { }, history, ...rest }) => {\r\n  const _history = useHistory()\r\n  const [formErrors, setFormErrors] = useState({})\r\n  return (\r\n    <div className=\"login-box\" style={{ border: 'solid 1px #eee', paddingTop: 50 }}>\r\n      <div className=\"login-logo\">\r\n        <a href=\"/\">\r\n          <b>TMCS</b>\r\n          login\r\n        </a>\r\n      </div>\r\n      <div className=\"login-box-body\">\r\n        <Box type=\"primary\" title=\"Login to continue\">\r\n\r\n          <Formik\r\n            initialValues={{\r\n              username: \"\",\r\n              password: \"\",\r\n            }}\r\n            onSubmit={async (values) => {\r\n              const data = await triggerLogin(values, history || _history)\r\n              if (data?.errors){\r\n                setFormErrors(data.errors);\r\n              }\r\n            }}\r\n            validationSchema={loginSchema}\r\n            initialErrors={formErrors}\r\n          >\r\n            {({ errors, touched }) => (\r\n              <Form>\r\n\r\n                <div className=\"card-body\">\r\n                  <div className=\"mb-2\">\r\n                    <label htmlFor=\"email\" className=\"form-label\">\r\n                      username\r\n                    </label>\r\n                    <Field\r\n                      type=\"text\"\r\n                      autoComplete=\"off\"\r\n                      className={\r\n                        errors.username && touched.username\r\n                          ? \"form-control shadow-none is-invalid\"\r\n                          : \"form-control shadow-none\"\r\n                      }\r\n                      placholder=\"Enter username\"\r\n                      name=\"username\"\r\n                      id=\"username\"\r\n                    />\r\n                    {errors.username && touched.username && (\r\n                      <div className=\"invalid-feedback\">{errors.username}</div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"mb-2\">\r\n                    <label htmlFor=\"password\" className=\"form-label\">\r\n                      Password\r\n                    </label>\r\n                    <Field\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      autoComplete=\"off\"\r\n                      className={\r\n                        errors.password && touched.password\r\n                          ? \"form-control shadow-none is-invalid\"\r\n                          : \"form-control shadow-none\"\r\n                      }\r\n                      placholder=\"Enter password\"\r\n                      id=\"password\"\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                      <div className=\"invalid-feedback\">{errors.password}</div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <hr />\r\n                <div className=\"card-footer text-center\">\r\n                  <div className=\"d-flex flex-row-reverse\">\r\n                    <button type=\"submit\" className=\"btn btn-block rounded-0  btn-primary\">\r\n                      Submit\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Box>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default LoginForm;\r\n","import { userKEY } from \"src/slices/currentUserSlice\"\nimport LocalStorageHelper from \"./localStorageHelper\"\n\nexport const pushQueryParams = (history, params = {}, append = true, replace = false) => {\n    const queryParams = parseQueryParams(history)\n    params = append ? { ...queryParams, ...params } : params\n    const finalParams = {}\n    Object.keys(params).forEach(p => {\n        if (typeof params[p] !== 'undefined' && params[p] !== 'undefined' && params[p] !== 'null' && params[p] !== null) {\n            finalParams[p] = params[p]\n        }\n    })\n    replace ? history.replace({\n        pathname: history.location.pathname,\n        search: (new URLSearchParams(finalParams)).toString()\n    }) : history.push({\n        pathname: history.location.pathname,\n        search: (new URLSearchParams(finalParams)).toString()\n    })\n}\n\nexport const parseQueryParams = (history, key = null, defaultVal = null) => {\n    const params = {}\n    const p = new URLSearchParams(history.location.search)\n    p.forEach((v, k) => {\n        params[k] = v\n    })\n    if (key != null) {\n        return params[key] || defaultVal\n    }\n    return params\n}\n\nexport const getCurrentStateParam = (history, param = 'id') => {\n    const state = (history.location.state || {})\n    if (state && state[param]) {\n        return state[param]\n    }\n    return null\n}\n\nexport const isCurrentRoute = (history, matchingRouteName) => {\n    console.log(history, matchingRouteName)\n    return false\n}\n\nexport const navigateToPath = (history, path, state = {}, clearPrevious = false) => {\n\n    let pathname = path\n\n    Object.keys(state).forEach(key => {\n        pathname = pathname.replace(`:${key}`, state[key])\n    })\n\n    if (clearPrevious) {\n        history.replace({\n            pathname,\n            state\n        })\n    } else {\n        history.push({\n            pathname,\n            state\n        })\n    }\n}\n\nexport const navigateToHome = (history) => {\n    const params = parseQueryParams(history)\n    const path = (params['redirect'] || '/').replace(`${window.location.protocol}://${window.location.host}`, '')\n    navigateToPath(history, path.substring())\n}\n\nexport const navigateToSubPath = (history, subPath, clearPrevious = false) => {\n    const pathname = history.location.pathname + subPath\n    navigateToPath(history, pathname, clearPrevious)\n}\n\n\nexport const navigateToLogin = (route = '/login') => {\n    LocalStorageHelper.delete(userKEY)\n    window.location = route\n}\n","export const LOCATION_LIST_PAGE = '/admin/locations'\nexport const RANK_LIST_PAGE = '/admin/ranks'\nexport const BRANCH_LIST_PAGE = '/admin/branches'\nexport const LOGOUT_ROUTE = '/logout'\nexport const REGISTRATION_LIST_PAGE = '/admin/registrations'\nexport const NMS_LIST_PAGE = '/admin/nms-devices'\nexport const USER_LIST_PAGE = '/admin/users'\nexport const DASHBOARD_ROUTE = \"/\";\nexport const DEVICE_MAMAGEMENT_ROUTE = \"/admin/manage-devices\";\nexport const ONLINE_USERS_ROUTE = \"/admin/online-users\";\nexport const SUPER_USER_LIST_PAGE = \"/admin/super-users\";\nexport const BACKUPS_LIST = \"/admin/db-backups\";\nexport const REPORTS_LIST_PAGE = \"/admin/reports\";\nexport const SETTINGS_PAGE = \"/admin/settings\";\n\nexport const NAV_ITEMS = [\n  {\n    icon: \"fa-tachometer-alt\",\n    title: \"Dashboard\",\n    path: DASHBOARD_ROUTE\n  },\n  {\n    icon: \"fa-globe\",\n    title: \"Manage Locations\",\n\n    path: LOCATION_LIST_PAGE,\n  },\n  {\n    icon: \"fa-sort-numeric-up\",\n    title: \"Manage Ranks\",\n    path: RANK_LIST_PAGE\n  },\n  {\n    icon: \"fa-building\",\n    title: \"Manage Branches\",\n    path: BRANCH_LIST_PAGE\n  },\n  {\n    icon: \"fa-tasks\",\n    title: \"Registration Requests\",\n    path: REGISTRATION_LIST_PAGE,\n  },\n  {\n    icon: \"fa-user\",\n    title: \"Manage Users\",\n    path: USER_LIST_PAGE,\n  },\n  {\n    icon: \"fa-users\",\n    title: \"Current Users\",\n    color: \"green\",\n\n    path: ONLINE_USERS_ROUTE,\n  },\n\n  {\n    icon: \"fa-laptop\",\n    title: \"NMS\",\n    path: NMS_LIST_PAGE,\n  },\n  {\n    icon: \"fa-download\",\n    title: \"Database Backups\",\n\n    path: BACKUPS_LIST,\n  },\n  {\n    icon: \"fa-tools\",\n    title: \"Device Management\",\n\n    path: DEVICE_MAMAGEMENT_ROUTE,\n  },\n  {\n    icon: \"fa-shield-virus\",\n    title: \"Antivirus\",\n\n    path: '#antivirus',\n  },\n  {\n    icon: \"fa-users\",\n    title: \"CTMS - User Accounts\",\n\n    path: SUPER_USER_LIST_PAGE,\n  },\n  {\n    icon: \"fa-chart-line\",\n    title: \"Reports\",\n    path: REPORTS_LIST_PAGE,\n  },\n  {\n    icon: \"fa-cog\",\n    title: \"Configuration\",\n    path: SETTINGS_PAGE\n  },\n  {\n    icon: \"fa-phone-alt\",\n    title: \"Contact us\",\n\n    path: '#contact us',\n  }\n];\n\nexport const USER_STATUSES = {\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  PENDING: 'PENDING',\n  DISABLED: 'DISABLED',\n  ACTIVE: 'ACTIVE'\n}\n\nexport const USER_ROLES = {\n  SUPERADMIN: 'SUPERADMIN',\n  ADMIN: 'ADMIN',\n  USER: 'USER',\n}","import { Button } from \"adminlte-2-react\";\nimport React from \"react\";\n\nconst Dialog = ({\n  children = \"\",\n  title = \"Dialog\",\n  exists = true,\n  show = true,\n  showHeader = true,\n  acceptText = null,\n  cancelText = null,\n  canDismiss = true,\n  size = \"xl\",\n  bodyPadding = 2,\n  zIndex = 1050,\n  cancelDisabled = false,\n  successDisabled = false,\n  onSuccess = () => { },\n  onCancel = () => { },\n  onDismiss = () => { },\n}) => {\n  return (\n    exists && (\n      <div\n        className={show ? 'modal fade in': 'modal fade'}\n        tabIndex=\"-1\"\n        aria-hidden={show}\n        style={{ display: show ? \"block\" : \"none\", zIndex, overflow: 'auto' }}\n      >\n        <div className={`modal-dialog modal-${size}`}>\n          <div className=\"modal-content\">\n            {showHeader && (\n              <div className=\"modal-header\">\n                <h4 className=\"modal-title\">{title}\n                  {canDismiss && (\n                    <Button\n                      type=\"button\"\n                      className=\"close\"\n                      aria-label=\"Close\"\n                      onClick={onDismiss}\n                      icon=\"fa-times\"\n                    />\n                  )}\n                </h4>\n              </div>\n            )}\n            <div className={`modal-body p-${bodyPadding}`}>\n              {children}\n            </div>\n            {(cancelText || acceptText) && (\n              <div className=\"modal-footer\">\n                {cancelText && (\n                  <button\n                    disabled={cancelDisabled}\n                    className=\"btn rounded-0  btn-default\"\n                    onClick={onCancel}\n                  >\n                    {cancelText}\n                  </button>\n                )}\n                {acceptText && (\n                  <button\n                    disabled={successDisabled}\n                    className=\"btn rounded-0  btn-primary\"\n                    onClick={onSuccess}\n                  >\n                    {acceptText}\n                  </button>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default Dialog;\n","import React from \"react\";\nconst PhotoThumb = ({\n  url = null,\n  width = 120,\n  height = 120,\n  border = 1,\n  borderColor = \"grey\",\n  onClick = () => {}\n}) => {\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        width,\n        height,\n        backgroundImage: `url(${url})`,\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"contain\",\n        backgroundPosition: 'center',\n        border: `solid ${border || 1}px ${borderColor}`,\n        cursor: \"pointer\",\n      }}\n      className=\"img-thumbnail m-2\"\n    />\n  );\n};\n\nexport default PhotoThumb;\n","import { Field, Form, Formik } from \"formik\";\nimport React, { forwardRef } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport DatePicker from \"react-datepicker\";\nimport PhotoThumb from \"./PhotoThumb\";\nimport { format } from \"date-fns\";\nimport { Button, Col, Row } from \"adminlte-2-react\";\n\nconst CustomDateInput = forwardRef(({ onClick, originalValue }, ref) => {\n  return (\n    <div\n      style={{ cursor: \"pointer\" }}\n      className=\"input-group mb-3\"\n      onClick={onClick}\n    >\n      <div className=\"ps-2 pe-2 form-control\">\n        {originalValue || \"YYYY-MM-DD\"}\n      </div>\n      <span className=\"input-group-text\" id=\"basic-addon1\">\n        <i className=\"bi bi-calendar\" />\n      </span>\n    </div>\n  );\n});\nconst FieldWrap = ({\n  field = {},\n  errors = {},\n  touched = {},\n  children = null,\n  formErrors = {}\n}) => {\n  const shouldShowError =\n    (errors[field.name] && touched[field.name]) ||\n    (errors[field.name] && field.type === \"richtext\") || formErrors[field.name];\n  return (\n    <Col key={field.id} className={`mb-2 col-lg-${field.cols} col-sm-12 col-md-6`}>\n      <div className={`form-group ${shouldShowError ? 'has-error' : ''}`}>\n        <label htmlFor={field.id} className=\"form-label\">\n          {field.label}\n        </label>\n        <div>\n          {children}\n          {shouldShowError && (\n            <span className=\"text-red\"><p>{errors[field.name] || formErrors[field.name]}</p></span>\n          )}\n        </div>\n      </div>\n    </Col>\n  );\n};\n\nconst objectAsArray = (object) => {\n  if (Array.isArray(object)) {\n    return object;\n  } else {\n    const data = [];\n    Object.keys(key => {\n      data.push({ key, value: object[key] })\n    })\n    return data;\n  }\n}\n\nconst EntityForm = ({\n  id = \"\",\n  action = \"\",\n  method = \"POST\",\n  disabled = false,\n  initialValues = {},\n  validationSchema = null,\n  fields = [],\n  onSubmit = async (values, props) => { },\n  editMode = false,\n  entitySingle = 'record',\n  submitTitle = null,\n  formErrors = {}\n}) => {\n\n  if (!initialValues || fields.length < 1) {\n    return <></>;\n  }\n  return (\n    <Row>\n      <Col md={12}>\n          <Formik\n            initialValues={initialValues}\n            enableReinitialize\n            onSubmit={(values, formConfig) => {\n              const modifiedValues = {}\n              Object.keys(initialValues).forEach(key => {\n                if ((values[key] !== initialValues[key] && values[key] !== undefined) || `${key}` === \"id\"){\n                  modifiedValues[key] = values[key]\n                }\n              });\n              onSubmit(modifiedValues, formConfig)\n            }}\n            validationSchema={validationSchema}\n          >\n            {({ errors, touched, values, setFieldValue }) => (\n              <Form\n                action={action}\n                id={id || Date.now()}\n                method={method}\n                disabled={disabled}\n              >\n                <Row>\n                  {fields.map((field) => {\n                    switch (field.type) {\n                      case \"fieldset\":\n                        return (\n                          <h3 className=\"display-6 fs-6 pt-2 pb-2 fw-bold bg-secondary text-white\">{field?.title}</h3>\n                        );\n                      case \"select\":\n                        const options = objectAsArray(field?.options || [])\n                        return (\n                          <FieldWrap\n                            key={`field-${field.id}-${entitySingle}`}\n                            {...{ field, errors, touched }}\n                            formErrors={formErrors}\n                          >\n                            <Field\n                              as=\"select\"\n                              className={\n                                errors[field.name] && touched[field.name]\n                                  ? \"form-select rounded-0 is-invalid shadow-none form-control\"\n                                  : \"form-select form-control\"\n                              }\n                              placeholder={field.placeholder || field.label}\n                              name={field.name}\n                              id={field.id}\n                            >\n                              <option>{field.placeholder || field.label}</option>\n                              {options.map((option) => (\n                                <option\n                                  key={`${option.key}-${entitySingle}`}\n                                  value={option.key}\n                                >\n                                  {option.value}\n                                </option>\n                              ))}\n                            </Field>\n                          </FieldWrap>\n                        );\n                      case \"textarea\":\n                        return (\n                          <FieldWrap\n                            key={`field-${field.id}`}\n                            {...{ field, errors, touched }}\n                            formErrors={formErrors}\n                          >\n                            <Field\n                              as=\"textarea\"\n                              className={\n                                errors[field.name] && touched[field.name]\n                                  ? \"form-control shadow-none is-invalid\"\n                                  : \"form-control shadow-none\"\n                              }\n                              placeholder={field.placeholder || field.label}\n                              name={field.name}\n                              id={field.id}\n                            />\n                          </FieldWrap>\n                        );\n                      case \"checkbox_group\":\n                        const setCheckBoxGroupFieldValue = (e) => {\n                          const existingValues = new Set(values[field.name].length > 0 ? values[field.name] : [])\n                          if (e.target.checked) {\n                            existingValues.add(parseInt(e.target.value))\n                          } else {\n                            existingValues.delete(parseInt(e.target.value))\n                          }\n                          setFieldValue(field.name, Array.from(existingValues))\n                        }\n                        return (\n                          <FieldWrap\n                            key={`field-${field.id}`}\n                            {...{ field, errors, touched }}\n                            formErrors={formErrors}\n                          >\n                            <div className=\"p-3 ps-3\" style={{ height: `${field.height || 150}px`, backgroundColor: '', border: 'solid 1px #eee', overflow: 'auto' }}>\n                              {field.options.map(option => {\n                                return (\n                                  <div key={option.key} className=\"form-check\">\n                                    <input\n                                      type=\"checkbox\"\n                                      className={\n                                        errors[field.name] && touched[field.name]\n                                          ? \"form-check-input shadow-none is-invalid\"\n                                          : \"form-check-input shadow-none\"\n                                      }\n                                      name={`${field.name}`}\n                                      checked={values[field.name].includes(option.key)}\n                                      id={`${field.id}-${option.key}`}\n                                      value={option.key}\n                                      onChange={setCheckBoxGroupFieldValue}\n                                    />\n                                    <label className=\"form-check-label\" htmlFor={`${field.id}-${option.key}`}>{option.value}</label>\n                                  </div>\n                                )\n                              })}\n                            </div>\n                          </FieldWrap>\n                        );\n                      case \"richtext\":\n                        return (\n                          <FieldWrap\n                            key={`field-${field.id}`}\n                            {...{ field, errors, touched }}\n                            formErrors={formErrors}\n                          >\n                            <ReactQuill\n                              theme=\"snow\"\n                              value={values[field.name]}\n                              onChange={(value) => setFieldValue(field.name, value)}\n                            />\n                          </FieldWrap>\n                        );\n                      case \"date\":\n                        return (\n                          <FieldWrap\n                            key={`field-${field.id}`}\n                            {...{ field, errors, touched }}\n                            formErrors={formErrors}\n                          >\n                            <DatePicker\n                              name={field.name}\n                              className=\"d-flex\"\n                              onChange={(date) =>\n                                setFieldValue(\n                                  field.name,\n                                  format(date, \"yyyy-MM-dd\")\n                                )\n                              }\n                              customInput={\n                                <CustomDateInput\n                                  originalValue={values[field.name]}\n                                />\n                              }\n                            />\n                          </FieldWrap>\n                        );\n                      case \"upload\":\n                        if (!Array.isArray(values[field.name])){\n                          values[field.name] = [{\n                            id: 0,\n                            url: values[field.name] || '/default_logo.png'\n                          }]\n                        }\n                        return (\n                          <FieldWrap\n                            key={`field-${field.id}`}\n                            {...{ field, errors, touched }}\n                            formErrors={formErrors}\n                          >\n                            <input onChange={(e) => {\n                              console.log(e);\n                            }} id=\"fileinputRef\" type=\"file\" name={\"file\"} style={{opacity: 0, position:\"absolute\", left: -9999, top: -100}} />\n                            <div className=\"d-flex flex-wrap align-items-center justify-content-start\">\n                              {values[field.name].length === 0 && (\n                                <PhotoThumb\n                                  key={\"no-selection\"}\n                                  url={''}\n                                />\n                              )}\n\n                              {values[field.name].map((file) => (\n                                <PhotoThumb\n                                  key={file.id}\n                                  url={file?.url || ''}\n                                />\n                              ))}\n                              <Button\n                                onClick={() =>{\n                                  document.getElementById('fileinputRef').click();\n                                }}\n                                icon=\"fa-edit\"\n                              />\n                            </div>\n                          </FieldWrap>\n                        );\n                      case \"hidden\":\n                        return (\n                          <Field\n                            key={`field-${field.id}`}\n                            autoComplete=\"off\"\n                            name={field.name}\n                            type={\"hidden\"}\n                            id={field.id}\n                          />\n                        );\n                      default:\n                        return (\n                          <FieldWrap\n                            key={`field-${field.id}`}\n                            {...{ field, errors, touched }}\n                            formErrors={formErrors}\n                          >\n                            <Field\n                              autoComplete=\"off\"\n                              className={\n                                errors[field.name] && touched[field.name]\n                                  ? \"form-control rounded-0 shadow-none is-invalid\"\n                                  : \"form-control rounded-0 shadow-none\"\n                              }\n                              placeholder={field.placeholder || field.label}\n                              name={field.name}\n                              type={field.type}\n                              id={field.id}\n                            />\n                          </FieldWrap>\n                        );\n                    }\n                  })}\n                </Row>\n                <hr />\n                <div className=\"d-flex flex-row-reverse text-right\">\n                  <button\n                    disabled={disabled}\n                    onClick={() => window.scrollTo(0, 0)}\n                    type=\"success\"\n                    className=\"btn rounded-0  btn-primary\"\n                  >\n                    {submitTitle && <span>{submitTitle}</span>}\n                    {!submitTitle && (\n                      <span>\n                        {editMode ? \"Update\" : \"Create\"} {entitySingle}\n                      </span>\n                    )}\n                  </button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n ̰      </Col>\n    </Row>\n  );\n};\n\nexport default EntityForm;\n","import { Col, Row, Button, ButtonGroup } from \"adminlte-2-react\";\nimport * as yup from \"yup\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport overlayFactory from 'react-bootstrap-table2-overlay';\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\nimport LoadingOverlay from \"react-loading-overlay\"\nimport Dialog from \"./Dialog\";\nimport EntityForm from \"./EntityForm\";\nimport { showGlobalModalNotification } from \"src/utils/storeHelper\";\nimport httpClient from \"src/utils/httpClient\";\nLoadingOverlay.propTypes = undefined\n\nconst MODE_EDIT = 'edit';\nconst MODE_ADD = 'add';\n\nconst DataGridComponent = ({\n    modalSize = 'xl',\n    keyField = \"id\",\n    entitySingle = 'record',\n    entityPlural = 'records',\n    columns = [],\n    hideIdOnEdit = false,\n    data = {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        limit: 100,\n        totalPages: 1,\n    },\n    remote = {\n        sort: true,\n        filter: true,\n        pagination: true,\n    },\n    defaultSorted = [\n        { dataField: 'id', order: 'asc' }\n    ],\n    showTotal = true,\n    beforeSave = (values) => { return values },\n    onTableChange = async (params) => { },\n    onDataUpdated = async (tableData) => { },\n    onDelete = (id) => { },\n    canAdd = true,\n    canDelete = true,\n    canEdit = true,\n    rowActionButtons = [],\n    globalActionButtons = [],\n    formOptions = {\n        fields: [],\n        validationSchema: null,\n        onSuccess: async (data) => { },\n    },\n    resource = null,\n    onFormShow = (row, mode) => {\n\n    },\n    actionColumnWidth = 200,\n    ...rest\n}) => {\n    const [formErrors, setFormErrors] = useState({})\n    const [record, setCurrentRecord] = useState(null)\n    const [showFormDialog, setShowFormDialog] = useState(false)\n    const [selectedIds, setSelectedIds] = useState([])\n    const [loading, setLoading] = useState(false)\n    const [records, setRecords] = useState(data)\n    const fetchTableData = useCallback(async () => {\n        setFormErrors({})\n        if (resource) {\n            const params = parseQueryParams(rest.history)\n            const result = await httpClient.get(`${resource}`, { params })\n            if (result?.success) {\n                setRecords({\n                    results: result.data?.results || [],\n                    currentPage: result.data?.currentPage || 1,\n                    totalResults: result.data.totalResults || 0,\n                    limit: result.data?.limit || 100,\n                    totalPages: result.data?.totalPages || 1\n                })\n            } else {\n                setRecords({ ...data, results: [], totalResults: 0, limit: 100 })\n            }\n        }\n    }, [resource, data, rest.history])\n\n    const columnsWithActions = useMemo(() => {\n        const clms = columns.filter(clm => clm.dataField !== '_actions')\n        if (!(canEdit || canDelete || rowActionButtons.length > 0)) {\n            return clms;\n        }\n        clms.push({\n            dataField: '_actions',\n            isDummyField: true,\n            style: {\n                width: actionColumnWidth || 200,\n            },\n            text: 'Actions',\n            formatter: (cellContent, row) => {\n                return (\n                    <ButtonGroup>\n                        {rowActionButtons.map(actionButton => {\n                            actionButton.canShow = actionButton.canShow ? actionButton.canShow : () => true\n                            if (actionButton.canShow && actionButton.canShow(row)) {\n                                return <Button key={`action-${row.id}-${actionButton.text}`} className=\"mr-2\"\n                                    type={actionButton?.type || 'primary'}\n                                    icon={actionButton?.icon || 'gear'}\n                                    text={actionButton.text}\n                                    onClick={async () => {\n                                        await actionButton.onClick(row.id, row)\n                                        fetchTableData()\n                                    }}\n                                />\n                            }\n\n                        })}\n                        {canEdit && <Button className=\"mr-2\" type=\"primary\" text=\"Edit\" icon=\"fa-edit\" onClick={() => {\n                            pushQueryParams(rest.history, { id: row.id, mode: MODE_EDIT }, true)\n                            setCurrentRecord(row);\n                            setShowFormDialog(true)\n                            setFormErrors({})\n                        }} />}\n                        {canDelete && <Button className=\"mr-2\" type=\"danger\" onClick={async () => {\n                            if (resource) {\n                                const data = await httpClient.delete(`${resource}/${row.id}`)\n                                if (data?.success) {\n                                    showGlobalModalNotification({\n                                        success: true,\n                                        message: `${entitySingle} successfully deleted.`\n                                    })\n                                } else {\n                                    setFormErrors(data?.errors ?? {})\n                                }\n                            } else {\n                                await onDelete(row.id);\n                            }\n                            fetchTableData()\n                        }} text=\"Delete\" icon=\"fa-trash\" />\n                        }\n\n                    </ButtonGroup>\n                )\n            },\n        })\n        return clms\n    }, [columns, canDelete, canAdd, onDelete, rowActionButtons, rest.history])\n\n    const validationSchemaDynamic = useMemo(() => {\n        return formOptions.validationSchema || yup.object().shape({})\n    }, [formOptions.validationSchema]);\n\n    const fieldsDyanmic = useMemo(() => {\n        return formOptions.fields;\n    }, [formOptions.fields]);\n\n    const initialValues = useMemo(() => {\n        const values = {}\n        fieldsDyanmic.forEach(field => {\n            values[field.recordKey || field.name] = record ? (record[field.recordKey] || record[field.name] || field.default) || '' : (field.default || '')\n        })\n        values['id'] = record ? record.id : null\n        return values;\n    }, [record, fieldsDyanmic]);\n\n    const triggerSetCurrentRecord = () => {\n        const params = parseQueryParams(rest.history)\n        const mode = params['mode'] || ''\n        const id = params['id'] || null\n        const isAddEdit = mode === MODE_ADD || mode === MODE_EDIT\n        const currentRecord = (records.results || []).find(r => `${r.id}` === id)\n        setCurrentRecord(currentRecord)\n        setShowFormDialog(isAddEdit)\n    }\n\n    useEffect(() => {\n        fetchTableData();\n        triggerSetCurrentRecord();\n        const unlisten = rest.history.listen((...args) => {\n            if (args[1] === 'POP') {\n                fetchTableData()\n            }\n        })\n        return unlisten\n    }, [])\n\n    useEffect(() => {\n        triggerSetCurrentRecord();\n        onDataUpdated(records);\n    }, [showFormDialog, records])\n\n    useEffect(() => {\n        onFormShow(record, parseQueryParams(rest.history, 'mode'))\n    }, [record, rest.history])\n\n    return (\n        <React.Fragment>\n            {(canAdd || canEdit) && <Dialog size={modalSize} show={showFormDialog}\n                showHeader={true}\n                title={`${record ? `Editing ${entitySingle} ${!hideIdOnEdit ? `#${record.id}` : ''}` : `Adding ${entitySingle}`}`}\n                onDismiss={() => {\n                    setShowFormDialog(false)\n                    pushQueryParams(rest.history, { mode: null, id: null }, true, true)\n                }}>\n                <EntityForm\n                    entityPlural={entityPlural}\n                    entitySingle={entitySingle}\n                    formErrors={formErrors}\n                    fields={fieldsDyanmic}\n                    initialValues={initialValues}\n                    editMode={record ? true : false}\n                    onSubmit={async (values, { resetForm }) => {\n                        window.scrollTo(0, 0);\n                        values = beforeSave(values)\n                        let data\n                        if (resource) {\n                            data = values?.id ? await httpClient.put(`${resource}/${values.id}`, values) : await httpClient.post(resource, values)\n                        } else {\n                            data = await formOptions.onSuccess(values)\n                        }\n\n                        if (data?.success) {\n                            resetForm();\n                            setCurrentRecord(null);\n                            setShowFormDialog(false);\n                            pushQueryParams(rest.history, { mode: null, id: null }, true, true)\n                            onTableChange(parseQueryParams(rest.history))\n                            fetchTableData();\n                            showGlobalModalNotification({\n                                success: true,\n                                message: `${entitySingle} successfully ${values?.id ? 'updated' : 'created'}`\n                            })\n                        } else {\n                            setFormErrors(data?.errors ?? {})\n                        }\n\n                    }}\n                />\n            </Dialog>\n            }\n            <ToolkitProvider\n                keyField={keyField}\n                data={records.results || []}\n                columns={columnsWithActions}\n            >\n                {\n                    props => (\n                        <div>\n                            <Row className=\"text-right\">\n                                <Col md={12}>\n                                    <Button onClick={async () => {\n                                        setLoading(true)\n                                        fetchTableData()\n                                        await onTableChange(parseQueryParams(rest.history))\n                                        setLoading(false)\n                                    }} className=\"mr-2\" type=\"primary\" disabled={loading} text={loading ? \"Loading...\" : \"Refresh\"} icon=\"fa-redo\" />\n                                    {canAdd &&\n                                        <Button className=\"mr-2\" onClick={() => {\n                                            pushQueryParams(rest.history, { mode: MODE_ADD, id: undefined }, true)\n                                            setShowFormDialog(true)\n                                            setCurrentRecord(null);\n                                        }} type=\"success\" text={`Add ${entitySingle}`} icon=\"fa-plus-circle\" />\n                                    }\n                                    {globalActionButtons.map(actionButton => {\n                                        return <Button className=\"mr-2\"\n                                            type={actionButton.type}\n                                            icon={actionButton.icon}\n                                            text={actionButton.text}\n                                            onClick={async () => {\n                                                await actionButton.onClick(selectedIds)\n                                                fetchTableData();\n                                            }}\n                                        />\n                                    })}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <hr />\n                                </Col>\n                            </Row>\n                            <BootstrapTable\n                                {...props.baseProps}\n                                remote={remote}\n                                defaultSorted={defaultSorted}\n                                \n                                pagination={records.totalPages > 1 ? paginationFactory({\n                                    page: records.currentPage || 1,\n                                    sizePerPage: records.limit || 100,\n                                    totalSize: records.totalResults || records.results.length || 0,\n                                    sizePerPageList: [100, 200, 500],\n                                    paginationSize: records.totalResults || records.results.length || 0,\n                                    showTotal,\n                                }): null}\n                                loading={loading}\n                                filter={filterFactory()}\n                                onTableChange={async (type, _data) => {\n                                    const params = {\n                                        sortOrder: _data['sortOrder'],\n                                        sortBy: _data['sortField'],\n                                        page: _data['page'],\n                                        limit: _data['sizePerPage'],\n                                    }\n                                    pushQueryParams(rest.history, params)\n                                    fetchTableData();\n                                    setLoading(true)\n                                    await onTableChange(params)\n                                    setLoading(false)\n                                }}\n                                striped={true}\n                                selectRow={(globalActionButtons.length || canEdit || canDelete) ? {\n                                    mode: 'checkbox',\n                                    bgColor: '#eee',\n                                    selectColumnStyle: () => {\n                                        return {\n                                            width: 20\n                                        }\n                                    },\n                                    onSelectAll: (isSelected) => {\n                                        const selections = []\n                                        if (isSelected) {\n                                            (data.results || []).forEach(r => {\n                                                selections.push(selections)\n                                            })\n                                        }\n                                        setSelectedIds(selections)\n                                    },\n                                    onSelect: (row, isSelected) => {\n                                        const selections = selectedIds.filter(id => row.id !== id)\n                                        if (isSelected) {\n                                            selections.push(row.id)\n                                        }\n                                        setSelectedIds(selections)\n                                    }\n                                } : {\n                                    mode:'ROW_SELECT_DISABLED',\n                                    hideSelectColumn: true\n                                }}\n                                overlay={overlayFactory({\n                                    spinner: true,\n                                    styles: {\n                                        overlay: (base) => ({ ...base, background: 'rgba(0, 0, 0, 0.5)', position: 'absolute' })\n                                    }\n                                })}\n                                noDataIndication={() => <h5 className=\"text-center\">Sorry no {entityPlural} currently availble</h5>} />\n                        </div>\n                    )\n                }\n            </ToolkitProvider>\n        </React.Fragment>\n\n    )\n}\n\nexport default DataGridComponent;","import * as yup from \"yup\";\nimport { BranchActions } from \"src/slices/BranchSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\n\nconst BranchListView = ({\n  title = 'Branches',\n  description = 'here you can manage branches',\n  ...rest\n}) => {\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Branch\"}>\n      <Box type=\"primary\" title=\"Displaying branches\" icon=\"fa-building\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Branches\"\n              entitySingle=\"Branch\"\n              resource={`/api/v1/admin/branches`}\n              onDataUpdated={async (tableData) => {\n                BranchActions.setBranches(tableData)\n              }}\n              defaultSorted={\n                [{ dataField: 'id', order: 'asc' }]\n              }\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Branch ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'description',\n                  text: 'Description',\n                  sort: true,\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    {\n                      id: \"description\",\n                      name: \"description\",\n                      label: \"Branch Description\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    description: yup.string(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default BranchListView;\n","import * as yup from \"yup\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { LocationActions } from \"src/slices/LocationSlice\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { parseQueryParams, pushQueryParams } from \"src/utils/routerHelper\";\n\nconst LocationListView = ({\n  ...rest\n}) => {\n\n  const joinChar = ' » ';\n\n  const [level, setLevel] = useState(0)\n  const [segments, setSegments] = useState([])\n\n  const rowActionButtons = useMemo(() => {\n    if (level > 1) {\n      return []\n    }\n    return [{\n      icon: 'fa-link',\n      type: 'primary',\n      text: 'Sublocations',\n      onClick: (id, row) => {\n        const _level = level + 1\n        const _segments = [...segments, row.title]\n        setSegments(_segments)\n        setLevel(_level)\n        pushQueryParams(rest.history, { level: _level, locationId: id, segments: _segments.join(',') })\n      }\n    }]\n  }, [level, segments, rest.history])\n\n  useEffect(() => {\n    const _handler = () => {\n      const params = parseQueryParams(rest.history)\n      const segments = (params['segments'] || '').split(',').filter(segment => !!segment)\n      setLevel(parseInt(params['level'] || 0))\n      setSegments(segments)\n    }\n    _handler();\n    const unlisten = rest.history.listen(_handler)\n    return unlisten\n  }, [rest.history])\n\n  return (\n    <Content title={['Manage Locations'].concat(segments).join(joinChar)} subTitle={['here you can manage locations'].concat(segments).join(joinChar)} browserTitle={segments.join(joinChar)}>\n      <Box type=\"primary\" title={['Displaying locations'].concat(segments).join(joinChar)} icon=\"fa-globe\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              actionColumnWidth={320}\n              entityPlural={['Locations'].concat(segments).join(joinChar)}\n              entitySingle={['Location'].concat(segments).join(joinChar)}\n              resource={`/api/v1/admin/locations`}\n              onDataUpdated={async (tableData) => LocationActions.setLocations(tableData)}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Location ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'email',\n                  text: 'Email',\n                  sort: true,\n                }\n              ]}\n              rowActionButtons={rowActionButtons}\n              beforeSave={(values) => {\n                const params = parseQueryParams(rest.history)\n                values['locationId'] = params['locationId'] || null\n                return values\n              }}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    \n                    {\n                      id: \"email\",\n                      name: \"email\",\n                      label: \"Location Email\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    email: yup.string().email(),\n                    description: yup.string(),\n                  })\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default LocationListView;\n","import * as yup from \"yup\";\n\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { RankActions } from \"src/slices/RankSlice\";\n\nconst RankListView = ({\n  title = 'Ranks',\n  description = 'here you can manage ranks',\n  ...rest\n}) => {\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Rank\"}>\n      <Box type=\"primary\" title=\"Displaying ranks\" icon=\"fa-sort-numeric-up\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Ranks\"\n              entitySingle=\"Rank\"\n              defaultSorted={\n                [{ dataField: 'id', order: 'asc' }]\n              }\n              resource={`/api/v1/admin/ranks`}\n              onDataUpdated={async(tableData) => {\n                RankActions.setRanks(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Rank ID',\n                  hidden: true,\n                }, {\n                  dataField: 'title',\n                  text: 'Title',\n                  sort: true,\n                },\n                {\n                  dataField: 'description',\n                  text: 'Description',\n                  sort: true,\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"title\",\n                      name: \"title\",\n                      label: \"Title\",\n                      placeholder: \"Enter Title\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    {\n                      id: \"description\",\n                      name: \"description\",\n                      label: \"Rank Description\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    title: yup.string().required(),\n                    description: yup.string(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\nexport default RankListView;\n","import httpClient from \"src/utils/httpClient\";\n\nconst rejectRegistration = async (id) => await httpClient.delete(`/api/v1/admin/registrations/${id}`);\nconst approveRegistration = async (id) => await httpClient.post(`/api/v1/admin/registrations/${id}`);\n\nconst RegistrationService = {\n  rejectRegistration,\n  approveRegistration,\n};\n\nexport default RegistrationService;\n","import { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport RegistrationService from \"src/services/RegistrationService\";\n\nconst STATUSES = {\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  PENDING: 'PENDING'\n}\n\nconst RegistrationListView = ({\n  title = 'Registrations',\n  description = 'here you can manage registrations',\n  ...rest\n}) => {\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Registration\"}>\n      <Box type=\"primary\" title=\"Displaying registrations\" icon=\"fa-user\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              actionColumnWidth={300}\n              entitySingle=\"Registration\"\n              entityPlural=\"Registrations\"\n              resource={`/api/v1/admin/registrations`}\n              rowActionButtons={[\n                {\n                  text: 'Approve',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === STATUSES.PENDING\n                  },\n                  onClick: async (id) => {\n                    await RegistrationService.approveRegistration(id)\n                  }\n                },\n                {\n                  text: 'Reject',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === STATUSES.PENDING\n                  },\n                  onClick: async (id) => {\n                    await RegistrationService.rejectRegistration(id)\n                  }\n                }\n              ]}\n              canAdd={false}\n              canEdit={false}\n              canDelete={false}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Registration ID',\n                  hidden: true,\n                }, {\n                  dataField: 'userName',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'First Name',\n                  sort: true,\n\n                },\n                {\n                  dataField: 'middlename',\n                  text: 'Middle Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'lastName',\n                  text: 'Last Name',\n                  sort: true,\n                },\n\n                {\n                  dataField: 'ip',\n                  text: 'IP',\n                },\n                {\n                  dataField: 'port',\n                  text: 'Port',\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\n\nexport default RegistrationListView;\n","const { default: httpClient } = require(\"src/utils/httpClient\");\n\nconst getLocationList = async () => {\n    const data = await httpClient.get(\"/api/v1/locations\");\n    const locations = data?.success ? data.data : []\n    return locations\n}\n\nconst getBranchesList = async () => {\n    const data = await httpClient.get(\"/api/v1/branches\");\n    return data?.success ? data.data : []\n}\n\n\nconst getRanksList = async () => {\n    const data = await httpClient.get(\"/api/v1/ranks\");\n    return data?.success ? data.data : []\n}\n\n\nconst createDatabaseBackup = async () => await httpClient.post(`/api/v1/admin/db-backups`)\nconst getDashboardSummary = async () => await httpClient.get(`/api/v1/admin/dashboard`)\n\n\nconst CommonServerice = {\n    getLocationList,\n    getBranchesList,\n    getRanksList,\n    createDatabaseBackup,\n    getDashboardSummary\n\n}\nexport default CommonServerice\n","import * as yup from \"yup\";\n\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport CommonService from \"src/services/CommonService\";\nimport UserService from \"src/services/UserService\";\nimport { USER_STATUSES } from \"src/constants/global\";\n\nconst UserListView = ({\n  title = 'Users',\n  description = 'here you can manage users',\n  ...rest\n}) => {\n\n  const [locations, setLocations] = useState([])\n  const [branches, setBranches] = useState([])\n  const [ranks, setRanks] = useState([])\n  const [record, setRecord] = useState(null)\n  const [mode, setMode] = useState(null)\n  console.log(mode);\n\n  useEffect(() => {\n    (async () => {\n      setLocations(await CommonService.getLocationList())\n      setBranches(await CommonService.getBranchesList())\n      setRanks(await CommonService.getRanksList())\n    })();\n  }, [])\n\n  const fields = useMemo(() => {\n    const _fields = [\n      {\n        id: \"username\",\n        name: \"username\",\n        label: \"Username *\",\n        placeholder: \"Enter Username\",\n        type: \"text\",\n        cols: 6,\n      },\n      {\n        id: \"password\",\n        name: \"password\",\n        label: \"Password *\",\n        type: \"password\",\n        cols: 6,\n      },\n      {\n        id: \"firstName\",\n        name: \"firstName\",\n        label: \"First Name *\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"middleName\",\n        name: \"middleName\",\n        label: \"Middle Name\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"lastName\",\n        name: \"lastName\",\n        label: \"Last Name\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"locationId\",\n        name: \"locationId\",\n        label: \"Location *\",\n        type: \"select\",\n        options: locations.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"branchId\",\n        name: \"branchId\",\n        label: \"Branch *\",\n        type: \"select\",\n        options: branches.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"rankId\",\n        name: \"rankId\",\n        label: \"Rank *\",\n        type: \"select\",\n        options: ranks.map(l => {\n          return {\n            key: l.id,\n            value: l.title\n          }\n        }),\n        cols: 4,\n      },\n      {\n        id: \"ip\",\n        name: \"ip\",\n        label: \"IP\",\n        type: \"text\",\n        cols: 10,\n      },\n      {\n        id: \"port\",\n        name: \"port\",\n        label: \"Port\",\n        type: \"text\",\n        cols: 2,\n      },\n      {\n        id: \"addressLine1\",\n        name: \"addressLine1\",\n        label: \"Address Line 1\",\n        type: \"textarea\",\n        cols: 6,\n      },\n      {\n        id: \"addressLine2\",\n        name: \"addressLine2\",\n        label: \"Address Line 2\",\n        type: \"textarea\",\n        cols: 6,\n      },\n    ]\n    if (record && record?.id) {\n     // return _fields.filter(field => !['password', 'username'].includes(field.name))\n    }\n    return _fields\n  }, [locations, ranks, branches, record])\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Users\"}>\n      <Box type=\"primary\" title=\"Displaying users\" icon=\"fa-user\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              actionColumnWidth={300}\n              {...rest}\n              rowActionButtons={[\n                {\n                  text: 'Block',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.ACTIVE\n                  },\n                  onClick: async (id) => {\n                    await UserService.blockUser(id)\n                  }\n                },\n                {\n                  text: 'Unblock',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.DISABLED\n                  },\n                  onClick: async (id) => {\n                    await UserService.unblockUser(id)\n                  }\n                }\n              ]}\n              entitySingle=\"User\"\n              entityPlural=\"Users\"\n              resource={`/api/v1/admin/users`}\n              onFormShow={(row, mode) => {\n                setRecord(row)\n                setMode(mode)\n              }}\n              formOptions={\n                {\n                  fields,\n                  validationSchema: yup.object().shape({\n                    username: yup.string().required(),\n                    firstName: yup.string().required(),\n                    password: yup.string().required(),\n                    locationId: yup.string().required(),\n                    branchId: yup.string().required(),\n                    rankId: yup.string().required(),\n                  }),\n                }\n              }\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'User ID',\n                  hidden: true,\n                }, {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'branchId',\n                  text: 'Branch',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return branches.find(b => `${b.id}` === `${row.branchId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'rankId',\n                  text: 'Rank',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return ranks.find(r => `${r.id}` === `${row.rankId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'locationId',\n                  text: 'Location',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return locations.find(l => `${l.id}` === `${row.locationId}`)?.title || '-'\n                  }\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n                {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    return [row.ip, row.port].filter(x => !!x).join(\":\")\n                  }\n\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default UserListView;\n","import { Box, Col, Content, Infobox2, Row } from \"adminlte-2-react\";\nimport React, { useEffect, useState } from \"react\";\nimport CommonService from \"src/services/CommonService\";\n\n\nimport {\n  REGISTRATION_LIST_PAGE,\n  USER_LIST_PAGE,\n  NMS_LIST_PAGE,\n  DEVICE_MAMAGEMENT_ROUTE,\n  SUPER_USER_LIST_PAGE,\n  ONLINE_USERS_ROUTE} from \"src/constants/global\";\n\nconst DashboardView = ({\n  title = \"System Overview\",\n  description,\n  ...rest\n}) => {\n\n  const NAVIGATION_CARDS = {\n    totalUsers: { text: \"Total Users\", icon: \"fa-users\", to: USER_LIST_PAGE, color: 'orange' },\n    totalOnlineUsers: { text: \"Total Online Users\", icon: \"fa-users\", to: ONLINE_USERS_ROUTE, color: 'teal' },\n    totalSuperUsers: { text: \"Total Super Users\", icon: \"fa-users\", to: SUPER_USER_LIST_PAGE, color: 'purple' },\n    totalNmsDevices: { text: \"Total Nms Monitored Devices\", icon: \"fa-laptop\", to: NMS_LIST_PAGE, color: 'purple' },\n    totalDevices: { text: \"Total devices in directory\", icon: \"fa-laptop\", to: DEVICE_MAMAGEMENT_ROUTE, color: 'orange' },\n    totalPendingRequests: { text: \"Pending registration requests\", icon: \"fa-tasks\", to: REGISTRATION_LIST_PAGE, color: 'teal' }\n  }\n\n  const [summary, setSummary] = useState({\n    totalUsers: 0,\n    totalOnlineUsers: 0,\n    totalSuperUsers: 0,\n    totalNmsDevices: 0,\n    totalDevices: 0,\n    totalPendingRequests: 0\n  })\n\n  useEffect(() => {\n    (async () => {\n      const data = await CommonService.getDashboardSummary()\n      data?.data && setSummary(data.data)\n    })()\n  }, [])\n\n  return (\n\n    <Content title={[title]} subTitle={description} browserTitle={title}>\n        <Row>\n          {Object.keys(NAVIGATION_CARDS).map((key) => {\n            const card = NAVIGATION_CARDS[key]\n            return (\n              <Col key={key} md={4}>\n                <Box color={card.color} type=\"success\" icon={card.icon}>\n                  <Infobox2 title={summary[key] || 0} {...card} />\n                </Box>\n              </Col>\n            );\n          })}\n        </Row>\n    </Content>\n  );\n};\n\n\nexport default DashboardView","import { Callout } from \"adminlte-2-react\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { dismissGlobalError } from \"src/utils/storeHelper\";\nimport Dialog from \"./Dialog\";\n\nconst GlobalToast = ({\n    globalMessage = {}\n}) => {\n    if (!globalMessage || !globalMessage.message) {\n        return <React.Fragment />\n    }\n    return (\n        <Dialog\n            canDismiss={true}\n            title={''}\n            size='xl'\n            show={globalMessage.message}\n            zIndex={9999}\n            onDismiss={() => {\n                dismissGlobalError();\n            }}>\n            <Callout className=\"rounded-0\" title={globalMessage.title}\n                type={globalMessage.type}>{globalMessage.message}</Callout>\n        </Dialog>\n    )\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        globalMessage: state.globalState?.globalMessage || {}\n    };\n};\n\n\nexport default connect(mapStateToProps, null)(GlobalToast);\n","import * as yup from \"yup\";\nimport { NmsDeviceActions } from \"src/slices/NmsDeviceSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\n\nconst NmsDeviceListView = ({\n  title = 'Manage NMS Devices',\n  description = 'here you can manage devices',\n  ...rest\n}) => {\n  return (\n    <Content title={title} subTitle={description} browserTitle={title}>\n      <Box type=\"primary\" title=\"Displaying devices\" icon=\"fa-laptop\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Devices\"\n              entitySingle=\"Device\"\n              resource={`/api/v1/admin/nms-devices`}\n              onDataUpdated={async (tableData) => {\n                NmsDeviceActions.setNmsDevices(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Device ID',\n                  hidden: true,\n                },{\n                  dataField: 'name',\n                  text: 'Name',\n                  sort: true,\n                }, {\n                  dataField: 'ip',\n                  text: 'IP',\n                  sort: true,\n                },\n                {\n                  dataField: 'port',\n                  text: 'Port',\n                  sort: true,\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"ip\",\n                      name: \"ip\",\n                      label: \"IP\",\n                      type: \"text\",\n                      cols: 10,\n                    },\n                    {\n                      id: \"port\",\n                      name: \"port\",\n                      label: \"Port\",\n                      type: \"text\",\n                      cols: 2,\n                    },\n                    {\n                      id: \"name\",\n                      name: \"name\",\n                      label: \"Device Name\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    ip: yup.string().required(),\n                    name: yup.string().required(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default NmsDeviceListView;\n","import * as yup from \"yup\";\nimport { DeviceActions } from \"src/slices/DeviceSlice\";\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport CommonService from \"src/services/CommonService\";\nimport { useEffect, useState } from \"react\";\n\nconst DeviceListView = ({\n  title = 'Manage Devices',\n  description = 'here you can manage devices directory',\n  ...rest\n}) => {\n\n  const [locations, setLocations] = useState([])\n  useEffect(() => {\n    (async () => {\n      setLocations(await CommonService.getLocationList())\n    })();\n  }, [])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={title}>\n      <Box type=\"primary\" title=\"Displaying devices\" icon=\"fa-tools\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              entityPlural=\"Devices\"\n              entitySingle=\"Device\"\n              resource={`/api/v1/admin/devices`}\n              onDataUpdated={async (tableData) => {\n                DeviceActions.setDevices(tableData)\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'Device ID',\n                  hidden: true,\n                },{\n                  dataField: 'name',\n                  text: 'Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'locationId',\n                  text: 'Location',\n                  sort: true,\n                  formatter: (c, row) => {\n                    console.log(row)\n                    return locations.find(l => `${l.id}` === `${row.locationId}`)?.title || '-'\n                  }\n                },\n                 {\n                  dataField: 'ip',\n                  text: 'IP',\n                  sort: true,\n                },\n                {\n                  dataField: 'port',\n                  text: 'Port',\n                  sort: true,\n                }\n              ]}\n              formOptions={\n                {\n                  fields: [\n                    {\n                      id: \"ip\",\n                      name: \"ip\",\n                      label: \"IP\",\n                      type: \"text\",\n                      cols: 10,\n                    },\n                    {\n                      id: \"port\",\n                      name: \"port\",\n                      label: \"Port\",\n                      type: \"text\",\n                      cols: 2,\n                    },\n                    {\n                      id: \"name\",\n                      name: \"name\",\n                      label: \"Device Name\",\n                      type: \"text\",\n                      cols: 12,\n                    },\n                    {\n                      id: \"locationId\",\n                      name: \"locationId\",\n                      label: \"Location *\",\n                      type: \"select\",\n                      options: locations.map(l => {\n                        return {\n                          key: l.id,\n                          value: l.title\n                        }\n                      }),\n                      cols: 12,\n                    },\n                  ],\n                  validationSchema: yup.object().shape({\n                    ip: yup.string().required(),\n                    name: yup.string().required(),\n                  }),\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default DeviceListView;\n","import { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useMemo } from \"react\";\nimport UserService from \"src/services/UserService\";\nimport { USER_ROLES, USER_STATUSES } from \"src/constants/global\";\n\nconst AdminListView = ({\n  title = 'Super Users',\n  description = 'here you can manage super users',\n  ...rest\n}) => {\n\n  const fields = useMemo(() => {\n    const _fields = [\n      {\n        id: \"username\",\n        name: \"username\",\n        label: \"Username *\",\n        placeholder: \"Enter Username\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"password\",\n        name: \"password\",\n        label: \"Password *\",\n        type: \"password\",\n        cols: 4,\n      },\n      {\n        id: \"role\",\n        name: \"role\",\n        label: \"Role *\",\n        type: \"select\",\n        cols: 4,\n        options: [USER_ROLES.ADMIN, USER_ROLES.SUPERADMIN].map(role => {\n          return {\n            key: role,\n            value: role\n          }\n        })\n      },\n      {\n        id: \"firstName\",\n        name: \"firstName\",\n        label: \"First Name *\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"middleName\",\n        name: \"middleName\",\n        label: \"Middle Name\",\n        type: \"text\",\n        cols: 4,\n      },\n      {\n        id: \"lastName\",\n        name: \"lastName\",\n        label: \"Last Name\",\n        type: \"text\",\n        cols: 4,\n      },\n    ]\n    return _fields\n  }, [])\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage CTMS Users\"}>\n      <Box type=\"primary\" title=\"Displaying CTMS users\" icon=\"fa-users\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              actionColumnWidth={200}\n              {...rest}\n              canDelete={false}\n              rowActionButtons={[\n                {\n                  text: 'Block',\n                  icon: 'fa-times',\n                  type: 'danger',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.ACTIVE\n                  },\n                  onClick: async (id) => {\n                    await UserService.blockUser(id)\n                  }\n                },\n                {\n                  text: 'Unblock',\n                  icon: 'fa-check',\n                  type: 'success',\n                  canShow: (row) => {\n                    return row.status === USER_STATUSES.DISABLED\n                  },\n                  onClick: async (id) => {\n                    await UserService.unblockUser(id)\n                  }\n                }\n              ]}\n              entitySingle=\"Super User\"\n              entityPlural=\"Super Users\"\n              resource={`/api/v1/admin/superusers`}\n              formOptions={{\n                fields\n              }}\n              columns={[\n                {\n                  dataField: 'id',\n                  text: 'User ID',\n                  hidden: true,\n                }, {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'role',\n                  text: 'Role',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default AdminListView;\n","import { format, parseISO } from \"date-fns\"\n\nexport const humanFriendlyDateFormat = (dateStrIso, defaultFormatStr = 'E do MMM, yyyy hh:mm a') => {\n    return format(parseISO(dateStrIso), defaultFormatStr)\n}\n\nexport const formatBytesToString = (bytes) => {\n    if (bytes < 1024) {\n        return `${bytes} bytes`\n    }\n    if (bytes > 1024 && bytes < 1024 * 1024) {\n        return `${(bytes / 1024).toFixed(3)} KB`\n    }\n    if (bytes > 1024 * 1024 && bytes < 1024 * 1024 * 1024) {\n        return `${(bytes / (1024 * 1024)).toFixed(3)} MB`\n    }\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(3)} GB`\n}","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport { formatRelative, parseISO } from \"date-fns\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst OnLineUsersView = ({\n  title = 'Current Users',\n  description = 'here you can see currently active users',\n  ...rest\n}) => {\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Current Users\"}>\n      <Box type=\"success\" title=\"Displaying current users\" icon=\"fa-users\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              modalSize=\"lg\"\n              canAdd={false}\n              canEdit={false}\n              canDelete={false}\n              {...rest}\n              entitySingle=\"User\"\n              entityPlural=\"Users\"\n              resource={`/api/v1/admin/users/online`}\n              columns={[\n                {\n                  dataField: 'username',\n                  text: 'Username',\n                  sort: true,\n                },\n                {\n                  dataField: 'status',\n                  text: 'Status',\n                  sort: true,\n                },\n                {\n                  dataField: 'firstName',\n                  text: 'Name',\n                  sort: true,\n                  formatter: (c, row) => {\n                    return [row.firstName, row.middleName, row.lastName].filter(x => !!x).join(\" \")\n                  }\n\n                },\n                {\n                  dataField: 'ip',\n                  text: 'IP:Port',\n                  formatter: (c, row) => {\n                    return [row.ip, row.port].filter(x => !!x).join(\":\")\n                  }\n\n                },\n                {\n                  dataField: 'lastVisited',\n                  text: 'Last Visited',\n                  formatter: (c, row) => {\n                    return humanFriendlyDateFormat(row['lastVisited'])\n                  }\n                },\n              ]}\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\n\nexport default OnLineUsersView;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport CommonService from \"src/services/CommonService\";\nimport { formatBytesToString, humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst BackupsListView = ({\n    title = 'Database backups',\n    description = 'here you can see currently active users',\n    ...rest\n}) => {\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Database backups\"}>\n            <Box type=\"success\" title=\"Displaying latest 100 backup files\" icon=\"fa-download\">\n                <Row>\n                    <Col md={12}>\n                        <DataGridComponent\n                            modalSize=\"lg\"\n                            canAdd={false}\n                            canEdit={false}\n                            canDelete={false}\n                            {...rest}\n                            entitySingle=\"Backup\"\n                            entityPlural=\"Backups\"\n                            resource={`/api/v1/admin/db-backups`}\n                            globalActionButtons={[\n                                {\n                                    text: 'Create Backup',\n                                    icon: 'fa-plus',\n                                    type: 'success',\n                                    onClick: async () => {\n                                        await CommonService.createDatabaseBackup()\n                                    }\n                                },]\n                            }\n                            columns={[\n                                {\n                                    dataField: 'filename',\n                                    text: 'Backup file name',\n                                },\n                                {\n                                    dataField: 'size',\n                                    text: 'Size',\n                                    formatter: (c, row) => {\n                                        return formatBytesToString(row['size'])\n                                    }\n                                }, {\n                                    dataField: 'createdOn',\n                                    text: 'Created',\n                                    formatter: (c, row) => {\n                                        return humanFriendlyDateFormat(row['createdOn'])\n                                    }\n                                },\n                            ]}\n                        />\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default BackupsListView;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport { formatRelative, parseISO } from \"date-fns\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { humanFriendlyDateFormat } from \"src/utils/commonHelper\";\n\nconst ReportListView = ({\n    title = 'Reports',\n    description = 'here you can see various activity by users',\n    ...rest\n}) => {\n\n    return (\n        <Content title={title} subTitle={description} browserTitle={\"Reports\"}>\n            <Box type=\"success\" title=\"Displaying activity reports\" icon=\"fa-chart-line\">\n                <Row>\n                    <Col md={12}>\n                        <DataGridComponent\n                            modalSize=\"lg\"\n                            canAdd={false}\n                            canEdit={false}\n                            canDelete={false}\n                            {...rest}\n                            entitySingle=\"User\"\n                            entityPlural=\"Users\"\n                            resource={`/api/v1/admin/reports`}\n                            columns={[\n                                {\n                                    dataField: 'entity',\n                                    text: 'Entity',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return <strong>{`${row['entity']}`.toUpperCase()}</strong>\n                                    },\n                                },\n                                {\n                                    dataField: 'entityAction',\n                                    text: 'Action',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return row['entityAction'].split('_').join(\" \")\n                                    },\n                                },\n                                {\n                                    dataField: 'modifiedById',\n                                    text: 'Action Taken By',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return row['modifiedById'] || '-'\n                                    },\n                                },\n                                {\n                                    dataField: 'additionalInfo',\n                                    text: 'Comments',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return `${row['additionalInfo']}`\n                                    },\n                                },\n                                {\n                                    dataField: 'createdAt',\n                                    text: 'Action Performed on',\n                                    sort: true,\n                                    formatter: (c, row) => {\n                                        return `${humanFriendlyDateFormat(row['createdAt'])}`\n                                    },\n                                }\n                            ]}\n                        />\n                    </Col>\n                </Row>\n            </Box>\n        </Content>\n    );\n};\n\nexport default ReportListView;\n","\nimport { Box, Col, Content, Row } from \"adminlte-2-react\";\nimport DataGridComponent from \"src/components/DataGridComponent\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport SettingService from \"src/services/SettingService\";\n\nconst SettingsListView = ({\n  title = 'Configurations',\n  description = 'here you can manage configurations',\n  ...rest\n}) => {\n\n  const [settings, setSettings] = useState([])\n  const [record, setCurrentRecord] = useState(null)\n\n  const fields = useMemo(() => {\n    if (record) {\n      return settings.filter(setting => setting.id === record.id)\n    }\n    return []\n  }, [record, settings])\n\n  return (\n    <Content title={title} subTitle={description} browserTitle={\"Manage Configuration\"}>\n      <Box type=\"primary\" title=\"Displaying configurations\" icon=\"fa-cog\">\n        <Row>\n          <Col md={12}>\n            <DataGridComponent\n              {...rest}\n              hideIdOnEdit={true}\n              entityPlural=\"Configurations\"\n              entitySingle=\"Configuration\"\n              canAdd={false}\n              canEdit={true}\n              canDelete={false}\n              resource={`/api/v1/admin/settings`}\n              onFormShow={(row) => {\n                setCurrentRecord(row)\n              }}\n              onDataUpdated={(data) => {\n                setSettings(data.results)\n              }}\n              columns={[\n                {\n                  dataField: 'label',\n                  text: 'Setting Name',\n                  sort: true,\n                },\n                {\n                  dataField: 'value',\n                  text: 'Setting Value',\n                  sort: true,\n                }\n              ]}\n              formOptions={\n                {\n                  fields\n                }\n              }\n            />\n          </Col>\n        </Row>\n      </Box>\n    </Content>\n  );\n};\nexport default SettingsListView;\n","import { connect } from \"react-redux\";\r\nimport UserService from \"src/services/UserService\";\r\nimport { CurrentUserActions } from \"src/slices/currentUserSlice\";\r\nimport AdminLTE, { Navbar, Sidebar, } from \"adminlte-2-react\";\r\nimport LoginForm from \"src/components/LoginForm\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { navigateToLogin } from \"src/utils/routerHelper\";\r\nimport {\r\n  BRANCH_LIST_PAGE,\r\n  LOCATION_LIST_PAGE,\r\n  NAV_ITEMS,\r\n  RANK_LIST_PAGE,\r\n  REGISTRATION_LIST_PAGE,\r\n  USER_LIST_PAGE,\r\n  DASHBOARD_ROUTE,\r\n  LOGOUT_ROUTE,\r\n  NMS_LIST_PAGE,\r\n  DEVICE_MAMAGEMENT_ROUTE,\r\n  SUPER_USER_LIST_PAGE,\r\n  ONLINE_USERS_ROUTE,\r\n  BACKUPS_LIST,\r\n  REPORTS_LIST_PAGE,\r\n  SETTINGS_PAGE\r\n} from \"src/constants/global\";\r\n\r\nimport React from \"react\";\r\nimport BranchListView from \"src/modules/branches/views/BranchListView\";\r\nimport LocationListView from \"src/modules/locations/views/LocationListView\";\r\nimport RankListView from \"src/modules/ranks/views/RankListView\";\r\nimport RegistrationListView from \"src/modules/registrations/views/RegistrationListView\";\r\nimport UserListView from \"src/modules/users/UserListView\";\r\nimport DashboardView from \"src/modules/dashboard/views/DashboardView\";\r\nimport GlobalToast from \"src/components/GlobalToast\";\r\nimport NmsDeviceListView from \"src/modules/nms-devices/views/NmsDevicesListView\";\r\nimport DeviceListView from \"src/modules/device-directory/views/DevicesListView\";\r\nimport AdminListView from \"src/modules/users/AdminListView\";\r\nimport OnLineUsersView from \"src/modules/users/OnlineUsersView\";\r\nimport BackupsListView from \"src/modules/backups/BackupsListView\";\r\nimport ReportListView from \"src/modules/reports/ReportListView\";\r\nimport SettingsListView from \"src/modules/settings/SettingsListView\";\r\n\r\nconst { Entry } = Navbar\r\n\r\nconst Layout = ({ triggerLogin, currentUser }) => {\r\n  const isLoggedIn = !!currentUser\r\n  if (!isLoggedIn) {\r\n    return (\r\n      <BrowserRouter>\r\n        <GlobalToast />\r\n        <LoginForm triggerLogin={triggerLogin} />\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <GlobalToast />\r\n      <AdminLTE theme=\"black\" title={[\"TMCS\", \" Dashboard\"]}>\r\n        <Navbar.Core>\r\n          {/* <Entry icon=\"fas-bell\" labelType=\"danger\">\r\n            <Navbar.MessageItem text=\"Device 1 is offline\" when={moment().subtract(2, 'hour')}></Navbar.MessageItem>\r\n          </Entry> */}\r\n          <Entry to={LOGOUT_ROUTE} icon=\"fa-power-off\" labelType=\"danger\" onClick={() => navigateToLogin()} />\r\n        </Navbar.Core>\r\n        <Sidebar.Core>\r\n          {\r\n            NAV_ITEMS.map((item, index) => {\r\n              if (item.items && item.items.length > 0) {\r\n                return (<Sidebar.Item onClick={item.onClick} key={index} icon={item.icon} text={item.title} to={item.path} color={item.color ?? 'gray'}>\r\n                  {(item.items || []).map((childItem, childIndex) => {\r\n                    return <Sidebar.Item onClick={childItem.onClick} key={`${index}-child-${childIndex}`} icon={childItem.icon} text={childItem.title} to={childItem.path} color={childItem.color ?? 'gray'} />\r\n                  })}\r\n                </Sidebar.Item>)\r\n              }\r\n              return <Sidebar.Item onClick={item.onClick} key={`${index}`} icon={item.icon} text={item.title} to={item.path} color={item.color ?? 'gray'} />\r\n            })\r\n          }\r\n        </Sidebar.Core>\r\n\r\n        <BranchListView path={BRANCH_LIST_PAGE} exact={true} />\r\n        <LocationListView path={LOCATION_LIST_PAGE} exact={true} />\r\n        <RankListView path={RANK_LIST_PAGE} exact={true} />\r\n        <RegistrationListView path={REGISTRATION_LIST_PAGE} exact={true} />\r\n        <UserListView path={USER_LIST_PAGE} exact={true} />\r\n        <DashboardView path={DASHBOARD_ROUTE} exact={true} />\r\n        <NmsDeviceListView path={NMS_LIST_PAGE} exact={true} />\r\n        <DeviceListView path={DEVICE_MAMAGEMENT_ROUTE} exact={true} />\r\n        <AdminListView path={SUPER_USER_LIST_PAGE} exact={true} />\r\n        <OnLineUsersView path={ONLINE_USERS_ROUTE} exact={true} />\r\n        <BackupsListView path={BACKUPS_LIST} exact={true} />\r\n        <ReportListView path={REPORTS_LIST_PAGE} exact={true} />\r\n        <SettingsListView path={SETTINGS_PAGE} exact={true} />\r\n      </AdminLTE>\r\n    </React.Fragment>\r\n\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentUser: state.currentUserState?.user || null,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    triggerLogin: async ({ username, password }, history) => {\r\n      const data = await UserService.loginUser(username, password);\r\n      data?.success && dispatch(CurrentUserActions.setUserState(data.data));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Layout from \"./layouts\";\nimport store from \"./store/store\";\nimport { Provider } from \"react-redux\";\nimport 'react-quill/dist/quill.snow.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'src/assets/style.css'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.Fragment>\n      <Layout />\n    </React.Fragment>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","const LocalStorageHelper = {\n  store: (key, value) => {\n    if (key && value) {\n      window.localStorage.setItem(key, JSON.stringify(value));\n    }\n  },\n  get: (key) => {\n    if (key) {\n        let value = window.localStorage.getItem(key);\n        try{\n            return JSON.parse(value);\n        }catch(e){\n            return value || null\n        }\n    }\n  },\n  delete: (key) => {\n      if(key){\n         localStorage.removeItem(key);\n      }\n  }\n};\n\nexport default LocalStorageHelper\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: RegistrationReducer, actions: RegistrationActions } = createSlice(\n  {\n    name: \"registrationSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n    },\n    reducers: {\n      setRegistrations: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: UserReducer, actions: UserActions } = createSlice(\n  {\n    name: \"userSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n    },\n    reducers: {\n      setUsers: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport thunk from \"redux-thunk\";\r\nimport { RegistrationReducer } from \"src/slices/RegistrationSlice\";\r\nimport { RankReducer } from \"src/slices/RankSlice\";\r\nimport { BranchReducer } from \"src/slices/BranchSlice\";\r\nimport { LocationReducer } from \"src/slices/LocationSlice\";\r\nimport { GlobalReducer } from \"src/slices/globalSlice\";\r\nimport { CurrentUserReducer } from \"src/slices/currentUserSlice\";\r\nimport { NmsDeviceReducer } from \"src/slices/NmsDeviceSlice\";\r\nimport { DeviceReducer } from \"src/slices/DeviceSlice\";\r\nimport { UserReducer as UserManagementReducer } from \"src/slices/UserSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    globalState: GlobalReducer,\r\n    currentUserState: CurrentUserReducer,\r\n    rankState: RankReducer,\r\n    branchState: BranchReducer,\r\n    locationState: LocationReducer,\r\n    registrationState: RegistrationReducer,\r\n    nmsState: NmsDeviceReducer,\r\n    deviceState: DeviceReducer,\r\n    userState: UserManagementReducer\r\n  },\r\n  middleware: [thunk],\r\n});\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const { actions: GlobalActions, reducer: GlobalReducer } = createSlice({\r\n  name: \"globalSlice\",\r\n  initialState: {\r\n    errors: null,\r\n    globalMessage: {\r\n      title: '',\r\n      type: '',\r\n      message: ''\r\n    },\r\n    fileManagerContext: {\r\n      context: null,\r\n      show: false,\r\n    },\r\n  },\r\n  reducers: {\r\n    setGlobalMessage: (state, { payload }) => {\r\n      const { type, title, message } = payload\r\n      state.globalMessage = { ...state.globalError, type, title, message }\r\n    },\r\n    setFileManagerContext: (state, { payload }) => {\r\n      state.fileManagerContext = {\r\n        ...state.fileManagerContext,\r\n        ...payload,\r\n        show: payload?.context ? true : payload.show,\r\n      };\r\n    },\r\n  },\r\n});\r\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: RankReducer, actions: RankActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      rank: null,\n    },\n    reducers: {\n      setRanks: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const { reducer: BranchReducer, actions: BranchActions } = createSlice(\n  {\n    name: \"pageSlice\",\n    initialState: {\n      listData: {\n        results: [],\n        currentPage: 1,\n        totalResults: 0,\n        totalPages: 1,\n      },\n      branch: null,\n    },\n    reducers: {\n      setBranches: (state, { payload }) => {\n        state.listData = { ...payload }\n      },\n    },\n  }\n);\n"],"sourceRoot":""}